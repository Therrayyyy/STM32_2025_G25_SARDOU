
Transmission.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009130  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  080092c0  080092c0  0000a2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  0000b1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800982c  0800982c  0000a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009834  08009834  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009834  08009834  0000a834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009838  08009838  0000a838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800983c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200001e0  08009a1c  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08009a1c  0000b8b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016608  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003169  00000000  00000000  00021818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00024988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2e  00000000  00000000  00025d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292cf  00000000  00000000  00026c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ef2  00000000  00000000  0004ff0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7999  00000000  00000000  00068dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000633c  00000000  00000000  001607dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00166b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092a8 	.word	0x080092a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080092a8 	.word	0x080092a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <Set_Pin_Output>:
#include "dht22.h"
#include "tim.h" // Assurez-vous que le timer est configuré pour gérer les délais

// Fonction pour configurer une broche en sortie
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Mode sortie push-pull
 8000f94:	2301      	movs	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Vitesse basse pour minimiser le bruit
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f001 fd02 	bl	80029ac <HAL_GPIO_Init>
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <Set_Pin_Input>:

// Fonction pour configurer une broche en entrée
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Mode entrée
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // Pas de pull-up ou pull-down
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f001 fce4 	bl	80029ac <HAL_GPIO_Init>
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <DHT22_Start>:

// Fonction d'initialisation du DHT22
void DHT22_Start(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    Set_Pin_Output(DHT22_PORT, DHT22_PIN); // Configurer la broche en sortie
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff6:	f7ff ffbd 	bl	8000f74 <Set_Pin_Output>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_RESET); // Mettre la ligne à LOW
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001002:	f001 fe95 	bl	8002d30 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // Maintenir LOW pendant >1ms (réinitialisation du capteur)
 8001006:	2001      	movs	r0, #1
 8001008:	f001 fb9a 	bl	8002740 <HAL_Delay>

    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET); // Relâcher la ligne
 800100c:	2201      	movs	r2, #1
 800100e:	2102      	movs	r1, #2
 8001010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001014:	f001 fe8c 	bl	8002d30 <HAL_GPIO_WritePin>
    delay(30);  // Attendre 30µs avant d'écouter la réponse du capteur
 8001018:	201e      	movs	r0, #30
 800101a:	f000 f8dd 	bl	80011d8 <delay>

    Set_Pin_Input(DHT22_PORT, DHT22_PIN); // Passer en entrée pour lire la réponse du DHT22
 800101e:	2102      	movs	r1, #2
 8001020:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001024:	f7ff ffc4 	bl	8000fb0 <Set_Pin_Input>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <DHT22_Check_Response>:

// Vérifier la réponse du DHT22
uint8_t DHT22_Check_Response(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
    delay(40); // Attendre 40µs
 8001036:	2028      	movs	r0, #40	@ 0x28
 8001038:	f000 f8ce 	bl	80011d8 <delay>

    if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // Vérifier si la ligne est LOW
 800103c:	2102      	movs	r1, #2
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f001 fe5d 	bl	8002d00 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10f      	bne.n	800106c <DHT22_Check_Response+0x40>
    {
        delay(80); // Attendre encore 80µs
 800104c:	2050      	movs	r0, #80	@ 0x50
 800104e:	f000 f8c3 	bl	80011d8 <delay>
        if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // Vérifier si la ligne est HIGH
 8001052:	2102      	movs	r1, #2
 8001054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001058:	f001 fe52 	bl	8002d00 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <DHT22_Check_Response+0x3c>
            Response = 1; // Réponse correcte du DHT22
 8001062:	2301      	movs	r3, #1
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	e001      	b.n	800106c <DHT22_Check_Response+0x40>
        else
            Response = 0; // Pas de réponse
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
    }

    while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))); // Attendre que la ligne repasse à LOW
 800106c:	bf00      	nop
 800106e:	2102      	movs	r1, #2
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f001 fe44 	bl	8002d00 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f7      	bne.n	800106e <DHT22_Check_Response+0x42>
    return Response; // Retourner l'état de la réponse
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <DHT22_Read>:

// Lire un octet de données du DHT22
uint8_t DHT22_Read(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
    uint8_t i = 0, j;
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]

    for (j = 0; j < 8; j++) // Lire 8 bits
 8001092:	2300      	movs	r3, #0
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	e03a      	b.n	800110e <DHT22_Read+0x86>
    {
        while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))); // Attendre le passage à HIGH
 8001098:	bf00      	nop
 800109a:	2102      	movs	r1, #2
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f001 fe2e 	bl	8002d00 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f7      	beq.n	800109a <DHT22_Read+0x12>
        delay(40); // Attendre 40 µs
 80010aa:	2028      	movs	r0, #40	@ 0x28
 80010ac:	f000 f894 	bl	80011d8 <delay>

        if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) // Si la ligne est LOW après 40µs
 80010b0:	2102      	movs	r1, #2
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b6:	f001 fe23 	bl	8002d00 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10e      	bne.n	80010de <DHT22_Read+0x56>
            i &= ~(1 << (7 - j));  // Écrire 0 dans le bit correspondant
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2201      	movs	r2, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	b25a      	sxtb	r2, r3
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	4013      	ands	r3, r2
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	e00b      	b.n	80010f6 <DHT22_Read+0x6e>
        else
            i |= (1 << (7 - j));   // Écrire 1 dans le bit correspondant
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	f1c3 0307 	rsb	r3, r3, #7
 80010e4:	2201      	movs	r2, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	71fb      	strb	r3, [r7, #7]

        while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))); // Attendre le retour à LOW
 80010f6:	bf00      	nop
 80010f8:	2102      	movs	r1, #2
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fe:	f001 fdff 	bl	8002d00 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f7      	bne.n	80010f8 <DHT22_Read+0x70>
    for (j = 0; j < 8; j++) // Lire 8 bits
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	3301      	adds	r3, #1
 800110c:	71bb      	strb	r3, [r7, #6]
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	2b07      	cmp	r3, #7
 8001112:	d9c1      	bls.n	8001098 <DHT22_Read+0x10>
    }
    return i; // Retourner l’octet lu
 8001114:	79fb      	ldrb	r3, [r7, #7]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <DHT22_Get_Data>:

// Fonction pour récupérer la température et l'humidité du DHT22
void DHT22_Get_Data(float *temperature, float *humidity)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
    uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2, SUM;
    uint16_t RH, TEMP;

    DHT22_Start(); // Démarrer le protocole de communication avec le capteur
 800112a:	f7ff ff5f 	bl	8000fec <DHT22_Start>
    if (DHT22_Check_Response()) // Vérifier si le capteur répond
 800112e:	f7ff ff7d 	bl	800102c <DHT22_Check_Response>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d049      	beq.n	80011cc <DHT22_Get_Data+0xac>
    {
        Rh_byte1 = DHT22_Read();  // Lire la première partie de l'humidité
 8001138:	f7ff ffa6 	bl	8001088 <DHT22_Read>
 800113c:	4603      	mov	r3, r0
 800113e:	75fb      	strb	r3, [r7, #23]
        Rh_byte2 = DHT22_Read();  // Lire la seconde partie de l'humidité
 8001140:	f7ff ffa2 	bl	8001088 <DHT22_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	75bb      	strb	r3, [r7, #22]
        Temp_byte1 = DHT22_Read(); // Lire la première partie de la température
 8001148:	f7ff ff9e 	bl	8001088 <DHT22_Read>
 800114c:	4603      	mov	r3, r0
 800114e:	757b      	strb	r3, [r7, #21]
        Temp_byte2 = DHT22_Read(); // Lire la seconde partie de la température
 8001150:	f7ff ff9a 	bl	8001088 <DHT22_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	753b      	strb	r3, [r7, #20]
        SUM = DHT22_Read(); // Lire le checksum (somme de contrôle)
 8001158:	f7ff ff96 	bl	8001088 <DHT22_Read>
 800115c:	4603      	mov	r3, r0
 800115e:	74fb      	strb	r3, [r7, #19]

        // Convertir les valeurs brutes en valeurs exploitables
        RH = ((Rh_byte1 << 8) | Rh_byte2); // Combiner les deux octets pour l'humidité
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	b21b      	sxth	r3, r3
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7dbb      	ldrb	r3, [r7, #22]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	823b      	strh	r3, [r7, #16]
        TEMP = ((Temp_byte1 << 8) | Temp_byte2); // Combiner les deux octets pour la température
 8001172:	7d7b      	ldrb	r3, [r7, #21]
 8001174:	b21b      	sxth	r3, r3
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	7d3b      	ldrb	r3, [r7, #20]
 800117c:	b21b      	sxth	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b21b      	sxth	r3, r3
 8001182:	81fb      	strh	r3, [r7, #14]

        *humidity = (float)(RH / 10.0); // Convertir l'humidité en pourcentage
 8001184:	8a3b      	ldrh	r3, [r7, #16]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9cc 	bl	8000524 <__aeabi_i2d>
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <DHT22_Get_Data+0xb4>)
 8001192:	f7ff fb5b 	bl	800084c <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fd03 	bl	8000ba8 <__aeabi_d2f>
 80011a2:	4602      	mov	r2, r0
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	601a      	str	r2, [r3, #0]
        *temperature = (float)(TEMP / 10.0); // Convertir la température en degrés Celsius
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9ba 	bl	8000524 <__aeabi_i2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <DHT22_Get_Data+0xb4>)
 80011b6:	f7ff fb49 	bl	800084c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fcf1 	bl	8000ba8 <__aeabi_d2f>
 80011c6:	4602      	mov	r2, r0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
    }
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40240000 	.word	0x40240000

080011d8 <delay>:

// Fonction de délai en microsecondes (utilise TIM6)
void delay (uint16_t time)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6, 0); // Réinitialiser le compteur du timer
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <delay+0x30>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim6)) < time); // Attendre que le timer atteigne la valeur demandée
 80011ea:	bf00      	nop
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <delay+0x30>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3f9      	bcc.n	80011ec <delay+0x14>
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200005c0 	.word	0x200005c0

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b46      	ldr	r3, [pc, #280]	@ (800133c <MX_GPIO_Init+0x130>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a45      	ldr	r2, [pc, #276]	@ (800133c <MX_GPIO_Init+0x130>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b43      	ldr	r3, [pc, #268]	@ (800133c <MX_GPIO_Init+0x130>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	4b40      	ldr	r3, [pc, #256]	@ (800133c <MX_GPIO_Init+0x130>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a3f      	ldr	r2, [pc, #252]	@ (800133c <MX_GPIO_Init+0x130>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <MX_GPIO_Init+0x130>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b3a      	ldr	r3, [pc, #232]	@ (800133c <MX_GPIO_Init+0x130>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a39      	ldr	r2, [pc, #228]	@ (800133c <MX_GPIO_Init+0x130>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b37      	ldr	r3, [pc, #220]	@ (800133c <MX_GPIO_Init+0x130>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b34      	ldr	r3, [pc, #208]	@ (800133c <MX_GPIO_Init+0x130>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a33      	ldr	r2, [pc, #204]	@ (800133c <MX_GPIO_Init+0x130>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b31      	ldr	r3, [pc, #196]	@ (800133c <MX_GPIO_Init+0x130>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2120      	movs	r1, #32
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f001 fd51 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2140      	movs	r1, #64	@ 0x40
 8001292:	482b      	ldr	r0, [pc, #172]	@ (8001340 <MX_GPIO_Init+0x134>)
 8001294:	f001 fd4c 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001298:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4825      	ldr	r0, [pc, #148]	@ (8001344 <MX_GPIO_Init+0x138>)
 80012b0:	f001 fb7c 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012b4:	2320      	movs	r3, #32
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f001 fb6d 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ec:	f001 fb5e 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012f0:	2320      	movs	r3, #32
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	480f      	ldr	r0, [pc, #60]	@ (8001340 <MX_GPIO_Init+0x134>)
 8001304:	f001 fb52 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001308:	2340      	movs	r3, #64	@ 0x40
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4808      	ldr	r0, [pc, #32]	@ (8001340 <MX_GPIO_Init+0x134>)
 8001320:	f001 fb44 	bl	80029ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2017      	movs	r0, #23
 800132a:	f001 fb08 	bl	800293e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800132e:	2017      	movs	r0, #23
 8001330:	f001 fb21 	bl	8002976 <HAL_NVIC_EnableIRQ>

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400
 8001344:	48000800 	.word	0x48000800

08001348 <HX711_Start>:
#include "main.h"
#include <stdio.h>

// Fonction d'initialisation du HX711
void HX711_Start(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET); // Met SCK à 1 pour réveiller le capteur
 800134c:	2201      	movs	r2, #1
 800134e:	2140      	movs	r1, #64	@ 0x40
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <HX711_Start+0x28>)
 8001352:	f001 fced 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_Delay(10); // Attente de 10 ms
 8001356:	200a      	movs	r0, #10
 8001358:	f001 f9f2 	bl	8002740 <HAL_Delay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET); // Remet SCK à 0 pour initialiser la communication
 800135c:	2200      	movs	r2, #0
 800135e:	2140      	movs	r1, #64	@ 0x40
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <HX711_Start+0x28>)
 8001362:	f001 fce5 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_Delay(10); // Attente de 10 ms
 8001366:	200a      	movs	r0, #10
 8001368:	f001 f9ea 	bl	8002740 <HAL_Delay>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	48000400 	.word	0x48000400

08001374 <getHX711>:

// Fonction pour lire une valeur brute de 24 bits depuis le HX711
int32_t getHX711(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
  uint32_t data = 0; // Stocke la donnée lue
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick(); // Stocke le temps de départ pour éviter un blocage
 800137e:	f001 f9d3 	bl	8002728 <HAL_GetTick>
 8001382:	6078      	str	r0, [r7, #4]

  // Attente de la disponibilité des données (DOUT passe à 0)
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8001384:	e008      	b.n	8001398 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200) // Si l'attente dépasse 200 ms, annule la lecture
 8001386:	f001 f9cf 	bl	8002728 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2bc8      	cmp	r3, #200	@ 0xc8
 8001392:	d901      	bls.n	8001398 <getHX711+0x24>
      return 0;
 8001394:	2300      	movs	r3, #0
 8001396:	e045      	b.n	8001424 <getHX711+0xb0>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8001398:	2120      	movs	r1, #32
 800139a:	4824      	ldr	r0, [pc, #144]	@ (800142c <getHX711+0xb8>)
 800139c:	f001 fcb0 	bl	8002d00 <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d0ef      	beq.n	8001386 <getHX711+0x12>
  }

  // Lecture des 24 bits de données
  for(int8_t len=0; len<24 ; len++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	72fb      	strb	r3, [r7, #11]
 80013aa:	e022      	b.n	80013f2 <getHX711+0x7e>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET); // Génère une impulsion d'horloge SCK (montée)
 80013ac:	2201      	movs	r2, #1
 80013ae:	2140      	movs	r1, #64	@ 0x40
 80013b0:	481e      	ldr	r0, [pc, #120]	@ (800142c <getHX711+0xb8>)
 80013b2:	f001 fcbd 	bl	8002d30 <HAL_GPIO_WritePin>
    delay(1); // Petite pause pour garantir la stabilité
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff ff0e 	bl	80011d8 <delay>
    data = data << 1; // Décale la donnée vers la gauche pour insérer un nouveau bit
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET); // Génère une impulsion d'horloge SCK (descente)
 80013c2:	2200      	movs	r2, #0
 80013c4:	2140      	movs	r1, #64	@ 0x40
 80013c6:	4819      	ldr	r0, [pc, #100]	@ (800142c <getHX711+0xb8>)
 80013c8:	f001 fcb2 	bl	8002d30 <HAL_GPIO_WritePin>
    delay(1); // Petite pause
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff ff03 	bl	80011d8 <delay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET) // Lit la valeur de DOUT
 80013d2:	2120      	movs	r1, #32
 80013d4:	4815      	ldr	r0, [pc, #84]	@ (800142c <getHX711+0xb8>)
 80013d6:	f001 fc93 	bl	8002d00 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d102      	bne.n	80013e6 <getHX711+0x72>
      data ++; // Ajoute 1 si le bit lu est haut
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80013e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	72fb      	strb	r3, [r7, #11]
 80013f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80013f6:	2b17      	cmp	r3, #23
 80013f8:	ddd8      	ble.n	80013ac <getHX711+0x38>
  }

  data = data ^ 0x800000; // Applique un XOR avec 0x800000 pour convertir en valeur signée 24 bits
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8001400:	60fb      	str	r3, [r7, #12]

  // Impulsion supplémentaire pour configurer le gain à 128 et canal A
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2140      	movs	r1, #64	@ 0x40
 8001406:	4809      	ldr	r0, [pc, #36]	@ (800142c <getHX711+0xb8>)
 8001408:	f001 fc92 	bl	8002d30 <HAL_GPIO_WritePin>
  delay(1);
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff fee3 	bl	80011d8 <delay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	@ 0x40
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <getHX711+0xb8>)
 8001418:	f001 fc8a 	bl	8002d30 <HAL_GPIO_WritePin>
  delay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff fedb 	bl	80011d8 <delay>

  return data; // Retourne la donnée lue
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	48000400 	.word	0x48000400

08001430 <getAverageReading>:

int32_t getAverageReading(uint16_t samples)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  int32_t total = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  for(uint16_t i=0 ; i<samples ; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	817b      	strh	r3, [r7, #10]
 8001442:	e008      	b.n	8001456 <getAverageReading+0x26>
  {
      total += getHX711();
 8001444:	f7ff ff96 	bl	8001374 <getHX711>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
  for(uint16_t i=0 ; i<samples ; i++)
 8001450:	897b      	ldrh	r3, [r7, #10]
 8001452:	3301      	adds	r3, #1
 8001454:	817b      	strh	r3, [r7, #10]
 8001456:	897a      	ldrh	r2, [r7, #10]
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	429a      	cmp	r2, r3
 800145c:	d3f2      	bcc.n	8001444 <getAverageReading+0x14>
  }
  return (int32_t)(total / samples);
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <calibrate>:

void calibrate(float *kHX711, uint32_t *taree)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  // Étape 1 : Mesure de la tare
  *taree = getAverageReading(50);
 800147a:	2032      	movs	r0, #50	@ 0x32
 800147c:	f7ff ffd8 	bl	8001430 <getAverageReading>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	601a      	str	r2, [r3, #0]
  HAL_Delay(2000);
 8001488:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800148c:	f001 f958 	bl	8002740 <HAL_Delay>

  clearlcd();
 8001490:	f000 fa14 	bl	80018bc <clearlcd>
  lcd_position(&hi2c1, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	4822      	ldr	r0, [pc, #136]	@ (8001524 <calibrate+0xb4>)
 800149a:	f000 fa52 	bl	8001942 <lcd_position>
  lcd_print(&hi2c1, "Veuillez deposer");
 800149e:	4922      	ldr	r1, [pc, #136]	@ (8001528 <calibrate+0xb8>)
 80014a0:	4820      	ldr	r0, [pc, #128]	@ (8001524 <calibrate+0xb4>)
 80014a2:	f000 fa25 	bl	80018f0 <lcd_print>
  lcd_position(&hi2c1, 2, 1);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2102      	movs	r1, #2
 80014aa:	481e      	ldr	r0, [pc, #120]	@ (8001524 <calibrate+0xb4>)
 80014ac:	f000 fa49 	bl	8001942 <lcd_position>
  lcd_print(&hi2c1, "votre objet");
 80014b0:	491e      	ldr	r1, [pc, #120]	@ (800152c <calibrate+0xbc>)
 80014b2:	481c      	ldr	r0, [pc, #112]	@ (8001524 <calibrate+0xb4>)
 80014b4:	f000 fa1c 	bl	80018f0 <lcd_print>
  printf("Veuillez deposer un objet pour commencer la procedure de calibrage\r\n");
 80014b8:	481d      	ldr	r0, [pc, #116]	@ (8001530 <calibrate+0xc0>)
 80014ba:	f005 fd83 	bl	8006fc4 <puts>
  HAL_Delay(5000);
 80014be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014c2:	f001 f93d 	bl	8002740 <HAL_Delay>

  clearlcd();
 80014c6:	f000 f9f9 	bl	80018bc <clearlcd>
  lcd_position(&hi2c1, 4, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2104      	movs	r1, #4
 80014ce:	4815      	ldr	r0, [pc, #84]	@ (8001524 <calibrate+0xb4>)
 80014d0:	f000 fa37 	bl	8001942 <lcd_position>
  lcd_print(&hi2c1, "Calibrage");
 80014d4:	4917      	ldr	r1, [pc, #92]	@ (8001534 <calibrate+0xc4>)
 80014d6:	4813      	ldr	r0, [pc, #76]	@ (8001524 <calibrate+0xb4>)
 80014d8:	f000 fa0a 	bl	80018f0 <lcd_print>
  lcd_position(&hi2c1, 3, 1);
 80014dc:	2201      	movs	r2, #1
 80014de:	2103      	movs	r1, #3
 80014e0:	4810      	ldr	r0, [pc, #64]	@ (8001524 <calibrate+0xb4>)
 80014e2:	f000 fa2e 	bl	8001942 <lcd_position>
  lcd_print(&hi2c1, "En cours...");
 80014e6:	4914      	ldr	r1, [pc, #80]	@ (8001538 <calibrate+0xc8>)
 80014e8:	480e      	ldr	r0, [pc, #56]	@ (8001524 <calibrate+0xb4>)
 80014ea:	f000 fa01 	bl	80018f0 <lcd_print>
  printf("Le calibrage est en cours...\r\n");
 80014ee:	4813      	ldr	r0, [pc, #76]	@ (800153c <calibrate+0xcc>)
 80014f0:	f005 fd68 	bl	8006fc4 <puts>
  HAL_Delay(3000);
 80014f4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014f8:	f001 f922 	bl	8002740 <HAL_Delay>

  // Étape 2 : Mesure avec l'objet connu
  *kHX711 = getAverageReading(50) - *taree;
 80014fc:	2032      	movs	r0, #50	@ 0x32
 80014fe:	f7ff ff97 	bl	8001430 <getAverageReading>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	edc3 7a00 	vstr	s15, [r3]
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001fc 	.word	0x200001fc
 8001528:	080092c0 	.word	0x080092c0
 800152c:	080092d4 	.word	0x080092d4
 8001530:	080092e0 	.word	0x080092e0
 8001534:	08009324 	.word	0x08009324
 8001538:	08009330 	.word	0x08009330
 800153c:	0800933c 	.word	0x0800933c

08001540 <weigh>:

// Fonction pour mesurer le poids d'un objet
int weigh(float kOriginal, float kHX711, uint32_t taree)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	ed87 0a03 	vstr	s0, [r7, #12]
 800154a:	edc7 0a02 	vstr	s1, [r7, #8]
 800154e:	6078      	str	r0, [r7, #4]
  int32_t  measuredValue = getAverageReading(50); // Mesure la valeur actuelle du capteur
 8001550:	2032      	movs	r0, #50	@ 0x32
 8001552:	f7ff ff6d 	bl	8001430 <getAverageReading>
 8001556:	61f8      	str	r0, [r7, #28]
  float coefficient = kOriginal / kHX711; // Calcule le coefficient de conversion
 8001558:	edd7 6a03 	vldr	s13, [r7, #12]
 800155c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001564:	edc7 7a06 	vstr	s15, [r7, #24]
  int milligram = (int)(measuredValue - taree) * coefficient; // Convertit la valeur brute en mg
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001576:	edd7 7a06 	vldr	s15, [r7, #24]
 800157a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001582:	ee17 3a90 	vmov	r3, s15
 8001586:	617b      	str	r3, [r7, #20]
  return milligram; // Retourne le poids en mg
 8001588:	697b      	ldr	r3, [r7, #20]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <MX_I2C1_Init+0x74>)
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <MX_I2C1_Init+0x78>)
 800159c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001610 <MX_I2C1_Init+0x7c>)
 80015a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ce:	480e      	ldr	r0, [pc, #56]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015d0:	f001 fbde 	bl	8002d90 <HAL_I2C_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015da:	f000 fd54 	bl	8002086 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015de:	2100      	movs	r1, #0
 80015e0:	4809      	ldr	r0, [pc, #36]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015e2:	f002 fa11 	bl	8003a08 <HAL_I2CEx_ConfigAnalogFilter>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015ec:	f000 fd4b 	bl	8002086 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015f0:	2100      	movs	r1, #0
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_I2C1_Init+0x74>)
 80015f4:	f002 fa53 	bl	8003a9e <HAL_I2CEx_ConfigDigitalFilter>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015fe:	f000 fd42 	bl	8002086 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200001fc 	.word	0x200001fc
 800160c:	40005400 	.word	0x40005400
 8001610:	10d19ce4 	.word	0x10d19ce4

08001614 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0ac      	sub	sp, #176	@ 0xb0
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2288      	movs	r2, #136	@ 0x88
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f005 fdfd 	bl	8007234 <memset>
  if(i2cHandle->Instance==I2C1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <HAL_I2C_MspInit+0xb0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d13b      	bne.n	80016bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001644:	2340      	movs	r3, #64	@ 0x40
 8001646:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001648:	2300      	movs	r3, #0
 800164a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4618      	mov	r0, r3
 8001652:	f003 f8d5 	bl	8004800 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800165c:	f000 fd13 	bl	8002086 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_I2C_MspInit+0xb4>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	4a18      	ldr	r2, [pc, #96]	@ (80016c8 <HAL_I2C_MspInit+0xb4>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <HAL_I2C_MspInit+0xb4>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001678:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001680:	2312      	movs	r3, #18
 8001682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001692:	2304      	movs	r3, #4
 8001694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800169c:	4619      	mov	r1, r3
 800169e:	480b      	ldr	r0, [pc, #44]	@ (80016cc <HAL_I2C_MspInit+0xb8>)
 80016a0:	f001 f984 	bl	80029ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_I2C_MspInit+0xb4>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_I2C_MspInit+0xb4>)
 80016aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_I2C_MspInit+0xb4>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016bc:	bf00      	nop
 80016be:	37b0      	adds	r7, #176	@ 0xb0
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40005400 	.word	0x40005400
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48000400 	.word	0x48000400

080016d0 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	f043 030c 	orr.w	r3, r3, #12
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80016fc:	f107 0118 	add.w	r1, r7, #24
 8001700:	230a      	movs	r3, #10
 8001702:	2202      	movs	r2, #2
 8001704:	486c      	ldr	r0, [pc, #432]	@ (80018b8 <lcd_init+0x1e8>)
 8001706:	f004 f8cb 	bl	80058a0 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800170a:	f640 230d 	movw	r3, #2573	@ 0xa0d
 800170e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001710:	f107 0114 	add.w	r1, r7, #20
 8001714:	230a      	movs	r3, #10
 8001716:	2202      	movs	r2, #2
 8001718:	4867      	ldr	r0, [pc, #412]	@ (80018b8 <lcd_init+0x1e8>)
 800171a:	f004 f8c1 	bl	80058a0 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800171e:	2364      	movs	r3, #100	@ 0x64
 8001720:	2205      	movs	r2, #5
 8001722:	217c      	movs	r1, #124	@ 0x7c
 8001724:	69f8      	ldr	r0, [r7, #28]
 8001726:	f001 fddd 	bl	80032e4 <HAL_I2C_IsDeviceReady>
 800172a:	4603      	mov	r3, r0
 800172c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 800172e:	f107 0113 	add.w	r1, r7, #19
 8001732:	230a      	movs	r3, #10
 8001734:	2201      	movs	r2, #1
 8001736:	4860      	ldr	r0, [pc, #384]	@ (80018b8 <lcd_init+0x1e8>)
 8001738:	f004 f8b2 	bl	80058a0 <HAL_UART_Transmit>
	HAL_Delay(50);
 800173c:	2032      	movs	r0, #50	@ 0x32
 800173e:	f000 ffff 	bl	8002740 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001742:	f107 0218 	add.w	r2, r7, #24
 8001746:	f241 3388 	movw	r3, #5000	@ 0x1388
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2302      	movs	r3, #2
 800174e:	217c      	movs	r1, #124	@ 0x7c
 8001750:	69f8      	ldr	r0, [r7, #28]
 8001752:	f001 fbb9 	bl	8002ec8 <HAL_I2C_Master_Transmit>
 8001756:	4603      	mov	r3, r0
 8001758:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800175a:	f107 0112 	add.w	r1, r7, #18
 800175e:	230a      	movs	r3, #10
 8001760:	2201      	movs	r2, #1
 8001762:	4855      	ldr	r0, [pc, #340]	@ (80018b8 <lcd_init+0x1e8>)
 8001764:	f004 f89c 	bl	80058a0 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001768:	2032      	movs	r0, #50	@ 0x32
 800176a:	f000 ffe9 	bl	8002740 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800176e:	f107 0218 	add.w	r2, r7, #24
 8001772:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2302      	movs	r3, #2
 800177a:	217c      	movs	r1, #124	@ 0x7c
 800177c:	69f8      	ldr	r0, [r7, #28]
 800177e:	f001 fba3 	bl	8002ec8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001782:	2005      	movs	r0, #5
 8001784:	f000 ffdc 	bl	8002740 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001788:	f107 0218 	add.w	r2, r7, #24
 800178c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2302      	movs	r3, #2
 8001794:	217c      	movs	r1, #124	@ 0x7c
 8001796:	69f8      	ldr	r0, [r7, #28]
 8001798:	f001 fb96 	bl	8002ec8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2204      	movs	r2, #4
 80017a0:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80017ae:	f107 0218 	add.w	r2, r7, #24
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2302      	movs	r3, #2
 80017ba:	217c      	movs	r1, #124	@ 0x7c
 80017bc:	69f8      	ldr	r0, [r7, #28]
 80017be:	f001 fb83 	bl	8002ec8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80017c2:	2301      	movs	r3, #1
 80017c4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80017c6:	f107 0218 	add.w	r2, r7, #24
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2302      	movs	r3, #2
 80017d2:	217c      	movs	r1, #124	@ 0x7c
 80017d4:	69f8      	ldr	r0, [r7, #28]
 80017d6:	f001 fb77 	bl	8002ec8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80017da:	2002      	movs	r0, #2
 80017dc:	f000 ffb0 	bl	8002740 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2202      	movs	r2, #2
 80017e4:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80017f2:	f107 0218 	add.w	r2, r7, #24
 80017f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2302      	movs	r3, #2
 80017fe:	217c      	movs	r1, #124	@ 0x7c
 8001800:	69f8      	ldr	r0, [r7, #28]
 8001802:	f001 fb61 	bl	8002ec8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001806:	2300      	movs	r3, #0
 8001808:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800180e:	f107 0210 	add.w	r2, r7, #16
 8001812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2302      	movs	r3, #2
 800181a:	21c4      	movs	r1, #196	@ 0xc4
 800181c:	69f8      	ldr	r0, [r7, #28]
 800181e:	f001 fb53 	bl	8002ec8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001822:	2308      	movs	r3, #8
 8001824:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001826:	23ff      	movs	r3, #255	@ 0xff
 8001828:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800182a:	f107 0210 	add.w	r2, r7, #16
 800182e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2302      	movs	r3, #2
 8001836:	21c4      	movs	r1, #196	@ 0xc4
 8001838:	69f8      	ldr	r0, [r7, #28]
 800183a:	f001 fb45 	bl	8002ec8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 800183e:	2301      	movs	r3, #1
 8001840:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001842:	2320      	movs	r3, #32
 8001844:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001846:	f107 0210 	add.w	r2, r7, #16
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2302      	movs	r3, #2
 8001852:	21c4      	movs	r1, #196	@ 0xc4
 8001854:	69f8      	ldr	r0, [r7, #28]
 8001856:	f001 fb37 	bl	8002ec8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800185a:	2304      	movs	r3, #4
 800185c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800185e:	23ff      	movs	r3, #255	@ 0xff
 8001860:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001862:	f107 020c 	add.w	r2, r7, #12
 8001866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2302      	movs	r3, #2
 800186e:	21c4      	movs	r1, #196	@ 0xc4
 8001870:	69f8      	ldr	r0, [r7, #28]
 8001872:	f001 fb29 	bl	8002ec8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001876:	2303      	movs	r3, #3
 8001878:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800187a:	23ff      	movs	r3, #255	@ 0xff
 800187c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800187e:	f107 020c 	add.w	r2, r7, #12
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2302      	movs	r3, #2
 800188a:	21c4      	movs	r1, #196	@ 0xc4
 800188c:	69f8      	ldr	r0, [r7, #28]
 800188e:	f001 fb1b 	bl	8002ec8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001892:	2302      	movs	r3, #2
 8001894:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001896:	23ff      	movs	r3, #255	@ 0xff
 8001898:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800189a:	f107 020c 	add.w	r2, r7, #12
 800189e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2302      	movs	r3, #2
 80018a6:	21c4      	movs	r1, #196	@ 0xc4
 80018a8:	69f8      	ldr	r0, [r7, #28]
 80018aa:	f001 fb0d 	bl	8002ec8 <HAL_I2C_Master_Transmit>


}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200006e0 	.word	0x200006e0

080018bc <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <clearlcd+0x2c>)
 80018c6:	f000 f83c 	bl	8001942 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <clearlcd+0x30>)
 80018cc:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <clearlcd+0x2c>)
 80018ce:	f000 f80f 	bl	80018f0 <lcd_print>
	lcd_position(&hi2c1,0,1);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2100      	movs	r1, #0
 80018d6:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <clearlcd+0x2c>)
 80018d8:	f000 f833 	bl	8001942 <lcd_position>
	lcd_print(&hi2c1,"                ");
 80018dc:	4903      	ldr	r1, [pc, #12]	@ (80018ec <clearlcd+0x30>)
 80018de:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <clearlcd+0x2c>)
 80018e0:	f000 f806 	bl	80018f0 <lcd_print>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200001fc 	.word	0x200001fc
 80018ec:	0800935c 	.word	0x0800935c

080018f0 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80018fe:	2340      	movs	r3, #64	@ 0x40
 8001900:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001906:	e011      	b.n	800192c <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001912:	f107 020c 	add.w	r2, r7, #12
 8001916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2302      	movs	r3, #2
 800191e:	217c      	movs	r1, #124	@ 0x7c
 8001920:	6938      	ldr	r0, [r7, #16]
 8001922:	f001 fad1 	bl	8002ec8 <HAL_I2C_Master_Transmit>
            i++;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e7      	bne.n	8001908 <lcd_print+0x18>
   }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af02      	add	r7, sp, #8
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
 800194e:	4613      	mov	r3, r2
 8001950:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001956:	78bb      	ldrb	r3, [r7, #2]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <lcd_position+0x24>
    {
        col = col | 0x80;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001962:	70fb      	strb	r3, [r7, #3]
 8001964:	e003      	b.n	800196e <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800196c:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001976:	f107 0208 	add.w	r2, r7, #8
 800197a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2302      	movs	r3, #2
 8001982:	217c      	movs	r1, #124	@ 0x7c
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f001 fa9f 	bl	8002ec8 <HAL_I2C_Master_Transmit>
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001998:	f000 fe56 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199c:	f000 fb22 	bl	8001fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a0:	f7ff fc34 	bl	800120c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019a4:	f000 fd54 	bl	8002450 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019a8:	f7ff fdf4 	bl	8001594 <MX_I2C1_Init>
  MX_TIM6_Init();
 80019ac:	f000 fcb0 	bl	8002310 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80019b0:	f000 fd1e 	bl	80023f0 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  initializeSensors();
 80019b4:	f000 f81e 	bl	80019f4 <initializeSensors>

  // Send initial LoRa commands
  sendLoRaCommand("AT\r\n");
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <main+0x58>)
 80019ba:	f000 f849 	bl	8001a50 <sendLoRaCommand>
  sendLoRaCommand("AT+MODE=TEST\r\n");
 80019be:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <main+0x5c>)
 80019c0:	f000 f846 	bl	8001a50 <sendLoRaCommand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    processSHT31Data();
 80019c4:	f000 f890 	bl	8001ae8 <processSHT31Data>
    HAL_Delay(20000);
 80019c8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80019cc:	f000 feb8 	bl	8002740 <HAL_Delay>

    processHX711Data();
 80019d0:	f000 fa76 	bl	8001ec0 <processHX711Data>
    HAL_Delay(10000);
 80019d4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80019d8:	f000 feb2 	bl	8002740 <HAL_Delay>

    processDHT22Data();
 80019dc:	f000 f9be 	bl	8001d5c <processDHT22Data>
    HAL_Delay(20000);
 80019e0:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80019e4:	f000 feac 	bl	8002740 <HAL_Delay>
    processSHT31Data();
 80019e8:	bf00      	nop
 80019ea:	e7eb      	b.n	80019c4 <main+0x30>
 80019ec:	08009370 	.word	0x08009370
 80019f0:	08009378 	.word	0x08009378

080019f4 <initializeSensors>:

/**
  * @brief Initialize sensors and peripherals.
  */
void initializeSensors(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start(&htim6); // Start the timer
 80019f8:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <initializeSensors+0x3c>)
 80019fa:	f003 fc15 	bl	8005228 <HAL_TIM_Base_Start>
  HX711_Start();
 80019fe:	f7ff fca3 	bl	8001348 <HX711_Start>

  // Initialize LCD
  lcd_init(&hi2c1, &lcd);
 8001a02:	490c      	ldr	r1, [pc, #48]	@ (8001a34 <initializeSensors+0x40>)
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <initializeSensors+0x44>)
 8001a06:	f7ff fe63 	bl	80016d0 <lcd_init>
  displayLCDMessage("Calibration", "Weight Sensor");
 8001a0a:	490c      	ldr	r1, [pc, #48]	@ (8001a3c <initializeSensors+0x48>)
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <initializeSensors+0x4c>)
 8001a0e:	f000 f849 	bl	8001aa4 <displayLCDMessage>
  HAL_Delay(3000);
 8001a12:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001a16:	f000 fe93 	bl	8002740 <HAL_Delay>

  // Start auto-calibration
  calibrate(&knownHxVal, &tareVal);
 8001a1a:	490a      	ldr	r1, [pc, #40]	@ (8001a44 <initializeSensors+0x50>)
 8001a1c:	480a      	ldr	r0, [pc, #40]	@ (8001a48 <initializeSensors+0x54>)
 8001a1e:	f7ff fd27 	bl	8001470 <calibrate>
  displayLCDMessage("Calibration", "Complete");
 8001a22:	490a      	ldr	r1, [pc, #40]	@ (8001a4c <initializeSensors+0x58>)
 8001a24:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <initializeSensors+0x4c>)
 8001a26:	f000 f83d 	bl	8001aa4 <displayLCDMessage>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200005c0 	.word	0x200005c0
 8001a34:	200005b4 	.word	0x200005b4
 8001a38:	200001fc 	.word	0x200001fc
 8001a3c:	08009388 	.word	0x08009388
 8001a40:	08009398 	.word	0x08009398
 8001a44:	200005a4 	.word	0x200005a4
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	080093a4 	.word	0x080093a4

08001a50 <sendLoRaCommand>:

/**
  * @brief Send a command to the LoRa module.
  */
void sendLoRaCommand(const char* cmd)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  snprintf(loraCmd, sizeof(loraCmd), "%s", cmd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a94 <sendLoRaCommand+0x44>)
 8001a5c:	2140      	movs	r1, #64	@ 0x40
 8001a5e:	480e      	ldr	r0, [pc, #56]	@ (8001a98 <sendLoRaCommand+0x48>)
 8001a60:	f005 fab8 	bl	8006fd4 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)loraCmd, strlen(loraCmd), 1000);
 8001a64:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <sendLoRaCommand+0x48>)
 8001a66:	f7fe fc03 	bl	8000270 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a72:	4909      	ldr	r1, [pc, #36]	@ (8001a98 <sendLoRaCommand+0x48>)
 8001a74:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <sendLoRaCommand+0x4c>)
 8001a76:	f003 ff13 	bl	80058a0 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, (uint8_t*)loraResp, sizeof(loraResp), 1000);
 8001a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a82:	4907      	ldr	r1, [pc, #28]	@ (8001aa0 <sendLoRaCommand+0x50>)
 8001a84:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <sendLoRaCommand+0x4c>)
 8001a86:	f003 ff94 	bl	80059b2 <HAL_UART_Receive>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	080093b0 	.word	0x080093b0
 8001a98:	20000250 	.word	0x20000250
 8001a9c:	20000658 	.word	0x20000658
 8001aa0:	20000290 	.word	0x20000290

08001aa4 <displayLCDMessage>:

/**
  * @brief Display a message on the LCD.
  */
void displayLCDMessage(const char* line1, const char* line2)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  clearlcd();
 8001aae:	f7ff ff05 	bl	80018bc <clearlcd>
  lcd_position(&hi2c1, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <displayLCDMessage+0x3c>)
 8001ab8:	f7ff ff43 	bl	8001942 <lcd_position>
  lcd_print(&hi2c1, line1);
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <displayLCDMessage+0x3c>)
 8001ac0:	f7ff ff16 	bl	80018f0 <lcd_print>
  lcd_position(&hi2c1, 0, 1);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <displayLCDMessage+0x3c>)
 8001aca:	f7ff ff3a 	bl	8001942 <lcd_position>
  lcd_print(&hi2c1, line2);
 8001ace:	6839      	ldr	r1, [r7, #0]
 8001ad0:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <displayLCDMessage+0x3c>)
 8001ad2:	f7ff ff0d 	bl	80018f0 <lcd_print>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001fc 	.word	0x200001fc
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <processSHT31Data>:

/**
  * @brief Process data from the SHT31 sensor.
  */
void processSHT31Data(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b096      	sub	sp, #88	@ 0x58
 8001aec:	af04      	add	r7, sp, #16
  // Send I2C command to configure SHT31 sensor
  HAL_I2C_Master_Transmit(&hi2c1, (0x44 << 1), shtCmd, 2, 5000);
 8001aee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2302      	movs	r3, #2
 8001af6:	4a88      	ldr	r2, [pc, #544]	@ (8001d18 <processSHT31Data+0x230>)
 8001af8:	2188      	movs	r1, #136	@ 0x88
 8001afa:	4888      	ldr	r0, [pc, #544]	@ (8001d1c <processSHT31Data+0x234>)
 8001afc:	f001 f9e4 	bl	8002ec8 <HAL_I2C_Master_Transmit>
  HAL_Delay(50);
 8001b00:	2032      	movs	r0, #50	@ 0x32
 8001b02:	f000 fe1d 	bl	8002740 <HAL_Delay>

  // Read data from SHT31 sensor
  HAL_I2C_Master_Receive(&hi2c1, (0x44 << 1), shtData, 6, 5000);
 8001b06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	4a84      	ldr	r2, [pc, #528]	@ (8001d20 <processSHT31Data+0x238>)
 8001b10:	2188      	movs	r1, #136	@ 0x88
 8001b12:	4882      	ldr	r0, [pc, #520]	@ (8001d1c <processSHT31Data+0x234>)
 8001b14:	f001 faf0 	bl	80030f8 <HAL_I2C_Master_Receive>
  HAL_Delay(50);
 8001b18:	2032      	movs	r0, #50	@ 0x32
 8001b1a:	f000 fe11 	bl	8002740 <HAL_Delay>

  // Convert raw data to temperature and humidity
  rawTemp = (shtData[0] << 8) | shtData[1];
 8001b1e:	4b80      	ldr	r3, [pc, #512]	@ (8001d20 <processSHT31Data+0x238>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	4b7d      	ldr	r3, [pc, #500]	@ (8001d20 <processSHT31Data+0x238>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b7b      	ldr	r3, [pc, #492]	@ (8001d24 <processSHT31Data+0x23c>)
 8001b36:	801a      	strh	r2, [r3, #0]
  temp1 = -45 + 175 * (rawTemp / 65535.0);
 8001b38:	4b7a      	ldr	r3, [pc, #488]	@ (8001d24 <processSHT31Data+0x23c>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fcf1 	bl	8000524 <__aeabi_i2d>
 8001b42:	a371      	add	r3, pc, #452	@ (adr r3, 8001d08 <processSHT31Data+0x220>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fe80 	bl	800084c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	a36e      	add	r3, pc, #440	@ (adr r3, 8001d10 <processSHT31Data+0x228>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fd4d 	bl	80005f8 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d28 <processSHT31Data+0x240>)
 8001b6c:	f7fe fb8c 	bl	8000288 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7ff f816 	bl	8000ba8 <__aeabi_d2f>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a6b      	ldr	r2, [pc, #428]	@ (8001d2c <processSHT31Data+0x244>)
 8001b80:	6013      	str	r3, [r2, #0]
  rawHum = (shtData[3] << 8) | shtData[4];
 8001b82:	4b67      	ldr	r3, [pc, #412]	@ (8001d20 <processSHT31Data+0x238>)
 8001b84:	78db      	ldrb	r3, [r3, #3]
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b64      	ldr	r3, [pc, #400]	@ (8001d20 <processSHT31Data+0x238>)
 8001b8e:	791b      	ldrb	r3, [r3, #4]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b65      	ldr	r3, [pc, #404]	@ (8001d30 <processSHT31Data+0x248>)
 8001b9a:	801a      	strh	r2, [r3, #0]
  hum1 = 100 * (rawHum / 65535.0);
 8001b9c:	4b64      	ldr	r3, [pc, #400]	@ (8001d30 <processSHT31Data+0x248>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcbf 	bl	8000524 <__aeabi_i2d>
 8001ba6:	a358      	add	r3, pc, #352	@ (adr r3, 8001d08 <processSHT31Data+0x220>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fe4e 	bl	800084c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8001d34 <processSHT31Data+0x24c>)
 8001bbe:	f7fe fd1b 	bl	80005f8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ffed 	bl	8000ba8 <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a59      	ldr	r2, [pc, #356]	@ (8001d38 <processSHT31Data+0x250>)
 8001bd2:	6013      	str	r3, [r2, #0]

  // Display data on LCD
  char dispTemp1[20], dispHum1[20];
  sprintf(dispTemp1, "Temp: %.2f C", temp1);
 8001bd4:	4b55      	ldr	r3, [pc, #340]	@ (8001d2c <processSHT31Data+0x244>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fcb5 	bl	8000548 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	f107 001c 	add.w	r0, r7, #28
 8001be6:	4955      	ldr	r1, [pc, #340]	@ (8001d3c <processSHT31Data+0x254>)
 8001be8:	f005 fa2a 	bl	8007040 <siprintf>
  sprintf(dispHum1, "Hum: %.2f %%", hum1);
 8001bec:	4b52      	ldr	r3, [pc, #328]	@ (8001d38 <processSHT31Data+0x250>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fca9 	bl	8000548 <__aeabi_f2d>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	f107 0008 	add.w	r0, r7, #8
 8001bfe:	4950      	ldr	r1, [pc, #320]	@ (8001d40 <processSHT31Data+0x258>)
 8001c00:	f005 fa1e 	bl	8007040 <siprintf>
  displayLCDMessage(dispTemp1, dispHum1);
 8001c04:	f107 0208 	add.w	r2, r7, #8
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff48 	bl	8001aa4 <displayLCDMessage>

  // Prepare and send LoRa message
  char sensor1Id[3] = {"01"};
 8001c14:	4a4b      	ldr	r2, [pc, #300]	@ (8001d44 <processSHT31Data+0x25c>)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	8019      	strh	r1, [r3, #0]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	0c12      	lsrs	r2, r2, #16
 8001c22:	701a      	strb	r2, [r3, #0]
  int tempInt1 = (int)temp1;
 8001c24:	4b41      	ldr	r3, [pc, #260]	@ (8001d2c <processSHT31Data+0x244>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2e:	ee17 3a90 	vmov	r3, s15
 8001c32:	647b      	str	r3, [r7, #68]	@ 0x44
  float tempDec1 = temp1 - tempInt1;
 8001c34:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <processSHT31Data+0x244>)
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  int tempDecInt1 = (int)(tempDec1 * 100);
 8001c4c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c50:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001d48 <processSHT31Data+0x260>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5c:	ee17 3a90 	vmov	r3, s15
 8001c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  int humInt1 = (int)hum1;
 8001c62:	4b35      	ldr	r3, [pc, #212]	@ (8001d38 <processSHT31Data+0x250>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6c:	ee17 3a90 	vmov	r3, s15
 8001c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  float humDec1 = hum1 - humInt1;
 8001c72:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <processSHT31Data+0x250>)
 8001c74:	ed93 7a00 	vldr	s14, [r3]
 8001c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c86:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  int humDecInt1 = (int)(humDec1 * 100);
 8001c8a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c8e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001d48 <processSHT31Data+0x260>
 8001c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9a:	ee17 3a90 	vmov	r3, s15
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30

  snprintf(loraMsg, sizeof(loraMsg), "AT+TEST=TXLRPKT \"%s%02d%02d%02d%02d\"\r\n", sensor1Id, tempInt1, tempDecInt1, humInt1, humDecInt1);
 8001ca0:	1d3a      	adds	r2, r7, #4
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca4:	9303      	str	r3, [sp, #12]
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	4a25      	ldr	r2, [pc, #148]	@ (8001d4c <processSHT31Data+0x264>)
 8001cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cba:	4825      	ldr	r0, [pc, #148]	@ (8001d50 <processSHT31Data+0x268>)
 8001cbc:	f005 f98a 	bl	8006fd4 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)loraMsg, strlen(loraMsg), 1000);
 8001cc0:	4823      	ldr	r0, [pc, #140]	@ (8001d50 <processSHT31Data+0x268>)
 8001cc2:	f7fe fad5 	bl	8000270 <strlen>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cce:	4920      	ldr	r1, [pc, #128]	@ (8001d50 <processSHT31Data+0x268>)
 8001cd0:	4820      	ldr	r0, [pc, #128]	@ (8001d54 <processSHT31Data+0x26c>)
 8001cd2:	f003 fde5 	bl	80058a0 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, (uint8_t*)loraRetMsg, sizeof(loraRetMsg), 1000);
 8001cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cde:	491e      	ldr	r1, [pc, #120]	@ (8001d58 <processSHT31Data+0x270>)
 8001ce0:	481c      	ldr	r0, [pc, #112]	@ (8001d54 <processSHT31Data+0x26c>)
 8001ce2:	f003 fe66 	bl	80059b2 <HAL_UART_Receive>

  // Clear buffers
  memset(loraMsg, 0, sizeof(loraMsg));
 8001ce6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cea:	2100      	movs	r1, #0
 8001cec:	4818      	ldr	r0, [pc, #96]	@ (8001d50 <processSHT31Data+0x268>)
 8001cee:	f005 faa1 	bl	8007234 <memset>
  memset(loraRetMsg, 0, sizeof(loraRetMsg));
 8001cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4817      	ldr	r0, [pc, #92]	@ (8001d58 <processSHT31Data+0x270>)
 8001cfa:	f005 fa9b 	bl	8007234 <memset>
}
 8001cfe:	bf00      	nop
 8001d00:	3748      	adds	r7, #72	@ 0x48
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40efffe0 	.word	0x40efffe0
 8001d10:	00000000 	.word	0x00000000
 8001d14:	4065e000 	.word	0x4065e000
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	200001fc 	.word	0x200001fc
 8001d20:	20000590 	.word	0x20000590
 8001d24:	20000596 	.word	0x20000596
 8001d28:	40468000 	.word	0x40468000
 8001d2c:	2000059c 	.word	0x2000059c
 8001d30:	20000598 	.word	0x20000598
 8001d34:	40590000 	.word	0x40590000
 8001d38:	200005a0 	.word	0x200005a0
 8001d3c:	080093b4 	.word	0x080093b4
 8001d40:	080093c4 	.word	0x080093c4
 8001d44:	080093fc 	.word	0x080093fc
 8001d48:	42c80000 	.word	0x42c80000
 8001d4c:	080093d4 	.word	0x080093d4
 8001d50:	20000390 	.word	0x20000390
 8001d54:	20000658 	.word	0x20000658
 8001d58:	20000490 	.word	0x20000490

08001d5c <processDHT22Data>:

/**
  * @brief Process data from the DHT22 sensor.
  */
void processDHT22Data(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b096      	sub	sp, #88	@ 0x58
 8001d60:	af04      	add	r7, sp, #16
  DHT22_Get_Data(&temp2, &hum2);
 8001d62:	494e      	ldr	r1, [pc, #312]	@ (8001e9c <processDHT22Data+0x140>)
 8001d64:	484e      	ldr	r0, [pc, #312]	@ (8001ea0 <processDHT22Data+0x144>)
 8001d66:	f7ff f9db 	bl	8001120 <DHT22_Get_Data>

  // Display data on LCD
  char dispTemp2[20], dispHum2[20];
  sprintf(dispTemp2, "Temp: %.1f C", temp2);
 8001d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea0 <processDHT22Data+0x144>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbea 	bl	8000548 <__aeabi_f2d>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	f107 001c 	add.w	r0, r7, #28
 8001d7c:	4949      	ldr	r1, [pc, #292]	@ (8001ea4 <processDHT22Data+0x148>)
 8001d7e:	f005 f95f 	bl	8007040 <siprintf>
  sprintf(dispHum2, "Hum: %.1f %%", hum2);
 8001d82:	4b46      	ldr	r3, [pc, #280]	@ (8001e9c <processDHT22Data+0x140>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbde 	bl	8000548 <__aeabi_f2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	f107 0008 	add.w	r0, r7, #8
 8001d94:	4944      	ldr	r1, [pc, #272]	@ (8001ea8 <processDHT22Data+0x14c>)
 8001d96:	f005 f953 	bl	8007040 <siprintf>
  displayLCDMessage(dispTemp2, dispHum2);
 8001d9a:	f107 0208 	add.w	r2, r7, #8
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fe7d 	bl	8001aa4 <displayLCDMessage>

  // Prepare and send LoRa message
  char sensor3Id[3] = {"03"};
 8001daa:	4a40      	ldr	r2, [pc, #256]	@ (8001eac <processDHT22Data+0x150>)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	4611      	mov	r1, r2
 8001db2:	8019      	strh	r1, [r3, #0]
 8001db4:	3302      	adds	r3, #2
 8001db6:	0c12      	lsrs	r2, r2, #16
 8001db8:	701a      	strb	r2, [r3, #0]
  int tempInt2 = (int)temp2;
 8001dba:	4b39      	ldr	r3, [pc, #228]	@ (8001ea0 <processDHT22Data+0x144>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc4:	ee17 3a90 	vmov	r3, s15
 8001dc8:	647b      	str	r3, [r7, #68]	@ 0x44
  float tempDec2 = temp2 - tempInt2;
 8001dca:	4b35      	ldr	r3, [pc, #212]	@ (8001ea0 <processDHT22Data+0x144>)
 8001dcc:	ed93 7a00 	vldr	s14, [r3]
 8001dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dde:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  int tempDecInt2 = (int)(tempDec2 * 10);
 8001de2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001de6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df2:	ee17 3a90 	vmov	r3, s15
 8001df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  int humInt2 = (int)hum2;
 8001df8:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <processDHT22Data+0x140>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e02:	ee17 3a90 	vmov	r3, s15
 8001e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  float humDec2 = hum2 - humInt2;
 8001e08:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <processDHT22Data+0x140>)
 8001e0a:	ed93 7a00 	vldr	s14, [r3]
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  int humDecInt2 = (int)(humDec2 * 10);
 8001e20:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e24:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e30:	ee17 3a90 	vmov	r3, s15
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30

  snprintf(loraMsg, sizeof(loraMsg), "AT+TEST=TXLRPKT \"%s%02d%01d%02d%01d\"\r\n", sensor3Id, tempInt2, tempDecInt2, humInt2, humDecInt2);
 8001e36:	1d3a      	adds	r2, r7, #4
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3a:	9303      	str	r3, [sp, #12]
 8001e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e3e:	9302      	str	r3, [sp, #8]
 8001e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <processDHT22Data+0x154>)
 8001e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e50:	4818      	ldr	r0, [pc, #96]	@ (8001eb4 <processDHT22Data+0x158>)
 8001e52:	f005 f8bf 	bl	8006fd4 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)loraMsg, strlen(loraMsg), 1000);
 8001e56:	4817      	ldr	r0, [pc, #92]	@ (8001eb4 <processDHT22Data+0x158>)
 8001e58:	f7fe fa0a 	bl	8000270 <strlen>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e64:	4913      	ldr	r1, [pc, #76]	@ (8001eb4 <processDHT22Data+0x158>)
 8001e66:	4814      	ldr	r0, [pc, #80]	@ (8001eb8 <processDHT22Data+0x15c>)
 8001e68:	f003 fd1a 	bl	80058a0 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, (uint8_t*)loraRetMsg, sizeof(loraRetMsg), 1000);
 8001e6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e74:	4911      	ldr	r1, [pc, #68]	@ (8001ebc <processDHT22Data+0x160>)
 8001e76:	4810      	ldr	r0, [pc, #64]	@ (8001eb8 <processDHT22Data+0x15c>)
 8001e78:	f003 fd9b 	bl	80059b2 <HAL_UART_Receive>

  // Clear buffers
  memset(loraMsg, 0, sizeof(loraMsg));
 8001e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e80:	2100      	movs	r1, #0
 8001e82:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <processDHT22Data+0x158>)
 8001e84:	f005 f9d6 	bl	8007234 <memset>
  memset(loraRetMsg, 0, sizeof(loraRetMsg));
 8001e88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	480b      	ldr	r0, [pc, #44]	@ (8001ebc <processDHT22Data+0x160>)
 8001e90:	f005 f9d0 	bl	8007234 <memset>
}
 8001e94:	bf00      	nop
 8001e96:	3748      	adds	r7, #72	@ 0x48
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200005b0 	.word	0x200005b0
 8001ea0:	200005ac 	.word	0x200005ac
 8001ea4:	08009400 	.word	0x08009400
 8001ea8:	08009410 	.word	0x08009410
 8001eac:	08009448 	.word	0x08009448
 8001eb0:	08009420 	.word	0x08009420
 8001eb4:	20000390 	.word	0x20000390
 8001eb8:	20000658 	.word	0x20000658
 8001ebc:	20000490 	.word	0x20000490

08001ec0 <processHX711Data>:

/**
  * @brief Process data from the HX711 sensor.
  */
void processHX711Data(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af02      	add	r7, sp, #8
  char sensor2Id[3] = {"02"};
 8001ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f70 <processHX711Data+0xb0>)
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	8019      	strh	r1, [r3, #0]
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	0c12      	lsrs	r2, r2, #16
 8001ed6:	701a      	strb	r2, [r3, #0]
  char loraWeight[20];

  weightVal = weigh(knownWeight, knownHxVal, tareVal);
 8001ed8:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <processHX711Data+0xb4>)
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <processHX711Data+0xb8>)
 8001ee0:	ed93 7a00 	vldr	s14, [r3]
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <processHX711Data+0xbc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	eef0 0a47 	vmov.f32	s1, s14
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	f7ff fb25 	bl	8001540 <weigh>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a21      	ldr	r2, [pc, #132]	@ (8001f80 <processHX711Data+0xc0>)
 8001efa:	6013      	str	r3, [r2, #0]

  if (weightVal > 0) {
 8001efc:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <processHX711Data+0xc0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	dd30      	ble.n	8001f66 <processHX711Data+0xa6>
      sprintf(loraWeight, "%d", weightVal);
 8001f04:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <processHX711Data+0xc0>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	463b      	mov	r3, r7
 8001f0a:	491e      	ldr	r1, [pc, #120]	@ (8001f84 <processHX711Data+0xc4>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 f897 	bl	8007040 <siprintf>

      // Construct and send LoRa message
      snprintf(loraMsg, sizeof(loraMsg), "AT+TEST=TXLRPKT \"%s%s\"\r\n", sensor2Id, loraWeight);
 8001f12:	f107 0214 	add.w	r2, r7, #20
 8001f16:	463b      	mov	r3, r7
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f88 <processHX711Data+0xc8>)
 8001f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f22:	481a      	ldr	r0, [pc, #104]	@ (8001f8c <processHX711Data+0xcc>)
 8001f24:	f005 f856 	bl	8006fd4 <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)loraMsg, strlen(loraMsg), 1000);
 8001f28:	4818      	ldr	r0, [pc, #96]	@ (8001f8c <processHX711Data+0xcc>)
 8001f2a:	f7fe f9a1 	bl	8000270 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f36:	4915      	ldr	r1, [pc, #84]	@ (8001f8c <processHX711Data+0xcc>)
 8001f38:	4815      	ldr	r0, [pc, #84]	@ (8001f90 <processHX711Data+0xd0>)
 8001f3a:	f003 fcb1 	bl	80058a0 <HAL_UART_Transmit>
      HAL_UART_Receive(&huart1, (uint8_t*)loraRetMsg, sizeof(loraRetMsg), 1000);
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f46:	4913      	ldr	r1, [pc, #76]	@ (8001f94 <processHX711Data+0xd4>)
 8001f48:	4811      	ldr	r0, [pc, #68]	@ (8001f90 <processHX711Data+0xd0>)
 8001f4a:	f003 fd32 	bl	80059b2 <HAL_UART_Receive>

      // Clear buffers
      memset(loraMsg, 0, sizeof(loraMsg));
 8001f4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f52:	2100      	movs	r1, #0
 8001f54:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <processHX711Data+0xcc>)
 8001f56:	f005 f96d 	bl	8007234 <memset>
      memset(loraRetMsg, 0, sizeof(loraRetMsg));
 8001f5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f5e:	2100      	movs	r1, #0
 8001f60:	480c      	ldr	r0, [pc, #48]	@ (8001f94 <processHX711Data+0xd4>)
 8001f62:	f005 f967 	bl	8007234 <memset>
  }
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	0800946c 	.word	0x0800946c
 8001f74:	20000004 	.word	0x20000004
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	200005a4 	.word	0x200005a4
 8001f80:	200005a8 	.word	0x200005a8
 8001f84:	0800944c 	.word	0x0800944c
 8001f88:	08009450 	.word	0x08009450
 8001f8c:	20000390 	.word	0x20000390
 8001f90:	20000658 	.word	0x20000658
 8001f94:	20000490 	.word	0x20000490

08001f98 <__io_putchar>:

PUTCHAR_PROTOTYPE // Display printf in terminal
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001fa0:	1d39      	adds	r1, r7, #4
 8001fa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4803      	ldr	r0, [pc, #12]	@ (8001fb8 <__io_putchar+0x20>)
 8001faa:	f003 fc79 	bl	80058a0 <HAL_UART_Transmit>
  return ch;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200006e0 	.word	0x200006e0

08001fbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_8) // If interrupt from PA8 (PIR sensor)
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fcc:	d102      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x18>
    {
        motionDetected = 1; // Signal motion detected
 8001fce:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0x24>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
    }
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	200005b8 	.word	0x200005b8

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b096      	sub	sp, #88	@ 0x58
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	2244      	movs	r2, #68	@ 0x44
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f005 f91e 	bl	8007234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002006:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800200a:	f001 fda3 	bl	8003b54 <HAL_PWREx_ControlVoltageScaling>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002014:	f000 f837 	bl	8002086 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002018:	2302      	movs	r3, #2
 800201a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002020:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002022:	2310      	movs	r3, #16
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002026:	2302      	movs	r3, #2
 8002028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800202a:	2302      	movs	r3, #2
 800202c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002032:	230a      	movs	r3, #10
 8002034:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002036:	2307      	movs	r3, #7
 8002038:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800203a:	2302      	movs	r3, #2
 800203c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800203e:	2302      	movs	r3, #2
 8002040:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4618      	mov	r0, r3
 8002048:	f001 fdda 	bl	8003c00 <HAL_RCC_OscConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002052:	f000 f818 	bl	8002086 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002056:	230f      	movs	r3, #15
 8002058:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205a:	2303      	movs	r3, #3
 800205c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	2104      	movs	r1, #4
 800206e:	4618      	mov	r0, r3
 8002070:	f002 f9a2 	bl	80043b8 <HAL_RCC_ClockConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800207a:	f000 f804 	bl	8002086 <Error_Handler>
  }
}
 800207e:	bf00      	nop
 8002080:	3758      	adds	r7, #88	@ 0x58
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800208a:	b672      	cpsid	i
}
 800208c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800208e:	bf00      	nop
 8002090:	e7fd      	b.n	800208e <Error_Handler+0x8>
	...

08002094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <HAL_MspInit+0x44>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209e:	4a0e      	ldr	r2, [pc, #56]	@ (80020d8 <HAL_MspInit+0x44>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020a6:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <HAL_MspInit+0x44>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <HAL_MspInit+0x44>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	4a08      	ldr	r2, [pc, #32]	@ (80020d8 <HAL_MspInit+0x44>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_MspInit+0x44>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <NMI_Handler+0x4>

080020e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <HardFault_Handler+0x4>

080020ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <MemManage_Handler+0x4>

080020f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <UsageFault_Handler+0x4>

08002104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002132:	f000 fae5 	bl	8002700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}

0800213a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800213e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002142:	f000 fe0d 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002150:	4802      	ldr	r0, [pc, #8]	@ (800215c <TIM7_IRQHandler+0x10>)
 8002152:	f003 f8d1 	bl	80052f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000060c 	.word	0x2000060c

08002160 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return 1;
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_kill>:

int _kill(int pid, int sig)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800217a:	f005 f8ad 	bl	80072d8 <__errno>
 800217e:	4603      	mov	r3, r0
 8002180:	2216      	movs	r2, #22
 8002182:	601a      	str	r2, [r3, #0]
  return -1;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_exit>:

void _exit (int status)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffe7 	bl	8002170 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021a2:	bf00      	nop
 80021a4:	e7fd      	b.n	80021a2 <_exit+0x12>

080021a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e00a      	b.n	80021ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b8:	f3af 8000 	nop.w
 80021bc:	4601      	mov	r1, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	60ba      	str	r2, [r7, #8]
 80021c4:	b2ca      	uxtb	r2, r1
 80021c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dbf0      	blt.n	80021b8 <_read+0x12>
  }

  return len;
 80021d6:	687b      	ldr	r3, [r7, #4]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e009      	b.n	8002206 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	60ba      	str	r2, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fecc 	bl	8001f98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbf1      	blt.n	80021f2 <_write+0x12>
  }
  return len;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_close>:

int _close(int file)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002240:	605a      	str	r2, [r3, #4]
  return 0;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_isatty>:

int _isatty(int file)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f005 f812 	bl	80072d8 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20018000 	.word	0x20018000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	200005bc 	.word	0x200005bc
 80022e8:	200008b8 	.word	0x200008b8

080022ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <SystemInit+0x20>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	4a05      	ldr	r2, [pc, #20]	@ (800230c <SystemInit+0x20>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <MX_TIM6_Init+0x64>)
 8002322:	4a15      	ldr	r2, [pc, #84]	@ (8002378 <MX_TIM6_Init+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002326:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <MX_TIM6_Init+0x64>)
 8002328:	224f      	movs	r2, #79	@ 0x4f
 800232a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <MX_TIM6_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <MX_TIM6_Init+0x64>)
 8002334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002338:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b0e      	ldr	r3, [pc, #56]	@ (8002374 <MX_TIM6_Init+0x64>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002340:	480c      	ldr	r0, [pc, #48]	@ (8002374 <MX_TIM6_Init+0x64>)
 8002342:	f002 ff19 	bl	8005178 <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800234c:	f7ff fe9b 	bl	8002086 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	@ (8002374 <MX_TIM6_Init+0x64>)
 800235e:	f003 f9ab 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002368:	f7ff fe8d 	bl	8002086 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200005c0 	.word	0x200005c0
 8002378:	40001000 	.word	0x40001000

0800237c <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM7_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a16      	ldr	r2, [pc, #88]	@ (80023e4 <HAL_TIM_Base_MspInit+0x68>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10c      	bne.n	80023a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800238e:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <HAL_TIM_Base_MspInit+0x6c>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	4a15      	ldr	r2, [pc, #84]	@ (80023e8 <HAL_TIM_Base_MspInit+0x6c>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	6593      	str	r3, [r2, #88]	@ 0x58
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <HAL_TIM_Base_MspInit+0x6c>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80023a6:	e018      	b.n	80023da <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0f      	ldr	r2, [pc, #60]	@ (80023ec <HAL_TIM_Base_MspInit+0x70>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d113      	bne.n	80023da <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023b2:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <HAL_TIM_Base_MspInit+0x6c>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b6:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <HAL_TIM_Base_MspInit+0x6c>)
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_TIM_Base_MspInit+0x6c>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2037      	movs	r0, #55	@ 0x37
 80023d0:	f000 fab5 	bl	800293e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023d4:	2037      	movs	r0, #55	@ 0x37
 80023d6:	f000 face 	bl	8002976 <HAL_NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40001000 	.word	0x40001000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40001400 	.word	0x40001400

080023f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <MX_USART1_UART_Init+0x5c>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023fa:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 80023fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 800242e:	2200      	movs	r2, #0
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <MX_USART1_UART_Init+0x58>)
 8002434:	f003 f9e6 	bl	8005804 <HAL_UART_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800243e:	f7ff fe22 	bl	8002086 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000658 	.word	0x20000658
 800244c:	40013800 	.word	0x40013800

08002450 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002454:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 8002456:	4a15      	ldr	r2, [pc, #84]	@ (80024ac <MX_USART2_UART_Init+0x5c>)
 8002458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 800245c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <MX_USART2_UART_Init+0x58>)
 8002494:	f003 f9b6 	bl	8005804 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800249e:	f7ff fdf2 	bl	8002086 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200006e0 	.word	0x200006e0
 80024ac:	40004400 	.word	0x40004400

080024b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0ae      	sub	sp, #184	@ 0xb8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	2288      	movs	r2, #136	@ 0x88
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 feaf 	bl	8007234 <memset>
  if(uartHandle->Instance==USART1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a43      	ldr	r2, [pc, #268]	@ (80025e8 <HAL_UART_MspInit+0x138>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d13d      	bne.n	800255c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024e4:	2300      	movs	r3, #0
 80024e6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 f987 	bl	8004800 <HAL_RCCEx_PeriphCLKConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024f8:	f7ff fdc5 	bl	8002086 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fc:	4b3b      	ldr	r3, [pc, #236]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 80024fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002500:	4a3a      	ldr	r2, [pc, #232]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 8002502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002506:	6613      	str	r3, [r2, #96]	@ 0x60
 8002508:	4b38      	ldr	r3, [pc, #224]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 800250a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	4b35      	ldr	r3, [pc, #212]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	4a34      	ldr	r2, [pc, #208]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002520:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800252c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002546:	2307      	movs	r3, #7
 8002548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002556:	f000 fa29 	bl	80029ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800255a:	e040      	b.n	80025de <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a23      	ldr	r2, [pc, #140]	@ (80025f0 <HAL_UART_MspInit+0x140>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d13b      	bne.n	80025de <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002566:	2302      	movs	r3, #2
 8002568:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800256a:	2300      	movs	r3, #0
 800256c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4618      	mov	r0, r3
 8002574:	f002 f944 	bl	8004800 <HAL_RCCEx_PeriphCLKConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800257e:	f7ff fd82 	bl	8002086 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002582:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	4a19      	ldr	r2, [pc, #100]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 8002588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258c:	6593      	str	r3, [r2, #88]	@ 0x58
 800258e:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	4a13      	ldr	r2, [pc, #76]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a6:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <HAL_UART_MspInit+0x13c>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025b2:	230c      	movs	r3, #12
 80025b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ca:	2307      	movs	r3, #7
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025d4:	4619      	mov	r1, r3
 80025d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025da:	f000 f9e7 	bl	80029ac <HAL_GPIO_Init>
}
 80025de:	bf00      	nop
 80025e0:	37b8      	adds	r7, #184	@ 0xb8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40004400 	.word	0x40004400

080025f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800262c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025f8:	f7ff fe78 	bl	80022ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025fc:	480c      	ldr	r0, [pc, #48]	@ (8002630 <LoopForever+0x6>)
  ldr r1, =_edata
 80025fe:	490d      	ldr	r1, [pc, #52]	@ (8002634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <LoopForever+0xe>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002604:	e002      	b.n	800260c <LoopCopyDataInit>

08002606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260a:	3304      	adds	r3, #4

0800260c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800260c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002610:	d3f9      	bcc.n	8002606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002614:	4c0a      	ldr	r4, [pc, #40]	@ (8002640 <LoopForever+0x16>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002618:	e001      	b.n	800261e <LoopFillZerobss>

0800261a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800261c:	3204      	adds	r2, #4

0800261e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002620:	d3fb      	bcc.n	800261a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002622:	f004 fe5f 	bl	80072e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002626:	f7ff f9b5 	bl	8001994 <main>

0800262a <LoopForever>:

LoopForever:
    b LoopForever
 800262a:	e7fe      	b.n	800262a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800262c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002638:	0800983c 	.word	0x0800983c
  ldr r2, =_sbss
 800263c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002640:	200008b8 	.word	0x200008b8

08002644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC1_2_IRQHandler>
	...

08002648 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002652:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_Init+0x3c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <HAL_Init+0x3c>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265e:	2003      	movs	r0, #3
 8002660:	f000 f962 	bl	8002928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002664:	2000      	movs	r0, #0
 8002666:	f000 f80f 	bl	8002688 <HAL_InitTick>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	e001      	b.n	800267a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002676:	f7ff fd0d 	bl	8002094 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800267a:	79fb      	ldrb	r3, [r7, #7]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002694:	4b17      	ldr	r3, [pc, #92]	@ (80026f4 <HAL_InitTick+0x6c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d023      	beq.n	80026e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_InitTick+0x70>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <HAL_InitTick+0x6c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f96d 	bl	8002992 <HAL_SYSTICK_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d809      	bhi.n	80026d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f000 f937 	bl	800293e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d0:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <HAL_InitTick+0x74>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e007      	b.n	80026e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e004      	b.n	80026e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e001      	b.n	80026e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000014 	.word	0x20000014
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	20000010 	.word	0x20000010

08002700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_IncTick+0x20>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_IncTick+0x24>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4413      	add	r3, r2
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <HAL_IncTick+0x24>)
 8002712:	6013      	str	r3, [r2, #0]
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000014 	.word	0x20000014
 8002724:	20000768 	.word	0x20000768

08002728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return uwTick;
 800272c:	4b03      	ldr	r3, [pc, #12]	@ (800273c <HAL_GetTick+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000768 	.word	0x20000768

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff ffee 	bl	8002728 <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d005      	beq.n	8002766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800275a:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <HAL_Delay+0x44>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002766:	bf00      	nop
 8002768:	f7ff ffde 	bl	8002728 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8f7      	bhi.n	8002768 <HAL_Delay+0x28>
  {
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000014 	.word	0x20000014

08002788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4907      	ldr	r1, [pc, #28]	@ (8002824 <__NVIC_EnableIRQ+0x38>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	@ (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	@ (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	@ 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
         );
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	@ 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028f4:	d301      	bcc.n	80028fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00f      	b.n	800291a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <SysTick_Config+0x40>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002902:	210f      	movs	r1, #15
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f7ff ff8e 	bl	8002828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	@ (8002924 <SysTick_Config+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <SysTick_Config+0x40>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000e010 	.word	0xe000e010

08002928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ff29 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002950:	f7ff ff3e 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 8002954:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff ff8e 	bl	800287c <NVIC_EncodePriority>
 8002960:	4602      	mov	r2, r0
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff5d 	bl	8002828 <__NVIC_SetPriority>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff31 	bl	80027ec <__NVIC_EnableIRQ>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffa2 	bl	80028e4 <SysTick_Config>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ba:	e17f      	b.n	8002cbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2101      	movs	r1, #1
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8171 	beq.w	8002cb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d005      	beq.n	80029ec <HAL_GPIO_Init+0x40>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d130      	bne.n	8002a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a22:	2201      	movs	r2, #1
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0201 	and.w	r2, r3, #1
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d118      	bne.n	8002a8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a60:	2201      	movs	r2, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	08db      	lsrs	r3, r3, #3
 8002a76:	f003 0201 	and.w	r2, r3, #1
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d017      	beq.n	8002ac8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d123      	bne.n	8002b1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	6939      	ldr	r1, [r7, #16]
 8002b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80ac 	beq.w	8002cb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cdc <HAL_GPIO_Init+0x330>)
 8002b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b62:	4a5e      	ldr	r2, [pc, #376]	@ (8002cdc <HAL_GPIO_Init+0x330>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002cdc <HAL_GPIO_Init+0x330>)
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b76:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce0 <HAL_GPIO_Init+0x334>)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ba0:	d025      	beq.n	8002bee <HAL_GPIO_Init+0x242>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce4 <HAL_GPIO_Init+0x338>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <HAL_GPIO_Init+0x23e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4e      	ldr	r2, [pc, #312]	@ (8002ce8 <HAL_GPIO_Init+0x33c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x23a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cec <HAL_GPIO_Init+0x340>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x236>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf0 <HAL_GPIO_Init+0x344>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x232>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf4 <HAL_GPIO_Init+0x348>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x22e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf8 <HAL_GPIO_Init+0x34c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x22a>
 8002bd2:	2306      	movs	r3, #6
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x244>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c00:	4937      	ldr	r1, [pc, #220]	@ (8002ce0 <HAL_GPIO_Init+0x334>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002cfc <HAL_GPIO_Init+0x350>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c32:	4a32      	ldr	r2, [pc, #200]	@ (8002cfc <HAL_GPIO_Init+0x350>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c38:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <HAL_GPIO_Init+0x350>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c5c:	4a27      	ldr	r2, [pc, #156]	@ (8002cfc <HAL_GPIO_Init+0x350>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c62:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <HAL_GPIO_Init+0x350>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c86:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <HAL_GPIO_Init+0x350>)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <HAL_GPIO_Init+0x350>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb0:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <HAL_GPIO_Init+0x350>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f47f ae78 	bne.w	80029bc <HAL_GPIO_Init+0x10>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	48000800 	.word	0x48000800
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	48001000 	.word	0x48001000
 8002cf4:	48001400 	.word	0x48001400
 8002cf8:	48001800 	.word	0x48001800
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e001      	b.n	8002d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d76:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f91c 	bl	8001fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40010400 	.word	0x40010400

08002d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e08d      	b.n	8002ebe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fc2c 	bl	8001614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	@ 0x24
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002de0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e006      	b.n	8002e18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d108      	bne.n	8002e32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	e007      	b.n	8002e42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69d9      	ldr	r1, [r3, #28]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	817b      	strh	r3, [r7, #10]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	f040 80fd 	bne.w	80030e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2C_Master_Transmit+0x30>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0f6      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x21e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f00:	f7ff fc12 	bl	8002728 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2319      	movs	r3, #25
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 faf6 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0e1      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2221      	movs	r2, #33	@ 0x21
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	893a      	ldrh	r2, [r7, #8]
 8002f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2bff      	cmp	r3, #255	@ 0xff
 8002f52:	d906      	bls.n	8002f62 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	22ff      	movs	r2, #255	@ 0xff
 8002f58:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e007      	b.n	8002f72 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f70:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d024      	beq.n	8002fc4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	781a      	ldrb	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	8979      	ldrh	r1, [r7, #10]
 8002fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80030f0 <HAL_I2C_Master_Transmit+0x228>)
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fcf1 	bl	80039a4 <I2C_TransferConfig>
 8002fc2:	e066      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	8979      	ldrh	r1, [r7, #10]
 8002fcc:	4b48      	ldr	r3, [pc, #288]	@ (80030f0 <HAL_I2C_Master_Transmit+0x228>)
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fce6 	bl	80039a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fd8:	e05b      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fae9 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07b      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d034      	beq.n	8003092 <HAL_I2C_Master_Transmit+0x1ca>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d130      	bne.n	8003092 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	2200      	movs	r2, #0
 8003038:	2180      	movs	r1, #128	@ 0x80
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fa62 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e04d      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	2bff      	cmp	r3, #255	@ 0xff
 8003052:	d90e      	bls.n	8003072 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	22ff      	movs	r2, #255	@ 0xff
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305e:	b2da      	uxtb	r2, r3
 8003060:	8979      	ldrh	r1, [r7, #10]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fc9a 	bl	80039a4 <I2C_TransferConfig>
 8003070:	e00f      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	b2da      	uxtb	r2, r3
 8003082:	8979      	ldrh	r1, [r7, #10]
 8003084:	2300      	movs	r3, #0
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fc89 	bl	80039a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d19e      	bne.n	8002fda <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	6a39      	ldr	r1, [r7, #32]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 facf 	bl	8003644 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e01a      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2220      	movs	r2, #32
 80030b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_I2C_Master_Transmit+0x22c>)
 80030c4:	400b      	ands	r3, r1
 80030c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	80002000 	.word	0x80002000
 80030f4:	fe00e800 	.word	0xfe00e800

080030f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	461a      	mov	r2, r3
 8003104:	460b      	mov	r3, r1
 8003106:	817b      	strh	r3, [r7, #10]
 8003108:	4613      	mov	r3, r2
 800310a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b20      	cmp	r3, #32
 8003116:	f040 80db 	bne.w	80032d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_I2C_Master_Receive+0x30>
 8003124:	2302      	movs	r3, #2
 8003126:	e0d4      	b.n	80032d2 <HAL_I2C_Master_Receive+0x1da>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003130:	f7ff fafa 	bl	8002728 <HAL_GetTick>
 8003134:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2319      	movs	r3, #25
 800313c:	2201      	movs	r2, #1
 800313e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f9de 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0bf      	b.n	80032d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2222      	movs	r2, #34	@ 0x22
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2210      	movs	r2, #16
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	2bff      	cmp	r3, #255	@ 0xff
 8003182:	d90e      	bls.n	80031a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	b2da      	uxtb	r2, r3
 8003190:	8979      	ldrh	r1, [r7, #10]
 8003192:	4b52      	ldr	r3, [pc, #328]	@ (80032dc <HAL_I2C_Master_Receive+0x1e4>)
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fc02 	bl	80039a4 <I2C_TransferConfig>
 80031a0:	e06d      	b.n	800327e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	8979      	ldrh	r1, [r7, #10]
 80031b4:	4b49      	ldr	r3, [pc, #292]	@ (80032dc <HAL_I2C_Master_Receive+0x1e4>)
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fbf1 	bl	80039a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031c2:	e05c      	b.n	800327e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6a39      	ldr	r1, [r7, #32]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fa7f 	bl	80036cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e07c      	b.n	80032d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d034      	beq.n	800327e <HAL_I2C_Master_Receive+0x186>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d130      	bne.n	800327e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	2200      	movs	r2, #0
 8003224:	2180      	movs	r1, #128	@ 0x80
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f96c 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e04d      	b.n	80032d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	2bff      	cmp	r3, #255	@ 0xff
 800323e:	d90e      	bls.n	800325e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	22ff      	movs	r2, #255	@ 0xff
 8003244:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324a:	b2da      	uxtb	r2, r3
 800324c:	8979      	ldrh	r1, [r7, #10]
 800324e:	2300      	movs	r3, #0
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fba4 	bl	80039a4 <I2C_TransferConfig>
 800325c:	e00f      	b.n	800327e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326c:	b2da      	uxtb	r2, r3
 800326e:	8979      	ldrh	r1, [r7, #10]
 8003270:	2300      	movs	r3, #0
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fb93 	bl	80039a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d19d      	bne.n	80031c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	6a39      	ldr	r1, [r7, #32]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f9d9 	bl	8003644 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e01a      	b.n	80032d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2220      	movs	r2, #32
 80032a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <HAL_I2C_Master_Receive+0x1e8>)
 80032b0:	400b      	ands	r3, r1
 80032b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	80002400 	.word	0x80002400
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	@ 0x28
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	460b      	mov	r3, r1
 80032f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b20      	cmp	r3, #32
 8003302:	f040 80d6 	bne.w	80034b2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003314:	d101      	bne.n	800331a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
 8003318:	e0cc      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_I2C_IsDeviceReady+0x44>
 8003324:	2302      	movs	r3, #2
 8003326:	e0c5      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x1d0>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2224      	movs	r2, #36	@ 0x24
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d107      	bne.n	8003356 <HAL_I2C_IsDeviceReady+0x72>
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800334c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003350:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003354:	e006      	b.n	8003364 <HAL_I2C_IsDeviceReady+0x80>
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800335c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003360:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800336a:	f7ff f9dd 	bl	8002728 <HAL_GetTick>
 800336e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800339c:	e034      	b.n	8003408 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d01a      	beq.n	80033dc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7ff f9bf 	bl	8002728 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <HAL_I2C_IsDeviceReady+0xd8>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10f      	bne.n	80033dc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e06b      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003408:	7ffb      	ldrb	r3, [r7, #31]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_I2C_IsDeviceReady+0x130>
 800340e:	7fbb      	ldrb	r3, [r7, #30]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0c4      	beq.n	800339e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b10      	cmp	r3, #16
 8003420:	d01a      	beq.n	8003458 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	2120      	movs	r1, #32
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f869 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e03b      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2220      	movs	r2, #32
 8003442:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e02d      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	2120      	movs	r1, #32
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f84e 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e020      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2210      	movs	r2, #16
 8003478:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2220      	movs	r2, #32
 8003480:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	f63f af56 	bhi.w	800333e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d103      	bne.n	80034da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d007      	beq.n	80034f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	619a      	str	r2, [r3, #24]
  }
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003514:	e03b      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f962 	bl	80037e4 <I2C_IsErrorOccurred>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e041      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d02d      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7ff f8f9 	bl	8002728 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d122      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4013      	ands	r3, r2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	429a      	cmp	r2, r3
 8003564:	d113      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d0b4      	beq.n	8003516 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c2:	e033      	b.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f90b 	bl	80037e4 <I2C_IsErrorOccurred>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e031      	b.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d025      	beq.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7ff f8a2 	bl	8002728 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11a      	bne.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d013      	beq.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e007      	b.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d1c4      	bne.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003650:	e02f      	b.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f8c4 	bl	80037e4 <I2C_IsErrorOccurred>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e02d      	b.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7ff f85f 	bl	8002728 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11a      	bne.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b20      	cmp	r3, #32
 8003688:	d013      	beq.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e007      	b.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d1c8      	bne.n	8003652 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036dc:	e071      	b.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f87e 	bl	80037e4 <I2C_IsErrorOccurred>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d13b      	bne.n	8003778 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d138      	bne.n	8003778 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d105      	bne.n	8003720 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b10      	cmp	r3, #16
 800372c:	d121      	bne.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2210      	movs	r2, #16
 8003734:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2204      	movs	r2, #4
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2220      	movs	r2, #32
 8003742:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003750:	400b      	ands	r3, r1
 8003752:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
 8003770:	e002      	b.n	8003778 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003778:	f7fe ffd6 	bl	8002728 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d119      	bne.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d116      	bne.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d00f      	beq.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d002      	beq.n	80037d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d083      	beq.n	80036de <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	@ 0x28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d068      	beq.n	80038e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2210      	movs	r2, #16
 8003816:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003818:	e049      	b.n	80038ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d045      	beq.n	80038ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe ff81 	bl	8002728 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_IsErrorOccurred+0x54>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d13a      	bne.n	80038ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003842:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800384a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385a:	d121      	bne.n	80038a0 <I2C_IsErrorOccurred+0xbc>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003862:	d01d      	beq.n	80038a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b20      	cmp	r3, #32
 8003868:	d01a      	beq.n	80038a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003878:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800387a:	f7fe ff55 	bl	8002728 <HAL_GetTick>
 800387e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003880:	e00e      	b.n	80038a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003882:	f7fe ff51 	bl	8002728 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b19      	cmp	r3, #25
 800388e:	d907      	bls.n	80038a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	f043 0320 	orr.w	r3, r3, #32
 8003896:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800389e:	e006      	b.n	80038ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d1e9      	bne.n	8003882 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d003      	beq.n	80038c4 <I2C_IsErrorOccurred+0xe0>
 80038bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0aa      	beq.n	800381a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2220      	movs	r2, #32
 80038d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003904:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f043 0308 	orr.w	r3, r3, #8
 800391c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003926:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	f043 0302 	orr.w	r3, r3, #2
 800393e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01c      	beq.n	8003992 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff fdaf 	bl	80034bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <I2C_IsErrorOccurred+0x1bc>)
 800396a:	400b      	ands	r3, r1
 800396c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	431a      	orrs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003996:	4618      	mov	r0, r3
 8003998:	3728      	adds	r7, #40	@ 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	fe00e800 	.word	0xfe00e800

080039a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	4613      	mov	r3, r2
 80039b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039b6:	897b      	ldrh	r3, [r7, #10]
 80039b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039bc:	7a7b      	ldrb	r3, [r7, #9]
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	0d5b      	lsrs	r3, r3, #21
 80039de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039e2:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <I2C_TransferConfig+0x60>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	43db      	mvns	r3, r3
 80039e8:	ea02 0103 	and.w	r1, r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	03ff63ff 	.word	0x03ff63ff

08003a08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d138      	bne.n	8003a90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e032      	b.n	8003a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	@ 0x24
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d139      	bne.n	8003b28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e033      	b.n	8003b2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2224      	movs	r2, #36	@ 0x24
 8003ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003af0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b3c:	4b04      	ldr	r3, [pc, #16]	@ (8003b50 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40007000 	.word	0x40007000

08003b54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b62:	d130      	bne.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b64:	4b23      	ldr	r3, [pc, #140]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b70:	d038      	beq.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b72:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2232      	movs	r2, #50	@ 0x32
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b98:	e002      	b.n	8003ba0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba0:	4b14      	ldr	r3, [pc, #80]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bac:	d102      	bne.n	8003bb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f2      	bne.n	8003b9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc0:	d110      	bne.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e00f      	b.n	8003be6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd2:	d007      	beq.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bd4:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bdc:	4a05      	ldr	r2, [pc, #20]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003be2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	431bde83 	.word	0x431bde83

08003c00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e3ca      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c12:	4b97      	ldr	r3, [pc, #604]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c1c:	4b94      	ldr	r3, [pc, #592]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80e4 	beq.w	8003dfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <HAL_RCC_OscConfig+0x4a>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	f040 808b 	bne.w	8003d58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f040 8087 	bne.w	8003d58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c4a:	4b89      	ldr	r3, [pc, #548]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RCC_OscConfig+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e3a2      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	4b82      	ldr	r3, [pc, #520]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_RCC_OscConfig+0x7c>
 8003c72:	4b7f      	ldr	r3, [pc, #508]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c7a:	e005      	b.n	8003c88 <HAL_RCC_OscConfig+0x88>
 8003c7c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d223      	bcs.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fd55 	bl	8004740 <RCC_SetFlashLatencyFromMSIRange>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e383      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca0:	4b73      	ldr	r3, [pc, #460]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a72      	ldr	r2, [pc, #456]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	f043 0308 	orr.w	r3, r3, #8
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b70      	ldr	r3, [pc, #448]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	496d      	ldr	r1, [pc, #436]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	4968      	ldr	r1, [pc, #416]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
 8003cd2:	e025      	b.n	8003d20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd4:	4b66      	ldr	r3, [pc, #408]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a65      	ldr	r2, [pc, #404]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003cda:	f043 0308 	orr.w	r3, r3, #8
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b63      	ldr	r3, [pc, #396]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	4960      	ldr	r1, [pc, #384]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	495b      	ldr	r1, [pc, #364]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fd15 	bl	8004740 <RCC_SetFlashLatencyFromMSIRange>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e343      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d20:	f000 fc4a 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b52      	ldr	r3, [pc, #328]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	4950      	ldr	r1, [pc, #320]	@ (8003e74 <HAL_RCC_OscConfig+0x274>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	4a4e      	ldr	r2, [pc, #312]	@ (8003e78 <HAL_RCC_OscConfig+0x278>)
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d40:	4b4e      	ldr	r3, [pc, #312]	@ (8003e7c <HAL_RCC_OscConfig+0x27c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe fc9f 	bl	8002688 <HAL_InitTick>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d052      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	e327      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d032      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d60:	4b43      	ldr	r3, [pc, #268]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a42      	ldr	r2, [pc, #264]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fcdc 	bl	8002728 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d74:	f7fe fcd8 	bl	8002728 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e310      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d86:	4b3a      	ldr	r3, [pc, #232]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d92:	4b37      	ldr	r3, [pc, #220]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a36      	ldr	r2, [pc, #216]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d98:	f043 0308 	orr.w	r3, r3, #8
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b34      	ldr	r3, [pc, #208]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4931      	ldr	r1, [pc, #196]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db0:	4b2f      	ldr	r3, [pc, #188]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	492c      	ldr	r1, [pc, #176]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
 8003dc4:	e01a      	b.n	8003dfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a29      	ldr	r2, [pc, #164]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dd2:	f7fe fca9 	bl	8002728 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dda:	f7fe fca5 	bl	8002728 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e2dd      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dec:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCC_OscConfig+0x1da>
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d074      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d005      	beq.n	8003e1a <HAL_RCC_OscConfig+0x21a>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d10e      	bne.n	8003e32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d10b      	bne.n	8003e32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1a:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d064      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2f0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d160      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e2ba      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCC_OscConfig+0x24a>
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0b      	ldr	r2, [pc, #44]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e026      	b.n	8003e98 <HAL_RCC_OscConfig+0x298>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e52:	d115      	bne.n	8003e80 <HAL_RCC_OscConfig+0x280>
 8003e54:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a05      	ldr	r2, [pc, #20]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	4b03      	ldr	r3, [pc, #12]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a02      	ldr	r2, [pc, #8]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	e014      	b.n	8003e98 <HAL_RCC_OscConfig+0x298>
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000
 8003e74:	08009470 	.word	0x08009470
 8003e78:	2000000c 	.word	0x2000000c
 8003e7c:	20000010 	.word	0x20000010
 8003e80:	4ba0      	ldr	r3, [pc, #640]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a9f      	ldr	r2, [pc, #636]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b9d      	ldr	r3, [pc, #628]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a9c      	ldr	r2, [pc, #624]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fc42 	bl	8002728 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fe fc3e 	bl	8002728 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	@ 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e276      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eba:	4b92      	ldr	r3, [pc, #584]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x2a8>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fc2e 	bl	8002728 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fe fc2a 	bl	8002728 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	@ 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e262      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee2:	4b88      	ldr	r3, [pc, #544]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x2d0>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d060      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_OscConfig+0x310>
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d119      	bne.n	8003f3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d116      	bne.n	8003f3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f10:	4b7c      	ldr	r3, [pc, #496]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_OscConfig+0x328>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e23f      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b76      	ldr	r3, [pc, #472]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	4973      	ldr	r1, [pc, #460]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f3c:	e040      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d023      	beq.n	8003f8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f46:	4b6f      	ldr	r3, [pc, #444]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe fbe9 	bl	8002728 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fbe5 	bl	8002728 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e21d      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f6c:	4b65      	ldr	r3, [pc, #404]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b62      	ldr	r3, [pc, #392]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	495f      	ldr	r1, [pc, #380]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	e018      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a5c      	ldr	r2, [pc, #368]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fe fbc5 	bl	8002728 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa2:	f7fe fbc1 	bl	8002728 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e1f9      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb4:	4b53      	ldr	r3, [pc, #332]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d03c      	beq.n	8004046 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01c      	beq.n	800400e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fda:	4a4a      	ldr	r2, [pc, #296]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fe fba0 	bl	8002728 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fec:	f7fe fb9c 	bl	8002728 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1d4      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ffe:	4b41      	ldr	r3, [pc, #260]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8004000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ef      	beq.n	8003fec <HAL_RCC_OscConfig+0x3ec>
 800400c:	e01b      	b.n	8004046 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400e:	4b3d      	ldr	r3, [pc, #244]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004014:	4a3b      	ldr	r2, [pc, #236]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401e:	f7fe fb83 	bl	8002728 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004026:	f7fe fb7f 	bl	8002728 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e1b7      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004038:	4b32      	ldr	r3, [pc, #200]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 800403a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1ef      	bne.n	8004026 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80a6 	beq.w	80041a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004054:	2300      	movs	r3, #0
 8004056:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004058:	4b2a      	ldr	r3, [pc, #168]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004064:	4b27      	ldr	r3, [pc, #156]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004068:	4a26      	ldr	r2, [pc, #152]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 800406a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800406e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004070:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407c:	2301      	movs	r3, #1
 800407e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004080:	4b21      	ldr	r3, [pc, #132]	@ (8004108 <HAL_RCC_OscConfig+0x508>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d118      	bne.n	80040be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800408c:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <HAL_RCC_OscConfig+0x508>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <HAL_RCC_OscConfig+0x508>)
 8004092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004098:	f7fe fb46 	bl	8002728 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7fe fb42 	bl	8002728 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e17a      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <HAL_RCC_OscConfig+0x508>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d108      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4d8>
 80040c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040d6:	e029      	b.n	800412c <HAL_RCC_OscConfig+0x52c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d115      	bne.n	800410c <HAL_RCC_OscConfig+0x50c>
 80040e0:	4b08      	ldr	r3, [pc, #32]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e6:	4a07      	ldr	r2, [pc, #28]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040f0:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	4a03      	ldr	r2, [pc, #12]	@ (8004104 <HAL_RCC_OscConfig+0x504>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004100:	e014      	b.n	800412c <HAL_RCC_OscConfig+0x52c>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
 800410c:	4b9c      	ldr	r3, [pc, #624]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004112:	4a9b      	ldr	r2, [pc, #620]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800411c:	4b98      	ldr	r3, [pc, #608]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	4a97      	ldr	r2, [pc, #604]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004124:	f023 0304 	bic.w	r3, r3, #4
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d016      	beq.n	8004162 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fe faf8 	bl	8002728 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fe faf4 	bl	8002728 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e12a      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004152:	4b8b      	ldr	r3, [pc, #556]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ed      	beq.n	800413c <HAL_RCC_OscConfig+0x53c>
 8004160:	e015      	b.n	800418e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004162:	f7fe fae1 	bl	8002728 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fe fadd 	bl	8002728 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e113      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004180:	4b7f      	ldr	r3, [pc, #508]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ed      	bne.n	800416a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800418e:	7ffb      	ldrb	r3, [r7, #31]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004194:	4b7a      	ldr	r3, [pc, #488]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004198:	4a79      	ldr	r2, [pc, #484]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80fe 	beq.w	80043a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	f040 80d0 	bne.w	8004354 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041b4:	4b72      	ldr	r3, [pc, #456]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f003 0203 	and.w	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d130      	bne.n	800422a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	3b01      	subs	r3, #1
 80041d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d127      	bne.n	800422a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d11f      	bne.n	800422a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041f4:	2a07      	cmp	r2, #7
 80041f6:	bf14      	ite	ne
 80041f8:	2201      	movne	r2, #1
 80041fa:	2200      	moveq	r2, #0
 80041fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fe:	4293      	cmp	r3, r2
 8004200:	d113      	bne.n	800422a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	3b01      	subs	r3, #1
 8004210:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d109      	bne.n	800422a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	3b01      	subs	r3, #1
 8004224:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d06e      	beq.n	8004308 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	d069      	beq.n	8004304 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004230:	4b53      	ldr	r3, [pc, #332]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800423c:	4b50      	ldr	r3, [pc, #320]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0ad      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800424c:	4b4c      	ldr	r3, [pc, #304]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a4b      	ldr	r2, [pc, #300]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004252:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004256:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004258:	f7fe fa66 	bl	8002728 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004260:	f7fe fa62 	bl	8002728 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e09a      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004272:	4b43      	ldr	r3, [pc, #268]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800427e:	4b40      	ldr	r3, [pc, #256]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	4b40      	ldr	r3, [pc, #256]	@ (8004384 <HAL_RCC_OscConfig+0x784>)
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800428e:	3a01      	subs	r2, #1
 8004290:	0112      	lsls	r2, r2, #4
 8004292:	4311      	orrs	r1, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004298:	0212      	lsls	r2, r2, #8
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042a0:	0852      	lsrs	r2, r2, #1
 80042a2:	3a01      	subs	r2, #1
 80042a4:	0552      	lsls	r2, r2, #21
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042ac:	0852      	lsrs	r2, r2, #1
 80042ae:	3a01      	subs	r2, #1
 80042b0:	0652      	lsls	r2, r2, #25
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042b8:	0912      	lsrs	r2, r2, #4
 80042ba:	0452      	lsls	r2, r2, #17
 80042bc:	430a      	orrs	r2, r1
 80042be:	4930      	ldr	r1, [pc, #192]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 80042ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042dc:	f7fe fa24 	bl	8002728 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe fa20 	bl	8002728 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e058      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f6:	4b22      	ldr	r3, [pc, #136]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004302:	e050      	b.n	80043a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e04f      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004308:	4b1d      	ldr	r3, [pc, #116]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d148      	bne.n	80043a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004314:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a19      	ldr	r2, [pc, #100]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 800431a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800431e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004320:	4b17      	ldr	r3, [pc, #92]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a16      	ldr	r2, [pc, #88]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800432a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800432c:	f7fe f9fc 	bl	8002728 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004334:	f7fe f9f8 	bl	8002728 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e030      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004346:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0x734>
 8004352:	e028      	b.n	80043a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d023      	beq.n	80043a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a08      	ldr	r2, [pc, #32]	@ (8004380 <HAL_RCC_OscConfig+0x780>)
 8004360:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fe f9df 	bl	8002728 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436c:	e00c      	b.n	8004388 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436e:	f7fe f9db 	bl	8002728 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d905      	bls.n	8004388 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e013      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
 8004380:	40021000 	.word	0x40021000
 8004384:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004388:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCC_OscConfig+0x7b0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ec      	bne.n	800436e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004394:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <HAL_RCC_OscConfig+0x7b0>)
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	4905      	ldr	r1, [pc, #20]	@ (80043b0 <HAL_RCC_OscConfig+0x7b0>)
 800439a:	4b06      	ldr	r3, [pc, #24]	@ (80043b4 <HAL_RCC_OscConfig+0x7b4>)
 800439c:	4013      	ands	r3, r2
 800439e:	60cb      	str	r3, [r1, #12]
 80043a0:	e001      	b.n	80043a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40021000 	.word	0x40021000
 80043b4:	feeefffc 	.word	0xfeeefffc

080043b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0e7      	b.n	800459c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b75      	ldr	r3, [pc, #468]	@ (80045a4 <HAL_RCC_ClockConfig+0x1ec>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d910      	bls.n	80043fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b72      	ldr	r3, [pc, #456]	@ (80045a4 <HAL_RCC_ClockConfig+0x1ec>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 0207 	bic.w	r2, r3, #7
 80043e2:	4970      	ldr	r1, [pc, #448]	@ (80045a4 <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b6e      	ldr	r3, [pc, #440]	@ (80045a4 <HAL_RCC_ClockConfig+0x1ec>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0cf      	b.n	800459c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d010      	beq.n	800442a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	4b66      	ldr	r3, [pc, #408]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004414:	429a      	cmp	r2, r3
 8004416:	d908      	bls.n	800442a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004418:	4b63      	ldr	r3, [pc, #396]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4960      	ldr	r1, [pc, #384]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d04c      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b03      	cmp	r3, #3
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443e:	4b5a      	ldr	r3, [pc, #360]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d121      	bne.n	800448e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e0a6      	b.n	800459c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004456:	4b54      	ldr	r3, [pc, #336]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d115      	bne.n	800448e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e09a      	b.n	800459c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800446e:	4b4e      	ldr	r3, [pc, #312]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e08e      	b.n	800459c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447e:	4b4a      	ldr	r3, [pc, #296]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e086      	b.n	800459c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4b46      	ldr	r3, [pc, #280]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4943      	ldr	r1, [pc, #268]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 800449c:	4313      	orrs	r3, r2
 800449e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a0:	f7fe f942 	bl	8002728 <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7fe f93e 	bl	8002728 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e06e      	b.n	800459c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b3a      	ldr	r3, [pc, #232]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 020c 	and.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1eb      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	4b31      	ldr	r3, [pc, #196]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d208      	bcs.n	80044fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b2e      	ldr	r3, [pc, #184]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	492b      	ldr	r1, [pc, #172]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044fe:	4b29      	ldr	r3, [pc, #164]	@ (80045a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d210      	bcs.n	800452e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450c:	4b25      	ldr	r3, [pc, #148]	@ (80045a4 <HAL_RCC_ClockConfig+0x1ec>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 0207 	bic.w	r2, r3, #7
 8004514:	4923      	ldr	r1, [pc, #140]	@ (80045a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451c:	4b21      	ldr	r3, [pc, #132]	@ (80045a4 <HAL_RCC_ClockConfig+0x1ec>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d001      	beq.n	800452e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e036      	b.n	800459c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800453a:	4b1b      	ldr	r3, [pc, #108]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	4918      	ldr	r1, [pc, #96]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004558:	4b13      	ldr	r3, [pc, #76]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4910      	ldr	r1, [pc, #64]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004568:	4313      	orrs	r3, r2
 800456a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800456c:	f000 f824 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	490b      	ldr	r1, [pc, #44]	@ (80045ac <HAL_RCC_ClockConfig+0x1f4>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
 8004588:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 800458a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800458c:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_RCC_ClockConfig+0x1fc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe f879 	bl	8002688 <HAL_InitTick>
 8004596:	4603      	mov	r3, r0
 8004598:	72fb      	strb	r3, [r7, #11]

  return status;
 800459a:	7afb      	ldrb	r3, [r7, #11]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40022000 	.word	0x40022000
 80045a8:	40021000 	.word	0x40021000
 80045ac:	08009470 	.word	0x08009470
 80045b0:	2000000c 	.word	0x2000000c
 80045b4:	20000010 	.word	0x20000010

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	@ 0x24
 80045bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045c6:	4b3e      	ldr	r3, [pc, #248]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d0:	4b3b      	ldr	r3, [pc, #236]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x34>
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d121      	bne.n	800462a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d11e      	bne.n	800462a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045ec:	4b34      	ldr	r3, [pc, #208]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045f8:	4b31      	ldr	r3, [pc, #196]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e005      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004608:	4b2d      	ldr	r3, [pc, #180]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004614:	4a2b      	ldr	r2, [pc, #172]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10d      	bne.n	8004640 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004628:	e00a      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d102      	bne.n	8004636 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004630:	4b25      	ldr	r3, [pc, #148]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	e004      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d101      	bne.n	8004640 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800463c:	4b23      	ldr	r3, [pc, #140]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x114>)
 800463e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d134      	bne.n	80046b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004646:	4b1e      	ldr	r3, [pc, #120]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d003      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0xa6>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d003      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0xac>
 800465c:	e005      	b.n	800466a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800465e:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004660:	617b      	str	r3, [r7, #20]
      break;
 8004662:	e005      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004664:	4b19      	ldr	r3, [pc, #100]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004666:	617b      	str	r3, [r7, #20]
      break;
 8004668:	e002      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	617b      	str	r3, [r7, #20]
      break;
 800466e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004670:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	3301      	adds	r3, #1
 800467c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800467e:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	fb03 f202 	mul.w	r2, r3, r2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004696:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	0e5b      	lsrs	r3, r3, #25
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	3301      	adds	r3, #1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046b0:	69bb      	ldr	r3, [r7, #24]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3724      	adds	r7, #36	@ 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08009488 	.word	0x08009488
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	007a1200 	.word	0x007a1200

080046d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000000c 	.word	0x2000000c

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4904      	ldr	r1, [pc, #16]	@ (8004710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	08009480 	.word	0x08009480

08004714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004718:	f7ff ffda 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	0adb      	lsrs	r3, r3, #11
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4904      	ldr	r1, [pc, #16]	@ (800473c <HAL_RCC_GetPCLK2Freq+0x28>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000
 800473c:	08009480 	.word	0x08009480

08004740 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800474c:	4b2a      	ldr	r3, [pc, #168]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004758:	f7ff f9ee 	bl	8003b38 <HAL_PWREx_GetVoltageRange>
 800475c:	6178      	str	r0, [r7, #20]
 800475e:	e014      	b.n	800478a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004760:	4b25      	ldr	r3, [pc, #148]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	4a24      	ldr	r2, [pc, #144]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476a:	6593      	str	r3, [r2, #88]	@ 0x58
 800476c:	4b22      	ldr	r3, [pc, #136]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004778:	f7ff f9de 	bl	8003b38 <HAL_PWREx_GetVoltageRange>
 800477c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b1e      	ldr	r3, [pc, #120]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	4a1d      	ldr	r2, [pc, #116]	@ (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004788:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004790:	d10b      	bne.n	80047aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b80      	cmp	r3, #128	@ 0x80
 8004796:	d919      	bls.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2ba0      	cmp	r3, #160	@ 0xa0
 800479c:	d902      	bls.n	80047a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800479e:	2302      	movs	r3, #2
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e013      	b.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047a4:	2301      	movs	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e010      	b.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b80      	cmp	r3, #128	@ 0x80
 80047ae:	d902      	bls.n	80047b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047b0:	2303      	movs	r3, #3
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	e00a      	b.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b80      	cmp	r3, #128	@ 0x80
 80047ba:	d102      	bne.n	80047c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047bc:	2302      	movs	r3, #2
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	e004      	b.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b70      	cmp	r3, #112	@ 0x70
 80047c6:	d101      	bne.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047c8:	2301      	movs	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f023 0207 	bic.w	r2, r3, #7
 80047d4:	4909      	ldr	r1, [pc, #36]	@ (80047fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d001      	beq.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40022000 	.word	0x40022000

08004800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004808:	2300      	movs	r3, #0
 800480a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800480c:	2300      	movs	r3, #0
 800480e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004818:	2b00      	cmp	r3, #0
 800481a:	d041      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004820:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004824:	d02a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004826:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800482a:	d824      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800482c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004830:	d008      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004832:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004836:	d81e      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800483c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004840:	d010      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004842:	e018      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004844:	4b86      	ldr	r3, [pc, #536]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a85      	ldr	r2, [pc, #532]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800484e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004850:	e015      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fabb 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004862:	e00c      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3320      	adds	r3, #32
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fba6 	bl	8004fbc <RCCEx_PLLSAI2_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004874:	e003      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	74fb      	strb	r3, [r7, #19]
      break;
 800487a:	e000      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800487c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10b      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004884:	4b76      	ldr	r3, [pc, #472]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004892:	4973      	ldr	r1, [pc, #460]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800489a:	e001      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d041      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048b4:	d02a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048ba:	d824      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048c0:	d008      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048c6:	d81e      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048d0:	d010      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048d2:	e018      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048d4:	4b62      	ldr	r3, [pc, #392]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4a61      	ldr	r2, [pc, #388]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e0:	e015      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fa73 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048f2:	e00c      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3320      	adds	r3, #32
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb5e 	bl	8004fbc <RCCEx_PLLSAI2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	74fb      	strb	r3, [r7, #19]
      break;
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800490c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004914:	4b52      	ldr	r3, [pc, #328]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004922:	494f      	ldr	r1, [pc, #316]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800492a:	e001      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80a0 	beq.w	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004942:	4b47      	ldr	r3, [pc, #284]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004958:	4b41      	ldr	r3, [pc, #260]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	4a40      	ldr	r2, [pc, #256]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004962:	6593      	str	r3, [r2, #88]	@ 0x58
 8004964:	4b3e      	ldr	r3, [pc, #248]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004970:	2301      	movs	r3, #1
 8004972:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004974:	4b3b      	ldr	r3, [pc, #236]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3a      	ldr	r2, [pc, #232]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800497a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800497e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004980:	f7fd fed2 	bl	8002728 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004986:	e009      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004988:	f7fd fece 	bl	8002728 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d902      	bls.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	74fb      	strb	r3, [r7, #19]
        break;
 800499a:	e005      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800499c:	4b31      	ldr	r3, [pc, #196]	@ (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ef      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d15c      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01f      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d019      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049cc:	4b24      	ldr	r3, [pc, #144]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d8:	4b21      	ldr	r3, [pc, #132]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	4a20      	ldr	r2, [pc, #128]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f8:	4a19      	ldr	r2, [pc, #100]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fd fe8d 	bl	8002728 <HAL_GetTick>
 8004a0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a10:	e00b      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a12:	f7fd fe89 	bl	8002728 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d902      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	74fb      	strb	r3, [r7, #19]
            break;
 8004a28:	e006      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ec      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3e:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a4e:	4904      	ldr	r1, [pc, #16]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a56:	e009      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	74bb      	strb	r3, [r7, #18]
 8004a5c:	e006      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7cfb      	ldrb	r3, [r7, #19]
 8004a6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a6c:	7c7b      	ldrb	r3, [r7, #17]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d105      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a72:	4b9e      	ldr	r3, [pc, #632]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a76:	4a9d      	ldr	r2, [pc, #628]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a8a:	4b98      	ldr	r3, [pc, #608]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a90:	f023 0203 	bic.w	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	4994      	ldr	r1, [pc, #592]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aac:	4b8f      	ldr	r3, [pc, #572]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab2:	f023 020c 	bic.w	r2, r3, #12
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aba:	498c      	ldr	r1, [pc, #560]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ace:	4b87      	ldr	r3, [pc, #540]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	4983      	ldr	r1, [pc, #524]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004af0:	4b7e      	ldr	r3, [pc, #504]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afe:	497b      	ldr	r1, [pc, #492]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b12:	4b76      	ldr	r3, [pc, #472]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b20:	4972      	ldr	r1, [pc, #456]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b34:	4b6d      	ldr	r3, [pc, #436]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b42:	496a      	ldr	r1, [pc, #424]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b56:	4b65      	ldr	r3, [pc, #404]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b64:	4961      	ldr	r1, [pc, #388]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b78:	4b5c      	ldr	r3, [pc, #368]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b86:	4959      	ldr	r1, [pc, #356]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b9a:	4b54      	ldr	r3, [pc, #336]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba8:	4950      	ldr	r1, [pc, #320]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bca:	4948      	ldr	r1, [pc, #288]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bde:	4b43      	ldr	r3, [pc, #268]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	493f      	ldr	r1, [pc, #252]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d028      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c00:	4b3a      	ldr	r3, [pc, #232]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c0e:	4937      	ldr	r1, [pc, #220]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c20:	4b32      	ldr	r3, [pc, #200]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a31      	ldr	r2, [pc, #196]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c2a:	60d3      	str	r3, [r2, #12]
 8004c2c:	e011      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f8c8 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d028      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c5e:	4b23      	ldr	r3, [pc, #140]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	491f      	ldr	r1, [pc, #124]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c7c:	d106      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	4a1a      	ldr	r2, [pc, #104]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c88:	60d3      	str	r3, [r2, #12]
 8004c8a:	e011      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f899 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d02b      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cca:	4908      	ldr	r1, [pc, #32]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cda:	d109      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cdc:	4b03      	ldr	r3, [pc, #12]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a02      	ldr	r2, [pc, #8]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ce6:	60d3      	str	r3, [r2, #12]
 8004ce8:	e014      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f867 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02f      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d20:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d2e:	4928      	ldr	r1, [pc, #160]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d3e:	d10d      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	2102      	movs	r1, #2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f844 	bl	8004dd4 <RCCEx_PLLSAI1_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d014      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	74bb      	strb	r3, [r7, #18]
 8004d5a:	e011      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d64:	d10c      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3320      	adds	r3, #32
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f925 	bl	8004fbc <RCCEx_PLLSAI2_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d76:	7cfb      	ldrb	r3, [r7, #19]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d8c:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9a:	490d      	ldr	r1, [pc, #52]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dae:	4b08      	ldr	r3, [pc, #32]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dbe:	4904      	ldr	r1, [pc, #16]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000

08004dd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004de2:	4b75      	ldr	r3, [pc, #468]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d018      	beq.n	8004e20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dee:	4b72      	ldr	r3, [pc, #456]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0203 	and.w	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d10d      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
       ||
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e06:	4b6c      	ldr	r3, [pc, #432]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
       ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d047      	beq.n	8004eaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
 8004e1e:	e044      	b.n	8004eaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d018      	beq.n	8004e5a <RCCEx_PLLSAI1_Config+0x86>
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d825      	bhi.n	8004e78 <RCCEx_PLLSAI1_Config+0xa4>
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d002      	beq.n	8004e36 <RCCEx_PLLSAI1_Config+0x62>
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d009      	beq.n	8004e48 <RCCEx_PLLSAI1_Config+0x74>
 8004e34:	e020      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e36:	4b60      	ldr	r3, [pc, #384]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d11d      	bne.n	8004e7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e46:	e01a      	b.n	8004e7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e48:	4b5b      	ldr	r3, [pc, #364]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d116      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e58:	e013      	b.n	8004e82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e5a:	4b57      	ldr	r3, [pc, #348]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e66:	4b54      	ldr	r3, [pc, #336]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e76:	e006      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7c:	e004      	b.n	8004e88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e002      	b.n	8004e88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	4944      	ldr	r1, [pc, #272]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d17d      	bne.n	8004fac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eb0:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a40      	ldr	r2, [pc, #256]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebc:	f7fd fc34 	bl	8002728 <HAL_GetTick>
 8004ec0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ec2:	e009      	b.n	8004ed8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ec4:	f7fd fc30 	bl	8002728 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d902      	bls.n	8004ed8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ed6:	e005      	b.n	8004ee4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ed8:	4b37      	ldr	r3, [pc, #220]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ef      	bne.n	8004ec4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d160      	bne.n	8004fac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d111      	bne.n	8004f14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef0:	4b31      	ldr	r3, [pc, #196]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6892      	ldr	r2, [r2, #8]
 8004f00:	0211      	lsls	r1, r2, #8
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68d2      	ldr	r2, [r2, #12]
 8004f06:	0912      	lsrs	r2, r2, #4
 8004f08:	0452      	lsls	r2, r2, #17
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	492a      	ldr	r1, [pc, #168]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	610b      	str	r3, [r1, #16]
 8004f12:	e027      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d112      	bne.n	8004f40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f1a:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6892      	ldr	r2, [r2, #8]
 8004f2a:	0211      	lsls	r1, r2, #8
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6912      	ldr	r2, [r2, #16]
 8004f30:	0852      	lsrs	r2, r2, #1
 8004f32:	3a01      	subs	r2, #1
 8004f34:	0552      	lsls	r2, r2, #21
 8004f36:	430a      	orrs	r2, r1
 8004f38:	491f      	ldr	r1, [pc, #124]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	610b      	str	r3, [r1, #16]
 8004f3e:	e011      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f40:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6892      	ldr	r2, [r2, #8]
 8004f50:	0211      	lsls	r1, r2, #8
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6952      	ldr	r2, [r2, #20]
 8004f56:	0852      	lsrs	r2, r2, #1
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0652      	lsls	r2, r2, #25
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	4916      	ldr	r1, [pc, #88]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f64:	4b14      	ldr	r3, [pc, #80]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a13      	ldr	r2, [pc, #76]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fd fbda 	bl	8002728 <HAL_GetTick>
 8004f74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f76:	e009      	b.n	8004f8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f78:	f7fd fbd6 	bl	8002728 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d902      	bls.n	8004f8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	73fb      	strb	r3, [r7, #15]
          break;
 8004f8a:	e005      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ef      	beq.n	8004f78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	4904      	ldr	r1, [pc, #16]	@ (8004fb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000

08004fbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fca:	4b6a      	ldr	r3, [pc, #424]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d018      	beq.n	8005008 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fd6:	4b67      	ldr	r3, [pc, #412]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0203 	and.w	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d10d      	bne.n	8005002 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fee:	4b61      	ldr	r3, [pc, #388]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d047      	beq.n	8005092 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	e044      	b.n	8005092 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d018      	beq.n	8005042 <RCCEx_PLLSAI2_Config+0x86>
 8005010:	2b03      	cmp	r3, #3
 8005012:	d825      	bhi.n	8005060 <RCCEx_PLLSAI2_Config+0xa4>
 8005014:	2b01      	cmp	r3, #1
 8005016:	d002      	beq.n	800501e <RCCEx_PLLSAI2_Config+0x62>
 8005018:	2b02      	cmp	r3, #2
 800501a:	d009      	beq.n	8005030 <RCCEx_PLLSAI2_Config+0x74>
 800501c:	e020      	b.n	8005060 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800501e:	4b55      	ldr	r3, [pc, #340]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11d      	bne.n	8005066 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502e:	e01a      	b.n	8005066 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005030:	4b50      	ldr	r3, [pc, #320]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d116      	bne.n	800506a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005040:	e013      	b.n	800506a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005042:	4b4c      	ldr	r3, [pc, #304]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800504e:	4b49      	ldr	r3, [pc, #292]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800505e:	e006      	b.n	800506e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e004      	b.n	8005070 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005066:	bf00      	nop
 8005068:	e002      	b.n	8005070 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800506a:	bf00      	nop
 800506c:	e000      	b.n	8005070 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800506e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10d      	bne.n	8005092 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005076:	4b3f      	ldr	r3, [pc, #252]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6819      	ldr	r1, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	3b01      	subs	r3, #1
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	430b      	orrs	r3, r1
 800508c:	4939      	ldr	r1, [pc, #228]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508e:	4313      	orrs	r3, r2
 8005090:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d167      	bne.n	8005168 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005098:	4b36      	ldr	r3, [pc, #216]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a35      	ldr	r2, [pc, #212]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a4:	f7fd fb40 	bl	8002728 <HAL_GetTick>
 80050a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050aa:	e009      	b.n	80050c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050ac:	f7fd fb3c 	bl	8002728 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d902      	bls.n	80050c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	73fb      	strb	r3, [r7, #15]
        break;
 80050be:	e005      	b.n	80050cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1ef      	bne.n	80050ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d14a      	bne.n	8005168 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d111      	bne.n	80050fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050d8:	4b26      	ldr	r3, [pc, #152]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80050e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	0211      	lsls	r1, r2, #8
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68d2      	ldr	r2, [r2, #12]
 80050ee:	0912      	lsrs	r2, r2, #4
 80050f0:	0452      	lsls	r2, r2, #17
 80050f2:	430a      	orrs	r2, r1
 80050f4:	491f      	ldr	r1, [pc, #124]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	614b      	str	r3, [r1, #20]
 80050fa:	e011      	b.n	8005120 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005104:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6892      	ldr	r2, [r2, #8]
 800510c:	0211      	lsls	r1, r2, #8
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6912      	ldr	r2, [r2, #16]
 8005112:	0852      	lsrs	r2, r2, #1
 8005114:	3a01      	subs	r2, #1
 8005116:	0652      	lsls	r2, r2, #25
 8005118:	430a      	orrs	r2, r1
 800511a:	4916      	ldr	r1, [pc, #88]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800511c:	4313      	orrs	r3, r2
 800511e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005120:	4b14      	ldr	r3, [pc, #80]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fd fafc 	bl	8002728 <HAL_GetTick>
 8005130:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005132:	e009      	b.n	8005148 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005134:	f7fd faf8 	bl	8002728 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d902      	bls.n	8005148 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	73fb      	strb	r3, [r7, #15]
          break;
 8005146:	e005      	b.n	8005154 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0ef      	beq.n	8005134 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800515a:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	4904      	ldr	r1, [pc, #16]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005164:	4313      	orrs	r3, r2
 8005166:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40021000 	.word	0x40021000

08005178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e049      	b.n	800521e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd f8ec 	bl	800237c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f000 f9d8 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d001      	beq.n	8005240 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e047      	b.n	80052d0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a23      	ldr	r2, [pc, #140]	@ (80052dc <HAL_TIM_Base_Start+0xb4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <HAL_TIM_Base_Start+0x66>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525a:	d018      	beq.n	800528e <HAL_TIM_Base_Start+0x66>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1f      	ldr	r2, [pc, #124]	@ (80052e0 <HAL_TIM_Base_Start+0xb8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_TIM_Base_Start+0x66>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <HAL_TIM_Base_Start+0xbc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <HAL_TIM_Base_Start+0x66>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1c      	ldr	r2, [pc, #112]	@ (80052e8 <HAL_TIM_Base_Start+0xc0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <HAL_TIM_Base_Start+0x66>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ec <HAL_TIM_Base_Start+0xc4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_TIM_Base_Start+0x66>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a19      	ldr	r2, [pc, #100]	@ (80052f0 <HAL_TIM_Base_Start+0xc8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d115      	bne.n	80052ba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	4b17      	ldr	r3, [pc, #92]	@ (80052f4 <HAL_TIM_Base_Start+0xcc>)
 8005296:	4013      	ands	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b06      	cmp	r3, #6
 800529e:	d015      	beq.n	80052cc <HAL_TIM_Base_Start+0xa4>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a6:	d011      	beq.n	80052cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	e008      	b.n	80052cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e000      	b.n	80052ce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40013400 	.word	0x40013400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	00010007 	.word	0x00010007

080052f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d020      	beq.n	800535c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01b      	beq.n	800535c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0202 	mvn.w	r2, #2
 800532c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8f3 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005348:	e005      	b.n	8005356 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8e5 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f8f6 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d020      	beq.n	80053a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01b      	beq.n	80053a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0204 	mvn.w	r2, #4
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8cd 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8bf 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8d0 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d020      	beq.n	80053f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01b      	beq.n	80053f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0208 	mvn.w	r2, #8
 80053c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2204      	movs	r2, #4
 80053ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8a7 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f899 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f8aa 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d020      	beq.n	8005440 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2208      	movs	r2, #8
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f881 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f873 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f884 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0201 	mvn.w	r2, #1
 800545c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f851 	bl	8005506 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f9a5 	bl	80057dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f99d 	bl	80057f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f83e 	bl	8005556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f06f 0220 	mvn.w	r2, #32
 80054f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f965 	bl	80057c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a46      	ldr	r2, [pc, #280]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558a:	d00f      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a43      	ldr	r2, [pc, #268]	@ (800569c <TIM_Base_SetConfig+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a42      	ldr	r2, [pc, #264]	@ (80056a0 <TIM_Base_SetConfig+0x134>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a41      	ldr	r2, [pc, #260]	@ (80056a4 <TIM_Base_SetConfig+0x138>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a40      	ldr	r2, [pc, #256]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d108      	bne.n	80055be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a35      	ldr	r2, [pc, #212]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01f      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055cc:	d01b      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a32      	ldr	r2, [pc, #200]	@ (800569c <TIM_Base_SetConfig+0x130>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d017      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a31      	ldr	r2, [pc, #196]	@ (80056a0 <TIM_Base_SetConfig+0x134>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a30      	ldr	r2, [pc, #192]	@ (80056a4 <TIM_Base_SetConfig+0x138>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2f      	ldr	r2, [pc, #188]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2e      	ldr	r2, [pc, #184]	@ (80056ac <TIM_Base_SetConfig+0x140>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2d      	ldr	r2, [pc, #180]	@ (80056b0 <TIM_Base_SetConfig+0x144>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2c      	ldr	r2, [pc, #176]	@ (80056b4 <TIM_Base_SetConfig+0x148>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d108      	bne.n	8005618 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800560c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a16      	ldr	r2, [pc, #88]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00f      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a18      	ldr	r2, [pc, #96]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a17      	ldr	r2, [pc, #92]	@ (80056ac <TIM_Base_SetConfig+0x140>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a16      	ldr	r2, [pc, #88]	@ (80056b0 <TIM_Base_SetConfig+0x144>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a15      	ldr	r2, [pc, #84]	@ (80056b4 <TIM_Base_SetConfig+0x148>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d103      	bne.n	800566c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	611a      	str	r2, [r3, #16]
  }
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800

080056b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e068      	b.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2e      	ldr	r2, [pc, #184]	@ (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d004      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2d      	ldr	r2, [pc, #180]	@ (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800570a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1e      	ldr	r2, [pc, #120]	@ (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005742:	d018      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1b      	ldr	r2, [pc, #108]	@ (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1a      	ldr	r2, [pc, #104]	@ (80057bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a18      	ldr	r2, [pc, #96]	@ (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a13      	ldr	r2, [pc, #76]	@ (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a14      	ldr	r2, [pc, #80]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d10c      	bne.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800577c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	4313      	orrs	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40013400 	.word	0x40013400
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40014000 	.word	0x40014000

080057c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e040      	b.n	8005898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc fe42 	bl	80024b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2224      	movs	r2, #36	@ 0x24
 8005830:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fc32 	bl	80060b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f977 	bl	8005b44 <UART_SetConfig>
 8005856:	4603      	mov	r3, r0
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e01b      	b.n	8005898 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800586e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800587e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fcb1 	bl	80061f8 <UART_CheckIdleState>
 8005896:	4603      	mov	r3, r0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	@ 0x28
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	4613      	mov	r3, r2
 80058ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d177      	bne.n	80059a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_UART_Transmit+0x24>
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e070      	b.n	80059aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2221      	movs	r2, #33	@ 0x21
 80058d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058d6:	f7fc ff27 	bl	8002728 <HAL_GetTick>
 80058da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f4:	d108      	bne.n	8005908 <HAL_UART_Transmit+0x68>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	e003      	b.n	8005910 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800590c:	2300      	movs	r3, #0
 800590e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005910:	e02f      	b.n	8005972 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	2180      	movs	r1, #128	@ 0x80
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fd13 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d004      	beq.n	8005932 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e03b      	b.n	80059aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005944:	b292      	uxth	r2, r2
 8005946:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	3302      	adds	r3, #2
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e007      	b.n	8005960 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	781a      	ldrb	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3301      	adds	r3, #1
 800595e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1c9      	bne.n	8005912 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	2140      	movs	r1, #64	@ 0x40
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fcdd 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e005      	b.n	80059aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b08a      	sub	sp, #40	@ 0x28
 80059b6:	af02      	add	r7, sp, #8
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	603b      	str	r3, [r7, #0]
 80059be:	4613      	mov	r3, r2
 80059c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	f040 80b6 	bne.w	8005b3a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_UART_Receive+0x28>
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e0ae      	b.n	8005b3c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2222      	movs	r2, #34	@ 0x22
 80059ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059f4:	f7fc fe98 	bl	8002728 <HAL_GetTick>
 80059f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	88fa      	ldrh	r2, [r7, #6]
 80059fe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a12:	d10e      	bne.n	8005a32 <HAL_UART_Receive+0x80>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <HAL_UART_Receive+0x76>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a26:	e02d      	b.n	8005a84 <HAL_UART_Receive+0xd2>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22ff      	movs	r2, #255	@ 0xff
 8005a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a30:	e028      	b.n	8005a84 <HAL_UART_Receive+0xd2>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10d      	bne.n	8005a56 <HAL_UART_Receive+0xa4>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <HAL_UART_Receive+0x9a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	22ff      	movs	r2, #255	@ 0xff
 8005a46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a4a:	e01b      	b.n	8005a84 <HAL_UART_Receive+0xd2>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	227f      	movs	r2, #127	@ 0x7f
 8005a50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a54:	e016      	b.n	8005a84 <HAL_UART_Receive+0xd2>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a5e:	d10d      	bne.n	8005a7c <HAL_UART_Receive+0xca>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <HAL_UART_Receive+0xc0>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	227f      	movs	r2, #127	@ 0x7f
 8005a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a70:	e008      	b.n	8005a84 <HAL_UART_Receive+0xd2>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	223f      	movs	r2, #63	@ 0x3f
 8005a76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a7a:	e003      	b.n	8005a84 <HAL_UART_Receive+0xd2>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a8a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a94:	d108      	bne.n	8005aa8 <HAL_UART_Receive+0xf6>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d104      	bne.n	8005aa8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e003      	b.n	8005ab0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ab0:	e037      	b.n	8005b22 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2120      	movs	r1, #32
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fc43 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e033      	b.n	8005b3c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10c      	bne.n	8005af4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	8a7b      	ldrh	r3, [r7, #18]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	3302      	adds	r3, #2
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e00d      	b.n	8005b10 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	8a7b      	ldrh	r3, [r7, #18]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	4013      	ands	r3, r2
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1c1      	bne.n	8005ab2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b08a      	sub	sp, #40	@ 0x28
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4ba4      	ldr	r3, [pc, #656]	@ (8005e04 <UART_SetConfig+0x2c0>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a99      	ldr	r2, [pc, #612]	@ (8005e08 <UART_SetConfig+0x2c4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bac:	4313      	orrs	r3, r2
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a90      	ldr	r2, [pc, #576]	@ (8005e0c <UART_SetConfig+0x2c8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d126      	bne.n	8005c1c <UART_SetConfig+0xd8>
 8005bce:	4b90      	ldr	r3, [pc, #576]	@ (8005e10 <UART_SetConfig+0x2cc>)
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d81b      	bhi.n	8005c14 <UART_SetConfig+0xd0>
 8005bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <UART_SetConfig+0xa0>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005bf5 	.word	0x08005bf5
 8005be8:	08005c05 	.word	0x08005c05
 8005bec:	08005bfd 	.word	0x08005bfd
 8005bf0:	08005c0d 	.word	0x08005c0d
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bfa:	e116      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c02:	e112      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c04:	2304      	movs	r3, #4
 8005c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c0a:	e10e      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c12:	e10a      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c14:	2310      	movs	r3, #16
 8005c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c1a:	e106      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a7c      	ldr	r2, [pc, #496]	@ (8005e14 <UART_SetConfig+0x2d0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d138      	bne.n	8005c98 <UART_SetConfig+0x154>
 8005c26:	4b7a      	ldr	r3, [pc, #488]	@ (8005e10 <UART_SetConfig+0x2cc>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2c:	f003 030c 	and.w	r3, r3, #12
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	d82d      	bhi.n	8005c90 <UART_SetConfig+0x14c>
 8005c34:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <UART_SetConfig+0xf8>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c71 	.word	0x08005c71
 8005c40:	08005c91 	.word	0x08005c91
 8005c44:	08005c91 	.word	0x08005c91
 8005c48:	08005c91 	.word	0x08005c91
 8005c4c:	08005c81 	.word	0x08005c81
 8005c50:	08005c91 	.word	0x08005c91
 8005c54:	08005c91 	.word	0x08005c91
 8005c58:	08005c91 	.word	0x08005c91
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	08005c91 	.word	0x08005c91
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c89 	.word	0x08005c89
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c76:	e0d8      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7e:	e0d4      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c80:	2304      	movs	r3, #4
 8005c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c86:	e0d0      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c8e:	e0cc      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c90:	2310      	movs	r3, #16
 8005c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c96:	e0c8      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8005e18 <UART_SetConfig+0x2d4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d125      	bne.n	8005cee <UART_SetConfig+0x1aa>
 8005ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e10 <UART_SetConfig+0x2cc>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cac:	2b30      	cmp	r3, #48	@ 0x30
 8005cae:	d016      	beq.n	8005cde <UART_SetConfig+0x19a>
 8005cb0:	2b30      	cmp	r3, #48	@ 0x30
 8005cb2:	d818      	bhi.n	8005ce6 <UART_SetConfig+0x1a2>
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d00a      	beq.n	8005cce <UART_SetConfig+0x18a>
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d814      	bhi.n	8005ce6 <UART_SetConfig+0x1a2>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <UART_SetConfig+0x182>
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d008      	beq.n	8005cd6 <UART_SetConfig+0x192>
 8005cc4:	e00f      	b.n	8005ce6 <UART_SetConfig+0x1a2>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ccc:	e0ad      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd4:	e0a9      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cdc:	e0a5      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005cde:	2308      	movs	r3, #8
 8005ce0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce4:	e0a1      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005ce6:	2310      	movs	r3, #16
 8005ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cec:	e09d      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8005e1c <UART_SetConfig+0x2d8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d125      	bne.n	8005d44 <UART_SetConfig+0x200>
 8005cf8:	4b45      	ldr	r3, [pc, #276]	@ (8005e10 <UART_SetConfig+0x2cc>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d04:	d016      	beq.n	8005d34 <UART_SetConfig+0x1f0>
 8005d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d08:	d818      	bhi.n	8005d3c <UART_SetConfig+0x1f8>
 8005d0a:	2b80      	cmp	r3, #128	@ 0x80
 8005d0c:	d00a      	beq.n	8005d24 <UART_SetConfig+0x1e0>
 8005d0e:	2b80      	cmp	r3, #128	@ 0x80
 8005d10:	d814      	bhi.n	8005d3c <UART_SetConfig+0x1f8>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <UART_SetConfig+0x1d8>
 8005d16:	2b40      	cmp	r3, #64	@ 0x40
 8005d18:	d008      	beq.n	8005d2c <UART_SetConfig+0x1e8>
 8005d1a:	e00f      	b.n	8005d3c <UART_SetConfig+0x1f8>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d22:	e082      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d24:	2302      	movs	r3, #2
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2a:	e07e      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d32:	e07a      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d34:	2308      	movs	r3, #8
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3a:	e076      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d42:	e072      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a35      	ldr	r2, [pc, #212]	@ (8005e20 <UART_SetConfig+0x2dc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d12a      	bne.n	8005da4 <UART_SetConfig+0x260>
 8005d4e:	4b30      	ldr	r3, [pc, #192]	@ (8005e10 <UART_SetConfig+0x2cc>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d5c:	d01a      	beq.n	8005d94 <UART_SetConfig+0x250>
 8005d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d62:	d81b      	bhi.n	8005d9c <UART_SetConfig+0x258>
 8005d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d68:	d00c      	beq.n	8005d84 <UART_SetConfig+0x240>
 8005d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d6e:	d815      	bhi.n	8005d9c <UART_SetConfig+0x258>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <UART_SetConfig+0x238>
 8005d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d78:	d008      	beq.n	8005d8c <UART_SetConfig+0x248>
 8005d7a:	e00f      	b.n	8005d9c <UART_SetConfig+0x258>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d82:	e052      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d84:	2302      	movs	r3, #2
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8a:	e04e      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e04a      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d94:	2308      	movs	r3, #8
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e046      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e042      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a17      	ldr	r2, [pc, #92]	@ (8005e08 <UART_SetConfig+0x2c4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d13a      	bne.n	8005e24 <UART_SetConfig+0x2e0>
 8005dae:	4b18      	ldr	r3, [pc, #96]	@ (8005e10 <UART_SetConfig+0x2cc>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005db8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dbc:	d01a      	beq.n	8005df4 <UART_SetConfig+0x2b0>
 8005dbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dc2:	d81b      	bhi.n	8005dfc <UART_SetConfig+0x2b8>
 8005dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dc8:	d00c      	beq.n	8005de4 <UART_SetConfig+0x2a0>
 8005dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dce:	d815      	bhi.n	8005dfc <UART_SetConfig+0x2b8>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <UART_SetConfig+0x298>
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd8:	d008      	beq.n	8005dec <UART_SetConfig+0x2a8>
 8005dda:	e00f      	b.n	8005dfc <UART_SetConfig+0x2b8>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de2:	e022      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005de4:	2302      	movs	r3, #2
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e01e      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005dec:	2304      	movs	r3, #4
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df2:	e01a      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005df4:	2308      	movs	r3, #8
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfa:	e016      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e02:	e012      	b.n	8005e2a <UART_SetConfig+0x2e6>
 8005e04:	efff69f3 	.word	0xefff69f3
 8005e08:	40008000 	.word	0x40008000
 8005e0c:	40013800 	.word	0x40013800
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40004400 	.word	0x40004400
 8005e18:	40004800 	.word	0x40004800
 8005e1c:	40004c00 	.word	0x40004c00
 8005e20:	40005000 	.word	0x40005000
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a9f      	ldr	r2, [pc, #636]	@ (80060ac <UART_SetConfig+0x568>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d17a      	bne.n	8005f2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d824      	bhi.n	8005e86 <UART_SetConfig+0x342>
 8005e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <UART_SetConfig+0x300>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e87 	.word	0x08005e87
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005e87 	.word	0x08005e87
 8005e54:	08005e77 	.word	0x08005e77
 8005e58:	08005e87 	.word	0x08005e87
 8005e5c:	08005e87 	.word	0x08005e87
 8005e60:	08005e87 	.word	0x08005e87
 8005e64:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fc3e 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	61f8      	str	r0, [r7, #28]
        break;
 8005e6e:	e010      	b.n	8005e92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b8f      	ldr	r3, [pc, #572]	@ (80060b0 <UART_SetConfig+0x56c>)
 8005e72:	61fb      	str	r3, [r7, #28]
        break;
 8005e74:	e00d      	b.n	8005e92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fe fb9f 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8005e7a:	61f8      	str	r0, [r7, #28]
        break;
 8005e7c:	e009      	b.n	8005e92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e82:	61fb      	str	r3, [r7, #28]
        break;
 8005e84:	e005      	b.n	8005e92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80fb 	beq.w	8006090 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d305      	bcc.n	8005eb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d903      	bls.n	8005ebe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ebc:	e0e8      	b.n	8006090 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	461c      	mov	r4, r3
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	022b      	lsls	r3, r5, #8
 8005ed0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ed4:	0222      	lsls	r2, r4, #8
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	6849      	ldr	r1, [r1, #4]
 8005eda:	0849      	lsrs	r1, r1, #1
 8005edc:	2000      	movs	r0, #0
 8005ede:	4688      	mov	r8, r1
 8005ee0:	4681      	mov	r9, r0
 8005ee2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ee6:	eb43 0b09 	adc.w	fp, r3, r9
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef8:	4650      	mov	r0, sl
 8005efa:	4659      	mov	r1, fp
 8005efc:	f7fa fea4 	bl	8000c48 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4613      	mov	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f0e:	d308      	bcc.n	8005f22 <UART_SetConfig+0x3de>
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f16:	d204      	bcs.n	8005f22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	60da      	str	r2, [r3, #12]
 8005f20:	e0b6      	b.n	8006090 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f28:	e0b2      	b.n	8006090 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f32:	d15e      	bne.n	8005ff2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005f34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d828      	bhi.n	8005f8e <UART_SetConfig+0x44a>
 8005f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <UART_SetConfig+0x400>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	08005f8f 	.word	0x08005f8f
 8005f54:	08005f7f 	.word	0x08005f7f
 8005f58:	08005f8f 	.word	0x08005f8f
 8005f5c:	08005f8f 	.word	0x08005f8f
 8005f60:	08005f8f 	.word	0x08005f8f
 8005f64:	08005f87 	.word	0x08005f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f68:	f7fe fbbe 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8005f6c:	61f8      	str	r0, [r7, #28]
        break;
 8005f6e:	e014      	b.n	8005f9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f70:	f7fe fbd0 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8005f74:	61f8      	str	r0, [r7, #28]
        break;
 8005f76:	e010      	b.n	8005f9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f78:	4b4d      	ldr	r3, [pc, #308]	@ (80060b0 <UART_SetConfig+0x56c>)
 8005f7a:	61fb      	str	r3, [r7, #28]
        break;
 8005f7c:	e00d      	b.n	8005f9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7e:	f7fe fb1b 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8005f82:	61f8      	str	r0, [r7, #28]
        break;
 8005f84:	e009      	b.n	8005f9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f8a:	61fb      	str	r3, [r7, #28]
        break;
 8005f8c:	e005      	b.n	8005f9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d077      	beq.n	8006090 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005a      	lsls	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	441a      	add	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b0f      	cmp	r3, #15
 8005fba:	d916      	bls.n	8005fea <UART_SetConfig+0x4a6>
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc2:	d212      	bcs.n	8005fea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f023 030f 	bic.w	r3, r3, #15
 8005fcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	8afb      	ldrh	r3, [r7, #22]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	8afa      	ldrh	r2, [r7, #22]
 8005fe6:	60da      	str	r2, [r3, #12]
 8005fe8:	e052      	b.n	8006090 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ff0:	e04e      	b.n	8006090 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d827      	bhi.n	800604a <UART_SetConfig+0x506>
 8005ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <UART_SetConfig+0x4bc>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	0800604b 	.word	0x0800604b
 8006010:	0800603b 	.word	0x0800603b
 8006014:	0800604b 	.word	0x0800604b
 8006018:	0800604b 	.word	0x0800604b
 800601c:	0800604b 	.word	0x0800604b
 8006020:	08006043 	.word	0x08006043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006024:	f7fe fb60 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8006028:	61f8      	str	r0, [r7, #28]
        break;
 800602a:	e014      	b.n	8006056 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800602c:	f7fe fb72 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8006030:	61f8      	str	r0, [r7, #28]
        break;
 8006032:	e010      	b.n	8006056 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006034:	4b1e      	ldr	r3, [pc, #120]	@ (80060b0 <UART_SetConfig+0x56c>)
 8006036:	61fb      	str	r3, [r7, #28]
        break;
 8006038:	e00d      	b.n	8006056 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603a:	f7fe fabd 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 800603e:	61f8      	str	r0, [r7, #28]
        break;
 8006040:	e009      	b.n	8006056 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006046:	61fb      	str	r3, [r7, #28]
        break;
 8006048:	e005      	b.n	8006056 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006054:	bf00      	nop
    }

    if (pclk != 0U)
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d019      	beq.n	8006090 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	085a      	lsrs	r2, r3, #1
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	441a      	add	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	fbb2 f3f3 	udiv	r3, r2, r3
 800606e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b0f      	cmp	r3, #15
 8006074:	d909      	bls.n	800608a <UART_SetConfig+0x546>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800607c:	d205      	bcs.n	800608a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60da      	str	r2, [r3, #12]
 8006088:	e002      	b.n	8006090 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800609c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3728      	adds	r7, #40	@ 0x28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060aa:	bf00      	nop
 80060ac:	40008000 	.word	0x40008000
 80060b0:	00f42400 	.word	0x00f42400

080060b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01a      	beq.n	80061ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b2:	d10a      	bne.n	80061ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b098      	sub	sp, #96	@ 0x60
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006208:	f7fc fa8e 	bl	8002728 <HAL_GetTick>
 800620c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d12e      	bne.n	800627a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800621c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006224:	2200      	movs	r2, #0
 8006226:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f88c 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d021      	beq.n	800627a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624a:	653b      	str	r3, [r7, #80]	@ 0x50
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006254:	647b      	str	r3, [r7, #68]	@ 0x44
 8006256:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800625a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e6      	bne.n	8006236 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e062      	b.n	8006340 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b04      	cmp	r3, #4
 8006286:	d149      	bne.n	800631c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006290:	2200      	movs	r2, #0
 8006292:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f856 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d03c      	beq.n	800631c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	623b      	str	r3, [r7, #32]
   return(result);
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e6      	bne.n	80062a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3308      	adds	r3, #8
 80062da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3308      	adds	r3, #8
 80062f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f4:	61fa      	str	r2, [r7, #28]
 80062f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	69b9      	ldr	r1, [r7, #24]
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	617b      	str	r3, [r7, #20]
   return(result);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e5      	bne.n	80062d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e011      	b.n	8006340 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3758      	adds	r7, #88	@ 0x58
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	e04f      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d04b      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006362:	f7fc f9e1 	bl	8002728 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	429a      	cmp	r2, r3
 8006370:	d302      	bcc.n	8006378 <UART_WaitOnFlagUntilTimeout+0x30>
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e04e      	b.n	800641a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d037      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b80      	cmp	r3, #128	@ 0x80
 800638e:	d034      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b40      	cmp	r3, #64	@ 0x40
 8006394:	d031      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d110      	bne.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2208      	movs	r2, #8
 80063aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f838 	bl	8006422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2208      	movs	r2, #8
 80063b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e029      	b.n	800641a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d4:	d111      	bne.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f81e 	bl	8006422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e00f      	b.n	800641a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4013      	ands	r3, r2
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	bf0c      	ite	eq
 800640a:	2301      	moveq	r3, #1
 800640c:	2300      	movne	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	429a      	cmp	r2, r3
 8006416:	d0a0      	beq.n	800635a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006422:	b480      	push	{r7}
 8006424:	b095      	sub	sp, #84	@ 0x54
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006448:	643b      	str	r3, [r7, #64]	@ 0x40
 800644a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800644e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e6      	bne.n	800642a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	61fb      	str	r3, [r7, #28]
   return(result);
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800647c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800647e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006494:	2b01      	cmp	r3, #1
 8006496:	d118      	bne.n	80064ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f023 0310 	bic.w	r3, r3, #16
 80064ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	613b      	str	r3, [r7, #16]
   return(result);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e6      	bne.n	8006498 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064de:	bf00      	nop
 80064e0:	3754      	adds	r7, #84	@ 0x54
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <__cvt>:
 80064ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064ee:	ec57 6b10 	vmov	r6, r7, d0
 80064f2:	2f00      	cmp	r7, #0
 80064f4:	460c      	mov	r4, r1
 80064f6:	4619      	mov	r1, r3
 80064f8:	463b      	mov	r3, r7
 80064fa:	bfbb      	ittet	lt
 80064fc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006500:	461f      	movlt	r7, r3
 8006502:	2300      	movge	r3, #0
 8006504:	232d      	movlt	r3, #45	@ 0x2d
 8006506:	700b      	strb	r3, [r1, #0]
 8006508:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800650a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800650e:	4691      	mov	r9, r2
 8006510:	f023 0820 	bic.w	r8, r3, #32
 8006514:	bfbc      	itt	lt
 8006516:	4632      	movlt	r2, r6
 8006518:	4616      	movlt	r6, r2
 800651a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800651e:	d005      	beq.n	800652c <__cvt+0x42>
 8006520:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006524:	d100      	bne.n	8006528 <__cvt+0x3e>
 8006526:	3401      	adds	r4, #1
 8006528:	2102      	movs	r1, #2
 800652a:	e000      	b.n	800652e <__cvt+0x44>
 800652c:	2103      	movs	r1, #3
 800652e:	ab03      	add	r3, sp, #12
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	ab02      	add	r3, sp, #8
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	ec47 6b10 	vmov	d0, r6, r7
 800653a:	4653      	mov	r3, sl
 800653c:	4622      	mov	r2, r4
 800653e:	f000 ff83 	bl	8007448 <_dtoa_r>
 8006542:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006546:	4605      	mov	r5, r0
 8006548:	d119      	bne.n	800657e <__cvt+0x94>
 800654a:	f019 0f01 	tst.w	r9, #1
 800654e:	d00e      	beq.n	800656e <__cvt+0x84>
 8006550:	eb00 0904 	add.w	r9, r0, r4
 8006554:	2200      	movs	r2, #0
 8006556:	2300      	movs	r3, #0
 8006558:	4630      	mov	r0, r6
 800655a:	4639      	mov	r1, r7
 800655c:	f7fa fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006560:	b108      	cbz	r0, 8006566 <__cvt+0x7c>
 8006562:	f8cd 900c 	str.w	r9, [sp, #12]
 8006566:	2230      	movs	r2, #48	@ 0x30
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	454b      	cmp	r3, r9
 800656c:	d31e      	bcc.n	80065ac <__cvt+0xc2>
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006572:	1b5b      	subs	r3, r3, r5
 8006574:	4628      	mov	r0, r5
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	b004      	add	sp, #16
 800657a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006582:	eb00 0904 	add.w	r9, r0, r4
 8006586:	d1e5      	bne.n	8006554 <__cvt+0x6a>
 8006588:	7803      	ldrb	r3, [r0, #0]
 800658a:	2b30      	cmp	r3, #48	@ 0x30
 800658c:	d10a      	bne.n	80065a4 <__cvt+0xba>
 800658e:	2200      	movs	r2, #0
 8006590:	2300      	movs	r3, #0
 8006592:	4630      	mov	r0, r6
 8006594:	4639      	mov	r1, r7
 8006596:	f7fa fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800659a:	b918      	cbnz	r0, 80065a4 <__cvt+0xba>
 800659c:	f1c4 0401 	rsb	r4, r4, #1
 80065a0:	f8ca 4000 	str.w	r4, [sl]
 80065a4:	f8da 3000 	ldr.w	r3, [sl]
 80065a8:	4499      	add	r9, r3
 80065aa:	e7d3      	b.n	8006554 <__cvt+0x6a>
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	9103      	str	r1, [sp, #12]
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	e7d9      	b.n	8006568 <__cvt+0x7e>

080065b4 <__exponent>:
 80065b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b6:	2900      	cmp	r1, #0
 80065b8:	bfba      	itte	lt
 80065ba:	4249      	neglt	r1, r1
 80065bc:	232d      	movlt	r3, #45	@ 0x2d
 80065be:	232b      	movge	r3, #43	@ 0x2b
 80065c0:	2909      	cmp	r1, #9
 80065c2:	7002      	strb	r2, [r0, #0]
 80065c4:	7043      	strb	r3, [r0, #1]
 80065c6:	dd29      	ble.n	800661c <__exponent+0x68>
 80065c8:	f10d 0307 	add.w	r3, sp, #7
 80065cc:	461d      	mov	r5, r3
 80065ce:	270a      	movs	r7, #10
 80065d0:	461a      	mov	r2, r3
 80065d2:	fbb1 f6f7 	udiv	r6, r1, r7
 80065d6:	fb07 1416 	mls	r4, r7, r6, r1
 80065da:	3430      	adds	r4, #48	@ 0x30
 80065dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065e0:	460c      	mov	r4, r1
 80065e2:	2c63      	cmp	r4, #99	@ 0x63
 80065e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80065e8:	4631      	mov	r1, r6
 80065ea:	dcf1      	bgt.n	80065d0 <__exponent+0x1c>
 80065ec:	3130      	adds	r1, #48	@ 0x30
 80065ee:	1e94      	subs	r4, r2, #2
 80065f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065f4:	1c41      	adds	r1, r0, #1
 80065f6:	4623      	mov	r3, r4
 80065f8:	42ab      	cmp	r3, r5
 80065fa:	d30a      	bcc.n	8006612 <__exponent+0x5e>
 80065fc:	f10d 0309 	add.w	r3, sp, #9
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	42ac      	cmp	r4, r5
 8006604:	bf88      	it	hi
 8006606:	2300      	movhi	r3, #0
 8006608:	3302      	adds	r3, #2
 800660a:	4403      	add	r3, r0
 800660c:	1a18      	subs	r0, r3, r0
 800660e:	b003      	add	sp, #12
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006612:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006616:	f801 6f01 	strb.w	r6, [r1, #1]!
 800661a:	e7ed      	b.n	80065f8 <__exponent+0x44>
 800661c:	2330      	movs	r3, #48	@ 0x30
 800661e:	3130      	adds	r1, #48	@ 0x30
 8006620:	7083      	strb	r3, [r0, #2]
 8006622:	70c1      	strb	r1, [r0, #3]
 8006624:	1d03      	adds	r3, r0, #4
 8006626:	e7f1      	b.n	800660c <__exponent+0x58>

08006628 <_printf_float>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	b08d      	sub	sp, #52	@ 0x34
 800662e:	460c      	mov	r4, r1
 8006630:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006634:	4616      	mov	r6, r2
 8006636:	461f      	mov	r7, r3
 8006638:	4605      	mov	r5, r0
 800663a:	f000 fe03 	bl	8007244 <_localeconv_r>
 800663e:	6803      	ldr	r3, [r0, #0]
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	4618      	mov	r0, r3
 8006644:	f7f9 fe14 	bl	8000270 <strlen>
 8006648:	2300      	movs	r3, #0
 800664a:	930a      	str	r3, [sp, #40]	@ 0x28
 800664c:	f8d8 3000 	ldr.w	r3, [r8]
 8006650:	9005      	str	r0, [sp, #20]
 8006652:	3307      	adds	r3, #7
 8006654:	f023 0307 	bic.w	r3, r3, #7
 8006658:	f103 0208 	add.w	r2, r3, #8
 800665c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006660:	f8d4 b000 	ldr.w	fp, [r4]
 8006664:	f8c8 2000 	str.w	r2, [r8]
 8006668:	e9d3 8900 	ldrd	r8, r9, [r3]
 800666c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006670:	9307      	str	r3, [sp, #28]
 8006672:	f8cd 8018 	str.w	r8, [sp, #24]
 8006676:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800667a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800667e:	4b9c      	ldr	r3, [pc, #624]	@ (80068f0 <_printf_float+0x2c8>)
 8006680:	f04f 32ff 	mov.w	r2, #4294967295
 8006684:	f7fa fa52 	bl	8000b2c <__aeabi_dcmpun>
 8006688:	bb70      	cbnz	r0, 80066e8 <_printf_float+0xc0>
 800668a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668e:	4b98      	ldr	r3, [pc, #608]	@ (80068f0 <_printf_float+0x2c8>)
 8006690:	f04f 32ff 	mov.w	r2, #4294967295
 8006694:	f7fa fa2c 	bl	8000af0 <__aeabi_dcmple>
 8006698:	bb30      	cbnz	r0, 80066e8 <_printf_float+0xc0>
 800669a:	2200      	movs	r2, #0
 800669c:	2300      	movs	r3, #0
 800669e:	4640      	mov	r0, r8
 80066a0:	4649      	mov	r1, r9
 80066a2:	f7fa fa1b 	bl	8000adc <__aeabi_dcmplt>
 80066a6:	b110      	cbz	r0, 80066ae <_printf_float+0x86>
 80066a8:	232d      	movs	r3, #45	@ 0x2d
 80066aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ae:	4a91      	ldr	r2, [pc, #580]	@ (80068f4 <_printf_float+0x2cc>)
 80066b0:	4b91      	ldr	r3, [pc, #580]	@ (80068f8 <_printf_float+0x2d0>)
 80066b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066b6:	bf8c      	ite	hi
 80066b8:	4690      	movhi	r8, r2
 80066ba:	4698      	movls	r8, r3
 80066bc:	2303      	movs	r3, #3
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	f02b 0304 	bic.w	r3, fp, #4
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	f04f 0900 	mov.w	r9, #0
 80066ca:	9700      	str	r7, [sp, #0]
 80066cc:	4633      	mov	r3, r6
 80066ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f9d2 	bl	8006a7c <_printf_common>
 80066d8:	3001      	adds	r0, #1
 80066da:	f040 808d 	bne.w	80067f8 <_printf_float+0x1d0>
 80066de:	f04f 30ff 	mov.w	r0, #4294967295
 80066e2:	b00d      	add	sp, #52	@ 0x34
 80066e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	4640      	mov	r0, r8
 80066ee:	4649      	mov	r1, r9
 80066f0:	f7fa fa1c 	bl	8000b2c <__aeabi_dcmpun>
 80066f4:	b140      	cbz	r0, 8006708 <_printf_float+0xe0>
 80066f6:	464b      	mov	r3, r9
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bfbc      	itt	lt
 80066fc:	232d      	movlt	r3, #45	@ 0x2d
 80066fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006702:	4a7e      	ldr	r2, [pc, #504]	@ (80068fc <_printf_float+0x2d4>)
 8006704:	4b7e      	ldr	r3, [pc, #504]	@ (8006900 <_printf_float+0x2d8>)
 8006706:	e7d4      	b.n	80066b2 <_printf_float+0x8a>
 8006708:	6863      	ldr	r3, [r4, #4]
 800670a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800670e:	9206      	str	r2, [sp, #24]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	d13b      	bne.n	800678c <_printf_float+0x164>
 8006714:	2306      	movs	r3, #6
 8006716:	6063      	str	r3, [r4, #4]
 8006718:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800671c:	2300      	movs	r3, #0
 800671e:	6022      	str	r2, [r4, #0]
 8006720:	9303      	str	r3, [sp, #12]
 8006722:	ab0a      	add	r3, sp, #40	@ 0x28
 8006724:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006728:	ab09      	add	r3, sp, #36	@ 0x24
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	6861      	ldr	r1, [r4, #4]
 800672e:	ec49 8b10 	vmov	d0, r8, r9
 8006732:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006736:	4628      	mov	r0, r5
 8006738:	f7ff fed7 	bl	80064ea <__cvt>
 800673c:	9b06      	ldr	r3, [sp, #24]
 800673e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006740:	2b47      	cmp	r3, #71	@ 0x47
 8006742:	4680      	mov	r8, r0
 8006744:	d129      	bne.n	800679a <_printf_float+0x172>
 8006746:	1cc8      	adds	r0, r1, #3
 8006748:	db02      	blt.n	8006750 <_printf_float+0x128>
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	4299      	cmp	r1, r3
 800674e:	dd41      	ble.n	80067d4 <_printf_float+0x1ac>
 8006750:	f1aa 0a02 	sub.w	sl, sl, #2
 8006754:	fa5f fa8a 	uxtb.w	sl, sl
 8006758:	3901      	subs	r1, #1
 800675a:	4652      	mov	r2, sl
 800675c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006760:	9109      	str	r1, [sp, #36]	@ 0x24
 8006762:	f7ff ff27 	bl	80065b4 <__exponent>
 8006766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006768:	1813      	adds	r3, r2, r0
 800676a:	2a01      	cmp	r2, #1
 800676c:	4681      	mov	r9, r0
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	dc02      	bgt.n	8006778 <_printf_float+0x150>
 8006772:	6822      	ldr	r2, [r4, #0]
 8006774:	07d2      	lsls	r2, r2, #31
 8006776:	d501      	bpl.n	800677c <_printf_float+0x154>
 8006778:	3301      	adds	r3, #1
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0a2      	beq.n	80066ca <_printf_float+0xa2>
 8006784:	232d      	movs	r3, #45	@ 0x2d
 8006786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800678a:	e79e      	b.n	80066ca <_printf_float+0xa2>
 800678c:	9a06      	ldr	r2, [sp, #24]
 800678e:	2a47      	cmp	r2, #71	@ 0x47
 8006790:	d1c2      	bne.n	8006718 <_printf_float+0xf0>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1c0      	bne.n	8006718 <_printf_float+0xf0>
 8006796:	2301      	movs	r3, #1
 8006798:	e7bd      	b.n	8006716 <_printf_float+0xee>
 800679a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800679e:	d9db      	bls.n	8006758 <_printf_float+0x130>
 80067a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067a4:	d118      	bne.n	80067d8 <_printf_float+0x1b0>
 80067a6:	2900      	cmp	r1, #0
 80067a8:	6863      	ldr	r3, [r4, #4]
 80067aa:	dd0b      	ble.n	80067c4 <_printf_float+0x19c>
 80067ac:	6121      	str	r1, [r4, #16]
 80067ae:	b913      	cbnz	r3, 80067b6 <_printf_float+0x18e>
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	07d0      	lsls	r0, r2, #31
 80067b4:	d502      	bpl.n	80067bc <_printf_float+0x194>
 80067b6:	3301      	adds	r3, #1
 80067b8:	440b      	add	r3, r1
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067be:	f04f 0900 	mov.w	r9, #0
 80067c2:	e7db      	b.n	800677c <_printf_float+0x154>
 80067c4:	b913      	cbnz	r3, 80067cc <_printf_float+0x1a4>
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	07d2      	lsls	r2, r2, #31
 80067ca:	d501      	bpl.n	80067d0 <_printf_float+0x1a8>
 80067cc:	3302      	adds	r3, #2
 80067ce:	e7f4      	b.n	80067ba <_printf_float+0x192>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e7f2      	b.n	80067ba <_printf_float+0x192>
 80067d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067da:	4299      	cmp	r1, r3
 80067dc:	db05      	blt.n	80067ea <_printf_float+0x1c2>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	6121      	str	r1, [r4, #16]
 80067e2:	07d8      	lsls	r0, r3, #31
 80067e4:	d5ea      	bpl.n	80067bc <_printf_float+0x194>
 80067e6:	1c4b      	adds	r3, r1, #1
 80067e8:	e7e7      	b.n	80067ba <_printf_float+0x192>
 80067ea:	2900      	cmp	r1, #0
 80067ec:	bfd4      	ite	le
 80067ee:	f1c1 0202 	rsble	r2, r1, #2
 80067f2:	2201      	movgt	r2, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	e7e0      	b.n	80067ba <_printf_float+0x192>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	055a      	lsls	r2, r3, #21
 80067fc:	d407      	bmi.n	800680e <_printf_float+0x1e6>
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	4642      	mov	r2, r8
 8006802:	4631      	mov	r1, r6
 8006804:	4628      	mov	r0, r5
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	d12b      	bne.n	8006864 <_printf_float+0x23c>
 800680c:	e767      	b.n	80066de <_printf_float+0xb6>
 800680e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006812:	f240 80dd 	bls.w	80069d0 <_printf_float+0x3a8>
 8006816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800681a:	2200      	movs	r2, #0
 800681c:	2300      	movs	r3, #0
 800681e:	f7fa f953 	bl	8000ac8 <__aeabi_dcmpeq>
 8006822:	2800      	cmp	r0, #0
 8006824:	d033      	beq.n	800688e <_printf_float+0x266>
 8006826:	4a37      	ldr	r2, [pc, #220]	@ (8006904 <_printf_float+0x2dc>)
 8006828:	2301      	movs	r3, #1
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	f43f af54 	beq.w	80066de <_printf_float+0xb6>
 8006836:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800683a:	4543      	cmp	r3, r8
 800683c:	db02      	blt.n	8006844 <_printf_float+0x21c>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	07d8      	lsls	r0, r3, #31
 8006842:	d50f      	bpl.n	8006864 <_printf_float+0x23c>
 8006844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f af45 	beq.w	80066de <_printf_float+0xb6>
 8006854:	f04f 0900 	mov.w	r9, #0
 8006858:	f108 38ff 	add.w	r8, r8, #4294967295
 800685c:	f104 0a1a 	add.w	sl, r4, #26
 8006860:	45c8      	cmp	r8, r9
 8006862:	dc09      	bgt.n	8006878 <_printf_float+0x250>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	079b      	lsls	r3, r3, #30
 8006868:	f100 8103 	bmi.w	8006a72 <_printf_float+0x44a>
 800686c:	68e0      	ldr	r0, [r4, #12]
 800686e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006870:	4298      	cmp	r0, r3
 8006872:	bfb8      	it	lt
 8006874:	4618      	movlt	r0, r3
 8006876:	e734      	b.n	80066e2 <_printf_float+0xba>
 8006878:	2301      	movs	r3, #1
 800687a:	4652      	mov	r2, sl
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f af2b 	beq.w	80066de <_printf_float+0xb6>
 8006888:	f109 0901 	add.w	r9, r9, #1
 800688c:	e7e8      	b.n	8006860 <_printf_float+0x238>
 800688e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	dc39      	bgt.n	8006908 <_printf_float+0x2e0>
 8006894:	4a1b      	ldr	r2, [pc, #108]	@ (8006904 <_printf_float+0x2dc>)
 8006896:	2301      	movs	r3, #1
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f af1d 	beq.w	80066de <_printf_float+0xb6>
 80068a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80068a8:	ea59 0303 	orrs.w	r3, r9, r3
 80068ac:	d102      	bne.n	80068b4 <_printf_float+0x28c>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	07d9      	lsls	r1, r3, #31
 80068b2:	d5d7      	bpl.n	8006864 <_printf_float+0x23c>
 80068b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f af0d 	beq.w	80066de <_printf_float+0xb6>
 80068c4:	f04f 0a00 	mov.w	sl, #0
 80068c8:	f104 0b1a 	add.w	fp, r4, #26
 80068cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ce:	425b      	negs	r3, r3
 80068d0:	4553      	cmp	r3, sl
 80068d2:	dc01      	bgt.n	80068d8 <_printf_float+0x2b0>
 80068d4:	464b      	mov	r3, r9
 80068d6:	e793      	b.n	8006800 <_printf_float+0x1d8>
 80068d8:	2301      	movs	r3, #1
 80068da:	465a      	mov	r2, fp
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	f43f aefb 	beq.w	80066de <_printf_float+0xb6>
 80068e8:	f10a 0a01 	add.w	sl, sl, #1
 80068ec:	e7ee      	b.n	80068cc <_printf_float+0x2a4>
 80068ee:	bf00      	nop
 80068f0:	7fefffff 	.word	0x7fefffff
 80068f4:	080094bc 	.word	0x080094bc
 80068f8:	080094b8 	.word	0x080094b8
 80068fc:	080094c4 	.word	0x080094c4
 8006900:	080094c0 	.word	0x080094c0
 8006904:	080094c8 	.word	0x080094c8
 8006908:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800690a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800690e:	4553      	cmp	r3, sl
 8006910:	bfa8      	it	ge
 8006912:	4653      	movge	r3, sl
 8006914:	2b00      	cmp	r3, #0
 8006916:	4699      	mov	r9, r3
 8006918:	dc36      	bgt.n	8006988 <_printf_float+0x360>
 800691a:	f04f 0b00 	mov.w	fp, #0
 800691e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006922:	f104 021a 	add.w	r2, r4, #26
 8006926:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006928:	9306      	str	r3, [sp, #24]
 800692a:	eba3 0309 	sub.w	r3, r3, r9
 800692e:	455b      	cmp	r3, fp
 8006930:	dc31      	bgt.n	8006996 <_printf_float+0x36e>
 8006932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006934:	459a      	cmp	sl, r3
 8006936:	dc3a      	bgt.n	80069ae <_printf_float+0x386>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07da      	lsls	r2, r3, #31
 800693c:	d437      	bmi.n	80069ae <_printf_float+0x386>
 800693e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006940:	ebaa 0903 	sub.w	r9, sl, r3
 8006944:	9b06      	ldr	r3, [sp, #24]
 8006946:	ebaa 0303 	sub.w	r3, sl, r3
 800694a:	4599      	cmp	r9, r3
 800694c:	bfa8      	it	ge
 800694e:	4699      	movge	r9, r3
 8006950:	f1b9 0f00 	cmp.w	r9, #0
 8006954:	dc33      	bgt.n	80069be <_printf_float+0x396>
 8006956:	f04f 0800 	mov.w	r8, #0
 800695a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800695e:	f104 0b1a 	add.w	fp, r4, #26
 8006962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006964:	ebaa 0303 	sub.w	r3, sl, r3
 8006968:	eba3 0309 	sub.w	r3, r3, r9
 800696c:	4543      	cmp	r3, r8
 800696e:	f77f af79 	ble.w	8006864 <_printf_float+0x23c>
 8006972:	2301      	movs	r3, #1
 8006974:	465a      	mov	r2, fp
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	f43f aeae 	beq.w	80066de <_printf_float+0xb6>
 8006982:	f108 0801 	add.w	r8, r8, #1
 8006986:	e7ec      	b.n	8006962 <_printf_float+0x33a>
 8006988:	4642      	mov	r2, r8
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	d1c2      	bne.n	800691a <_printf_float+0x2f2>
 8006994:	e6a3      	b.n	80066de <_printf_float+0xb6>
 8006996:	2301      	movs	r3, #1
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	9206      	str	r2, [sp, #24]
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae9c 	beq.w	80066de <_printf_float+0xb6>
 80069a6:	9a06      	ldr	r2, [sp, #24]
 80069a8:	f10b 0b01 	add.w	fp, fp, #1
 80069ac:	e7bb      	b.n	8006926 <_printf_float+0x2fe>
 80069ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	d1c0      	bne.n	800693e <_printf_float+0x316>
 80069bc:	e68f      	b.n	80066de <_printf_float+0xb6>
 80069be:	9a06      	ldr	r2, [sp, #24]
 80069c0:	464b      	mov	r3, r9
 80069c2:	4442      	add	r2, r8
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	d1c3      	bne.n	8006956 <_printf_float+0x32e>
 80069ce:	e686      	b.n	80066de <_printf_float+0xb6>
 80069d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069d4:	f1ba 0f01 	cmp.w	sl, #1
 80069d8:	dc01      	bgt.n	80069de <_printf_float+0x3b6>
 80069da:	07db      	lsls	r3, r3, #31
 80069dc:	d536      	bpl.n	8006a4c <_printf_float+0x424>
 80069de:	2301      	movs	r3, #1
 80069e0:	4642      	mov	r2, r8
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f ae78 	beq.w	80066de <_printf_float+0xb6>
 80069ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f ae70 	beq.w	80066de <_printf_float+0xb6>
 80069fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a02:	2200      	movs	r2, #0
 8006a04:	2300      	movs	r3, #0
 8006a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a0a:	f7fa f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a0e:	b9c0      	cbnz	r0, 8006a42 <_printf_float+0x41a>
 8006a10:	4653      	mov	r3, sl
 8006a12:	f108 0201 	add.w	r2, r8, #1
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d10c      	bne.n	8006a3a <_printf_float+0x412>
 8006a20:	e65d      	b.n	80066de <_printf_float+0xb6>
 8006a22:	2301      	movs	r3, #1
 8006a24:	465a      	mov	r2, fp
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b8      	blx	r7
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f43f ae56 	beq.w	80066de <_printf_float+0xb6>
 8006a32:	f108 0801 	add.w	r8, r8, #1
 8006a36:	45d0      	cmp	r8, sl
 8006a38:	dbf3      	blt.n	8006a22 <_printf_float+0x3fa>
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a40:	e6df      	b.n	8006802 <_printf_float+0x1da>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	f104 0b1a 	add.w	fp, r4, #26
 8006a4a:	e7f4      	b.n	8006a36 <_printf_float+0x40e>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4642      	mov	r2, r8
 8006a50:	e7e1      	b.n	8006a16 <_printf_float+0x3ee>
 8006a52:	2301      	movs	r3, #1
 8006a54:	464a      	mov	r2, r9
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f43f ae3e 	beq.w	80066de <_printf_float+0xb6>
 8006a62:	f108 0801 	add.w	r8, r8, #1
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a6a:	1a5b      	subs	r3, r3, r1
 8006a6c:	4543      	cmp	r3, r8
 8006a6e:	dcf0      	bgt.n	8006a52 <_printf_float+0x42a>
 8006a70:	e6fc      	b.n	800686c <_printf_float+0x244>
 8006a72:	f04f 0800 	mov.w	r8, #0
 8006a76:	f104 0919 	add.w	r9, r4, #25
 8006a7a:	e7f4      	b.n	8006a66 <_printf_float+0x43e>

08006a7c <_printf_common>:
 8006a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a80:	4616      	mov	r6, r2
 8006a82:	4698      	mov	r8, r3
 8006a84:	688a      	ldr	r2, [r1, #8]
 8006a86:	690b      	ldr	r3, [r1, #16]
 8006a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	bfb8      	it	lt
 8006a90:	4613      	movlt	r3, r2
 8006a92:	6033      	str	r3, [r6, #0]
 8006a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a98:	4607      	mov	r7, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	b10a      	cbz	r2, 8006aa2 <_printf_common+0x26>
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	6033      	str	r3, [r6, #0]
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	0699      	lsls	r1, r3, #26
 8006aa6:	bf42      	ittt	mi
 8006aa8:	6833      	ldrmi	r3, [r6, #0]
 8006aaa:	3302      	addmi	r3, #2
 8006aac:	6033      	strmi	r3, [r6, #0]
 8006aae:	6825      	ldr	r5, [r4, #0]
 8006ab0:	f015 0506 	ands.w	r5, r5, #6
 8006ab4:	d106      	bne.n	8006ac4 <_printf_common+0x48>
 8006ab6:	f104 0a19 	add.w	sl, r4, #25
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	6832      	ldr	r2, [r6, #0]
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	dc26      	bgt.n	8006b12 <_printf_common+0x96>
 8006ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ac8:	6822      	ldr	r2, [r4, #0]
 8006aca:	3b00      	subs	r3, #0
 8006acc:	bf18      	it	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	0692      	lsls	r2, r2, #26
 8006ad2:	d42b      	bmi.n	8006b2c <_printf_common+0xb0>
 8006ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ad8:	4641      	mov	r1, r8
 8006ada:	4638      	mov	r0, r7
 8006adc:	47c8      	blx	r9
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d01e      	beq.n	8006b20 <_printf_common+0xa4>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	6922      	ldr	r2, [r4, #16]
 8006ae6:	f003 0306 	and.w	r3, r3, #6
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	bf02      	ittt	eq
 8006aee:	68e5      	ldreq	r5, [r4, #12]
 8006af0:	6833      	ldreq	r3, [r6, #0]
 8006af2:	1aed      	subeq	r5, r5, r3
 8006af4:	68a3      	ldr	r3, [r4, #8]
 8006af6:	bf0c      	ite	eq
 8006af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006afc:	2500      	movne	r5, #0
 8006afe:	4293      	cmp	r3, r2
 8006b00:	bfc4      	itt	gt
 8006b02:	1a9b      	subgt	r3, r3, r2
 8006b04:	18ed      	addgt	r5, r5, r3
 8006b06:	2600      	movs	r6, #0
 8006b08:	341a      	adds	r4, #26
 8006b0a:	42b5      	cmp	r5, r6
 8006b0c:	d11a      	bne.n	8006b44 <_printf_common+0xc8>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e008      	b.n	8006b24 <_printf_common+0xa8>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4652      	mov	r2, sl
 8006b16:	4641      	mov	r1, r8
 8006b18:	4638      	mov	r0, r7
 8006b1a:	47c8      	blx	r9
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d103      	bne.n	8006b28 <_printf_common+0xac>
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295
 8006b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b28:	3501      	adds	r5, #1
 8006b2a:	e7c6      	b.n	8006aba <_printf_common+0x3e>
 8006b2c:	18e1      	adds	r1, r4, r3
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	2030      	movs	r0, #48	@ 0x30
 8006b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b36:	4422      	add	r2, r4
 8006b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b40:	3302      	adds	r3, #2
 8006b42:	e7c7      	b.n	8006ad4 <_printf_common+0x58>
 8006b44:	2301      	movs	r3, #1
 8006b46:	4622      	mov	r2, r4
 8006b48:	4641      	mov	r1, r8
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	47c8      	blx	r9
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d0e6      	beq.n	8006b20 <_printf_common+0xa4>
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7d9      	b.n	8006b0a <_printf_common+0x8e>
	...

08006b58 <_printf_i>:
 8006b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	7e0f      	ldrb	r7, [r1, #24]
 8006b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b60:	2f78      	cmp	r7, #120	@ 0x78
 8006b62:	4691      	mov	r9, r2
 8006b64:	4680      	mov	r8, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	469a      	mov	sl, r3
 8006b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b6e:	d807      	bhi.n	8006b80 <_printf_i+0x28>
 8006b70:	2f62      	cmp	r7, #98	@ 0x62
 8006b72:	d80a      	bhi.n	8006b8a <_printf_i+0x32>
 8006b74:	2f00      	cmp	r7, #0
 8006b76:	f000 80d1 	beq.w	8006d1c <_printf_i+0x1c4>
 8006b7a:	2f58      	cmp	r7, #88	@ 0x58
 8006b7c:	f000 80b8 	beq.w	8006cf0 <_printf_i+0x198>
 8006b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b88:	e03a      	b.n	8006c00 <_printf_i+0xa8>
 8006b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b8e:	2b15      	cmp	r3, #21
 8006b90:	d8f6      	bhi.n	8006b80 <_printf_i+0x28>
 8006b92:	a101      	add	r1, pc, #4	@ (adr r1, 8006b98 <_printf_i+0x40>)
 8006b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b98:	08006bf1 	.word	0x08006bf1
 8006b9c:	08006c05 	.word	0x08006c05
 8006ba0:	08006b81 	.word	0x08006b81
 8006ba4:	08006b81 	.word	0x08006b81
 8006ba8:	08006b81 	.word	0x08006b81
 8006bac:	08006b81 	.word	0x08006b81
 8006bb0:	08006c05 	.word	0x08006c05
 8006bb4:	08006b81 	.word	0x08006b81
 8006bb8:	08006b81 	.word	0x08006b81
 8006bbc:	08006b81 	.word	0x08006b81
 8006bc0:	08006b81 	.word	0x08006b81
 8006bc4:	08006d03 	.word	0x08006d03
 8006bc8:	08006c2f 	.word	0x08006c2f
 8006bcc:	08006cbd 	.word	0x08006cbd
 8006bd0:	08006b81 	.word	0x08006b81
 8006bd4:	08006b81 	.word	0x08006b81
 8006bd8:	08006d25 	.word	0x08006d25
 8006bdc:	08006b81 	.word	0x08006b81
 8006be0:	08006c2f 	.word	0x08006c2f
 8006be4:	08006b81 	.word	0x08006b81
 8006be8:	08006b81 	.word	0x08006b81
 8006bec:	08006cc5 	.word	0x08006cc5
 8006bf0:	6833      	ldr	r3, [r6, #0]
 8006bf2:	1d1a      	adds	r2, r3, #4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6032      	str	r2, [r6, #0]
 8006bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c00:	2301      	movs	r3, #1
 8006c02:	e09c      	b.n	8006d3e <_printf_i+0x1e6>
 8006c04:	6833      	ldr	r3, [r6, #0]
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	1d19      	adds	r1, r3, #4
 8006c0a:	6031      	str	r1, [r6, #0]
 8006c0c:	0606      	lsls	r6, r0, #24
 8006c0e:	d501      	bpl.n	8006c14 <_printf_i+0xbc>
 8006c10:	681d      	ldr	r5, [r3, #0]
 8006c12:	e003      	b.n	8006c1c <_printf_i+0xc4>
 8006c14:	0645      	lsls	r5, r0, #25
 8006c16:	d5fb      	bpl.n	8006c10 <_printf_i+0xb8>
 8006c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c1c:	2d00      	cmp	r5, #0
 8006c1e:	da03      	bge.n	8006c28 <_printf_i+0xd0>
 8006c20:	232d      	movs	r3, #45	@ 0x2d
 8006c22:	426d      	negs	r5, r5
 8006c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c28:	4858      	ldr	r0, [pc, #352]	@ (8006d8c <_printf_i+0x234>)
 8006c2a:	230a      	movs	r3, #10
 8006c2c:	e011      	b.n	8006c52 <_printf_i+0xfa>
 8006c2e:	6821      	ldr	r1, [r4, #0]
 8006c30:	6833      	ldr	r3, [r6, #0]
 8006c32:	0608      	lsls	r0, r1, #24
 8006c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c38:	d402      	bmi.n	8006c40 <_printf_i+0xe8>
 8006c3a:	0649      	lsls	r1, r1, #25
 8006c3c:	bf48      	it	mi
 8006c3e:	b2ad      	uxthmi	r5, r5
 8006c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c42:	4852      	ldr	r0, [pc, #328]	@ (8006d8c <_printf_i+0x234>)
 8006c44:	6033      	str	r3, [r6, #0]
 8006c46:	bf14      	ite	ne
 8006c48:	230a      	movne	r3, #10
 8006c4a:	2308      	moveq	r3, #8
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c52:	6866      	ldr	r6, [r4, #4]
 8006c54:	60a6      	str	r6, [r4, #8]
 8006c56:	2e00      	cmp	r6, #0
 8006c58:	db05      	blt.n	8006c66 <_printf_i+0x10e>
 8006c5a:	6821      	ldr	r1, [r4, #0]
 8006c5c:	432e      	orrs	r6, r5
 8006c5e:	f021 0104 	bic.w	r1, r1, #4
 8006c62:	6021      	str	r1, [r4, #0]
 8006c64:	d04b      	beq.n	8006cfe <_printf_i+0x1a6>
 8006c66:	4616      	mov	r6, r2
 8006c68:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c6c:	fb03 5711 	mls	r7, r3, r1, r5
 8006c70:	5dc7      	ldrb	r7, [r0, r7]
 8006c72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c76:	462f      	mov	r7, r5
 8006c78:	42bb      	cmp	r3, r7
 8006c7a:	460d      	mov	r5, r1
 8006c7c:	d9f4      	bls.n	8006c68 <_printf_i+0x110>
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d10b      	bne.n	8006c9a <_printf_i+0x142>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	07df      	lsls	r7, r3, #31
 8006c86:	d508      	bpl.n	8006c9a <_printf_i+0x142>
 8006c88:	6923      	ldr	r3, [r4, #16]
 8006c8a:	6861      	ldr	r1, [r4, #4]
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	bfde      	ittt	le
 8006c90:	2330      	movle	r3, #48	@ 0x30
 8006c92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c9a:	1b92      	subs	r2, r2, r6
 8006c9c:	6122      	str	r2, [r4, #16]
 8006c9e:	f8cd a000 	str.w	sl, [sp]
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	aa03      	add	r2, sp, #12
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4640      	mov	r0, r8
 8006caa:	f7ff fee7 	bl	8006a7c <_printf_common>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d14a      	bne.n	8006d48 <_printf_i+0x1f0>
 8006cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb6:	b004      	add	sp, #16
 8006cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	f043 0320 	orr.w	r3, r3, #32
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	4832      	ldr	r0, [pc, #200]	@ (8006d90 <_printf_i+0x238>)
 8006cc6:	2778      	movs	r7, #120	@ 0x78
 8006cc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	6831      	ldr	r1, [r6, #0]
 8006cd0:	061f      	lsls	r7, r3, #24
 8006cd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cd6:	d402      	bmi.n	8006cde <_printf_i+0x186>
 8006cd8:	065f      	lsls	r7, r3, #25
 8006cda:	bf48      	it	mi
 8006cdc:	b2ad      	uxthmi	r5, r5
 8006cde:	6031      	str	r1, [r6, #0]
 8006ce0:	07d9      	lsls	r1, r3, #31
 8006ce2:	bf44      	itt	mi
 8006ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ce8:	6023      	strmi	r3, [r4, #0]
 8006cea:	b11d      	cbz	r5, 8006cf4 <_printf_i+0x19c>
 8006cec:	2310      	movs	r3, #16
 8006cee:	e7ad      	b.n	8006c4c <_printf_i+0xf4>
 8006cf0:	4826      	ldr	r0, [pc, #152]	@ (8006d8c <_printf_i+0x234>)
 8006cf2:	e7e9      	b.n	8006cc8 <_printf_i+0x170>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	f023 0320 	bic.w	r3, r3, #32
 8006cfa:	6023      	str	r3, [r4, #0]
 8006cfc:	e7f6      	b.n	8006cec <_printf_i+0x194>
 8006cfe:	4616      	mov	r6, r2
 8006d00:	e7bd      	b.n	8006c7e <_printf_i+0x126>
 8006d02:	6833      	ldr	r3, [r6, #0]
 8006d04:	6825      	ldr	r5, [r4, #0]
 8006d06:	6961      	ldr	r1, [r4, #20]
 8006d08:	1d18      	adds	r0, r3, #4
 8006d0a:	6030      	str	r0, [r6, #0]
 8006d0c:	062e      	lsls	r6, r5, #24
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	d501      	bpl.n	8006d16 <_printf_i+0x1be>
 8006d12:	6019      	str	r1, [r3, #0]
 8006d14:	e002      	b.n	8006d1c <_printf_i+0x1c4>
 8006d16:	0668      	lsls	r0, r5, #25
 8006d18:	d5fb      	bpl.n	8006d12 <_printf_i+0x1ba>
 8006d1a:	8019      	strh	r1, [r3, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	4616      	mov	r6, r2
 8006d22:	e7bc      	b.n	8006c9e <_printf_i+0x146>
 8006d24:	6833      	ldr	r3, [r6, #0]
 8006d26:	1d1a      	adds	r2, r3, #4
 8006d28:	6032      	str	r2, [r6, #0]
 8006d2a:	681e      	ldr	r6, [r3, #0]
 8006d2c:	6862      	ldr	r2, [r4, #4]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4630      	mov	r0, r6
 8006d32:	f7f9 fa4d 	bl	80001d0 <memchr>
 8006d36:	b108      	cbz	r0, 8006d3c <_printf_i+0x1e4>
 8006d38:	1b80      	subs	r0, r0, r6
 8006d3a:	6060      	str	r0, [r4, #4]
 8006d3c:	6863      	ldr	r3, [r4, #4]
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	2300      	movs	r3, #0
 8006d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d46:	e7aa      	b.n	8006c9e <_printf_i+0x146>
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4640      	mov	r0, r8
 8006d50:	47d0      	blx	sl
 8006d52:	3001      	adds	r0, #1
 8006d54:	d0ad      	beq.n	8006cb2 <_printf_i+0x15a>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	079b      	lsls	r3, r3, #30
 8006d5a:	d413      	bmi.n	8006d84 <_printf_i+0x22c>
 8006d5c:	68e0      	ldr	r0, [r4, #12]
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	4298      	cmp	r0, r3
 8006d62:	bfb8      	it	lt
 8006d64:	4618      	movlt	r0, r3
 8006d66:	e7a6      	b.n	8006cb6 <_printf_i+0x15e>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4632      	mov	r2, r6
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	4640      	mov	r0, r8
 8006d70:	47d0      	blx	sl
 8006d72:	3001      	adds	r0, #1
 8006d74:	d09d      	beq.n	8006cb2 <_printf_i+0x15a>
 8006d76:	3501      	adds	r5, #1
 8006d78:	68e3      	ldr	r3, [r4, #12]
 8006d7a:	9903      	ldr	r1, [sp, #12]
 8006d7c:	1a5b      	subs	r3, r3, r1
 8006d7e:	42ab      	cmp	r3, r5
 8006d80:	dcf2      	bgt.n	8006d68 <_printf_i+0x210>
 8006d82:	e7eb      	b.n	8006d5c <_printf_i+0x204>
 8006d84:	2500      	movs	r5, #0
 8006d86:	f104 0619 	add.w	r6, r4, #25
 8006d8a:	e7f5      	b.n	8006d78 <_printf_i+0x220>
 8006d8c:	080094ca 	.word	0x080094ca
 8006d90:	080094db 	.word	0x080094db

08006d94 <std>:
 8006d94:	2300      	movs	r3, #0
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006da2:	6083      	str	r3, [r0, #8]
 8006da4:	8181      	strh	r1, [r0, #12]
 8006da6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006da8:	81c2      	strh	r2, [r0, #14]
 8006daa:	6183      	str	r3, [r0, #24]
 8006dac:	4619      	mov	r1, r3
 8006dae:	2208      	movs	r2, #8
 8006db0:	305c      	adds	r0, #92	@ 0x5c
 8006db2:	f000 fa3f 	bl	8007234 <memset>
 8006db6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <std+0x58>)
 8006db8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <std+0x5c>)
 8006dbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <std+0x60>)
 8006dc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <std+0x64>)
 8006dc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <std+0x68>)
 8006dc8:	6224      	str	r4, [r4, #32]
 8006dca:	429c      	cmp	r4, r3
 8006dcc:	d006      	beq.n	8006ddc <std+0x48>
 8006dce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dd2:	4294      	cmp	r4, r2
 8006dd4:	d002      	beq.n	8006ddc <std+0x48>
 8006dd6:	33d0      	adds	r3, #208	@ 0xd0
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d105      	bne.n	8006de8 <std+0x54>
 8006ddc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de4:	f000 baa2 	b.w	800732c <__retarget_lock_init_recursive>
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	bf00      	nop
 8006dec:	08007085 	.word	0x08007085
 8006df0:	080070a7 	.word	0x080070a7
 8006df4:	080070df 	.word	0x080070df
 8006df8:	08007103 	.word	0x08007103
 8006dfc:	2000076c 	.word	0x2000076c

08006e00 <stdio_exit_handler>:
 8006e00:	4a02      	ldr	r2, [pc, #8]	@ (8006e0c <stdio_exit_handler+0xc>)
 8006e02:	4903      	ldr	r1, [pc, #12]	@ (8006e10 <stdio_exit_handler+0x10>)
 8006e04:	4803      	ldr	r0, [pc, #12]	@ (8006e14 <stdio_exit_handler+0x14>)
 8006e06:	f000 b869 	b.w	8006edc <_fwalk_sglue>
 8006e0a:	bf00      	nop
 8006e0c:	20000018 	.word	0x20000018
 8006e10:	08008c95 	.word	0x08008c95
 8006e14:	20000028 	.word	0x20000028

08006e18 <cleanup_stdio>:
 8006e18:	6841      	ldr	r1, [r0, #4]
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e4c <cleanup_stdio+0x34>)
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	b510      	push	{r4, lr}
 8006e20:	4604      	mov	r4, r0
 8006e22:	d001      	beq.n	8006e28 <cleanup_stdio+0x10>
 8006e24:	f001 ff36 	bl	8008c94 <_fflush_r>
 8006e28:	68a1      	ldr	r1, [r4, #8]
 8006e2a:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <cleanup_stdio+0x38>)
 8006e2c:	4299      	cmp	r1, r3
 8006e2e:	d002      	beq.n	8006e36 <cleanup_stdio+0x1e>
 8006e30:	4620      	mov	r0, r4
 8006e32:	f001 ff2f 	bl	8008c94 <_fflush_r>
 8006e36:	68e1      	ldr	r1, [r4, #12]
 8006e38:	4b06      	ldr	r3, [pc, #24]	@ (8006e54 <cleanup_stdio+0x3c>)
 8006e3a:	4299      	cmp	r1, r3
 8006e3c:	d004      	beq.n	8006e48 <cleanup_stdio+0x30>
 8006e3e:	4620      	mov	r0, r4
 8006e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e44:	f001 bf26 	b.w	8008c94 <_fflush_r>
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	2000076c 	.word	0x2000076c
 8006e50:	200007d4 	.word	0x200007d4
 8006e54:	2000083c 	.word	0x2000083c

08006e58 <global_stdio_init.part.0>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e88 <global_stdio_init.part.0+0x30>)
 8006e5c:	4c0b      	ldr	r4, [pc, #44]	@ (8006e8c <global_stdio_init.part.0+0x34>)
 8006e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e90 <global_stdio_init.part.0+0x38>)
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	4620      	mov	r0, r4
 8006e64:	2200      	movs	r2, #0
 8006e66:	2104      	movs	r1, #4
 8006e68:	f7ff ff94 	bl	8006d94 <std>
 8006e6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e70:	2201      	movs	r2, #1
 8006e72:	2109      	movs	r1, #9
 8006e74:	f7ff ff8e 	bl	8006d94 <std>
 8006e78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e82:	2112      	movs	r1, #18
 8006e84:	f7ff bf86 	b.w	8006d94 <std>
 8006e88:	200008a4 	.word	0x200008a4
 8006e8c:	2000076c 	.word	0x2000076c
 8006e90:	08006e01 	.word	0x08006e01

08006e94 <__sfp_lock_acquire>:
 8006e94:	4801      	ldr	r0, [pc, #4]	@ (8006e9c <__sfp_lock_acquire+0x8>)
 8006e96:	f000 ba4a 	b.w	800732e <__retarget_lock_acquire_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	200008ad 	.word	0x200008ad

08006ea0 <__sfp_lock_release>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	@ (8006ea8 <__sfp_lock_release+0x8>)
 8006ea2:	f000 ba45 	b.w	8007330 <__retarget_lock_release_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	200008ad 	.word	0x200008ad

08006eac <__sinit>:
 8006eac:	b510      	push	{r4, lr}
 8006eae:	4604      	mov	r4, r0
 8006eb0:	f7ff fff0 	bl	8006e94 <__sfp_lock_acquire>
 8006eb4:	6a23      	ldr	r3, [r4, #32]
 8006eb6:	b11b      	cbz	r3, 8006ec0 <__sinit+0x14>
 8006eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ebc:	f7ff bff0 	b.w	8006ea0 <__sfp_lock_release>
 8006ec0:	4b04      	ldr	r3, [pc, #16]	@ (8006ed4 <__sinit+0x28>)
 8006ec2:	6223      	str	r3, [r4, #32]
 8006ec4:	4b04      	ldr	r3, [pc, #16]	@ (8006ed8 <__sinit+0x2c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f5      	bne.n	8006eb8 <__sinit+0xc>
 8006ecc:	f7ff ffc4 	bl	8006e58 <global_stdio_init.part.0>
 8006ed0:	e7f2      	b.n	8006eb8 <__sinit+0xc>
 8006ed2:	bf00      	nop
 8006ed4:	08006e19 	.word	0x08006e19
 8006ed8:	200008a4 	.word	0x200008a4

08006edc <_fwalk_sglue>:
 8006edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	4688      	mov	r8, r1
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eec:	f1b9 0901 	subs.w	r9, r9, #1
 8006ef0:	d505      	bpl.n	8006efe <_fwalk_sglue+0x22>
 8006ef2:	6824      	ldr	r4, [r4, #0]
 8006ef4:	2c00      	cmp	r4, #0
 8006ef6:	d1f7      	bne.n	8006ee8 <_fwalk_sglue+0xc>
 8006ef8:	4630      	mov	r0, r6
 8006efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efe:	89ab      	ldrh	r3, [r5, #12]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d907      	bls.n	8006f14 <_fwalk_sglue+0x38>
 8006f04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	d003      	beq.n	8006f14 <_fwalk_sglue+0x38>
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4638      	mov	r0, r7
 8006f10:	47c0      	blx	r8
 8006f12:	4306      	orrs	r6, r0
 8006f14:	3568      	adds	r5, #104	@ 0x68
 8006f16:	e7e9      	b.n	8006eec <_fwalk_sglue+0x10>

08006f18 <_puts_r>:
 8006f18:	6a03      	ldr	r3, [r0, #32]
 8006f1a:	b570      	push	{r4, r5, r6, lr}
 8006f1c:	6884      	ldr	r4, [r0, #8]
 8006f1e:	4605      	mov	r5, r0
 8006f20:	460e      	mov	r6, r1
 8006f22:	b90b      	cbnz	r3, 8006f28 <_puts_r+0x10>
 8006f24:	f7ff ffc2 	bl	8006eac <__sinit>
 8006f28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f2a:	07db      	lsls	r3, r3, #31
 8006f2c:	d405      	bmi.n	8006f3a <_puts_r+0x22>
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	0598      	lsls	r0, r3, #22
 8006f32:	d402      	bmi.n	8006f3a <_puts_r+0x22>
 8006f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f36:	f000 f9fa 	bl	800732e <__retarget_lock_acquire_recursive>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	0719      	lsls	r1, r3, #28
 8006f3e:	d502      	bpl.n	8006f46 <_puts_r+0x2e>
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d135      	bne.n	8006fb2 <_puts_r+0x9a>
 8006f46:	4621      	mov	r1, r4
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f000 f91d 	bl	8007188 <__swsetup_r>
 8006f4e:	b380      	cbz	r0, 8006fb2 <_puts_r+0x9a>
 8006f50:	f04f 35ff 	mov.w	r5, #4294967295
 8006f54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f56:	07da      	lsls	r2, r3, #31
 8006f58:	d405      	bmi.n	8006f66 <_puts_r+0x4e>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	059b      	lsls	r3, r3, #22
 8006f5e:	d402      	bmi.n	8006f66 <_puts_r+0x4e>
 8006f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f62:	f000 f9e5 	bl	8007330 <__retarget_lock_release_recursive>
 8006f66:	4628      	mov	r0, r5
 8006f68:	bd70      	pop	{r4, r5, r6, pc}
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da04      	bge.n	8006f78 <_puts_r+0x60>
 8006f6e:	69a2      	ldr	r2, [r4, #24]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	dc17      	bgt.n	8006fa4 <_puts_r+0x8c>
 8006f74:	290a      	cmp	r1, #10
 8006f76:	d015      	beq.n	8006fa4 <_puts_r+0x8c>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	6022      	str	r2, [r4, #0]
 8006f7e:	7019      	strb	r1, [r3, #0]
 8006f80:	68a3      	ldr	r3, [r4, #8]
 8006f82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f86:	3b01      	subs	r3, #1
 8006f88:	60a3      	str	r3, [r4, #8]
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d1ed      	bne.n	8006f6a <_puts_r+0x52>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	da11      	bge.n	8006fb6 <_puts_r+0x9e>
 8006f92:	4622      	mov	r2, r4
 8006f94:	210a      	movs	r1, #10
 8006f96:	4628      	mov	r0, r5
 8006f98:	f000 f8b7 	bl	800710a <__swbuf_r>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d0d7      	beq.n	8006f50 <_puts_r+0x38>
 8006fa0:	250a      	movs	r5, #10
 8006fa2:	e7d7      	b.n	8006f54 <_puts_r+0x3c>
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 f8af 	bl	800710a <__swbuf_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d1e7      	bne.n	8006f80 <_puts_r+0x68>
 8006fb0:	e7ce      	b.n	8006f50 <_puts_r+0x38>
 8006fb2:	3e01      	subs	r6, #1
 8006fb4:	e7e4      	b.n	8006f80 <_puts_r+0x68>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	6022      	str	r2, [r4, #0]
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	e7ee      	b.n	8006fa0 <_puts_r+0x88>
	...

08006fc4 <puts>:
 8006fc4:	4b02      	ldr	r3, [pc, #8]	@ (8006fd0 <puts+0xc>)
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f7ff bfa5 	b.w	8006f18 <_puts_r>
 8006fce:	bf00      	nop
 8006fd0:	20000024 	.word	0x20000024

08006fd4 <sniprintf>:
 8006fd4:	b40c      	push	{r2, r3}
 8006fd6:	b530      	push	{r4, r5, lr}
 8006fd8:	4b18      	ldr	r3, [pc, #96]	@ (800703c <sniprintf+0x68>)
 8006fda:	1e0c      	subs	r4, r1, #0
 8006fdc:	681d      	ldr	r5, [r3, #0]
 8006fde:	b09d      	sub	sp, #116	@ 0x74
 8006fe0:	da08      	bge.n	8006ff4 <sniprintf+0x20>
 8006fe2:	238b      	movs	r3, #139	@ 0x8b
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fea:	b01d      	add	sp, #116	@ 0x74
 8006fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ff0:	b002      	add	sp, #8
 8006ff2:	4770      	bx	lr
 8006ff4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ff8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007002:	bf14      	ite	ne
 8007004:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007008:	4623      	moveq	r3, r4
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	9307      	str	r3, [sp, #28]
 800700e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007012:	9002      	str	r0, [sp, #8]
 8007014:	9006      	str	r0, [sp, #24]
 8007016:	f8ad 3016 	strh.w	r3, [sp, #22]
 800701a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800701c:	ab21      	add	r3, sp, #132	@ 0x84
 800701e:	a902      	add	r1, sp, #8
 8007020:	4628      	mov	r0, r5
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	f001 fcb6 	bl	8008994 <_svfiprintf_r>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	bfbc      	itt	lt
 800702c:	238b      	movlt	r3, #139	@ 0x8b
 800702e:	602b      	strlt	r3, [r5, #0]
 8007030:	2c00      	cmp	r4, #0
 8007032:	d0da      	beq.n	8006fea <sniprintf+0x16>
 8007034:	9b02      	ldr	r3, [sp, #8]
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e7d6      	b.n	8006fea <sniprintf+0x16>
 800703c:	20000024 	.word	0x20000024

08007040 <siprintf>:
 8007040:	b40e      	push	{r1, r2, r3}
 8007042:	b510      	push	{r4, lr}
 8007044:	b09d      	sub	sp, #116	@ 0x74
 8007046:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007048:	9002      	str	r0, [sp, #8]
 800704a:	9006      	str	r0, [sp, #24]
 800704c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007050:	480a      	ldr	r0, [pc, #40]	@ (800707c <siprintf+0x3c>)
 8007052:	9107      	str	r1, [sp, #28]
 8007054:	9104      	str	r1, [sp, #16]
 8007056:	490a      	ldr	r1, [pc, #40]	@ (8007080 <siprintf+0x40>)
 8007058:	f853 2b04 	ldr.w	r2, [r3], #4
 800705c:	9105      	str	r1, [sp, #20]
 800705e:	2400      	movs	r4, #0
 8007060:	a902      	add	r1, sp, #8
 8007062:	6800      	ldr	r0, [r0, #0]
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007068:	f001 fc94 	bl	8008994 <_svfiprintf_r>
 800706c:	9b02      	ldr	r3, [sp, #8]
 800706e:	701c      	strb	r4, [r3, #0]
 8007070:	b01d      	add	sp, #116	@ 0x74
 8007072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007076:	b003      	add	sp, #12
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000024 	.word	0x20000024
 8007080:	ffff0208 	.word	0xffff0208

08007084 <__sread>:
 8007084:	b510      	push	{r4, lr}
 8007086:	460c      	mov	r4, r1
 8007088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708c:	f000 f900 	bl	8007290 <_read_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	bfab      	itete	ge
 8007094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007096:	89a3      	ldrhlt	r3, [r4, #12]
 8007098:	181b      	addge	r3, r3, r0
 800709a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800709e:	bfac      	ite	ge
 80070a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80070a2:	81a3      	strhlt	r3, [r4, #12]
 80070a4:	bd10      	pop	{r4, pc}

080070a6 <__swrite>:
 80070a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070aa:	461f      	mov	r7, r3
 80070ac:	898b      	ldrh	r3, [r1, #12]
 80070ae:	05db      	lsls	r3, r3, #23
 80070b0:	4605      	mov	r5, r0
 80070b2:	460c      	mov	r4, r1
 80070b4:	4616      	mov	r6, r2
 80070b6:	d505      	bpl.n	80070c4 <__swrite+0x1e>
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	2302      	movs	r3, #2
 80070be:	2200      	movs	r2, #0
 80070c0:	f000 f8d4 	bl	800726c <_lseek_r>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	4632      	mov	r2, r6
 80070d2:	463b      	mov	r3, r7
 80070d4:	4628      	mov	r0, r5
 80070d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070da:	f000 b8eb 	b.w	80072b4 <_write_r>

080070de <__sseek>:
 80070de:	b510      	push	{r4, lr}
 80070e0:	460c      	mov	r4, r1
 80070e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e6:	f000 f8c1 	bl	800726c <_lseek_r>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	bf15      	itete	ne
 80070f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070fa:	81a3      	strheq	r3, [r4, #12]
 80070fc:	bf18      	it	ne
 80070fe:	81a3      	strhne	r3, [r4, #12]
 8007100:	bd10      	pop	{r4, pc}

08007102 <__sclose>:
 8007102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007106:	f000 b8a1 	b.w	800724c <_close_r>

0800710a <__swbuf_r>:
 800710a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710c:	460e      	mov	r6, r1
 800710e:	4614      	mov	r4, r2
 8007110:	4605      	mov	r5, r0
 8007112:	b118      	cbz	r0, 800711c <__swbuf_r+0x12>
 8007114:	6a03      	ldr	r3, [r0, #32]
 8007116:	b90b      	cbnz	r3, 800711c <__swbuf_r+0x12>
 8007118:	f7ff fec8 	bl	8006eac <__sinit>
 800711c:	69a3      	ldr	r3, [r4, #24]
 800711e:	60a3      	str	r3, [r4, #8]
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	071a      	lsls	r2, r3, #28
 8007124:	d501      	bpl.n	800712a <__swbuf_r+0x20>
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	b943      	cbnz	r3, 800713c <__swbuf_r+0x32>
 800712a:	4621      	mov	r1, r4
 800712c:	4628      	mov	r0, r5
 800712e:	f000 f82b 	bl	8007188 <__swsetup_r>
 8007132:	b118      	cbz	r0, 800713c <__swbuf_r+0x32>
 8007134:	f04f 37ff 	mov.w	r7, #4294967295
 8007138:	4638      	mov	r0, r7
 800713a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	6922      	ldr	r2, [r4, #16]
 8007140:	1a98      	subs	r0, r3, r2
 8007142:	6963      	ldr	r3, [r4, #20]
 8007144:	b2f6      	uxtb	r6, r6
 8007146:	4283      	cmp	r3, r0
 8007148:	4637      	mov	r7, r6
 800714a:	dc05      	bgt.n	8007158 <__swbuf_r+0x4e>
 800714c:	4621      	mov	r1, r4
 800714e:	4628      	mov	r0, r5
 8007150:	f001 fda0 	bl	8008c94 <_fflush_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	d1ed      	bne.n	8007134 <__swbuf_r+0x2a>
 8007158:	68a3      	ldr	r3, [r4, #8]
 800715a:	3b01      	subs	r3, #1
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	6022      	str	r2, [r4, #0]
 8007164:	701e      	strb	r6, [r3, #0]
 8007166:	6962      	ldr	r2, [r4, #20]
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	429a      	cmp	r2, r3
 800716c:	d004      	beq.n	8007178 <__swbuf_r+0x6e>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	07db      	lsls	r3, r3, #31
 8007172:	d5e1      	bpl.n	8007138 <__swbuf_r+0x2e>
 8007174:	2e0a      	cmp	r6, #10
 8007176:	d1df      	bne.n	8007138 <__swbuf_r+0x2e>
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f001 fd8a 	bl	8008c94 <_fflush_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	d0d9      	beq.n	8007138 <__swbuf_r+0x2e>
 8007184:	e7d6      	b.n	8007134 <__swbuf_r+0x2a>
	...

08007188 <__swsetup_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4b29      	ldr	r3, [pc, #164]	@ (8007230 <__swsetup_r+0xa8>)
 800718c:	4605      	mov	r5, r0
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	460c      	mov	r4, r1
 8007192:	b118      	cbz	r0, 800719c <__swsetup_r+0x14>
 8007194:	6a03      	ldr	r3, [r0, #32]
 8007196:	b90b      	cbnz	r3, 800719c <__swsetup_r+0x14>
 8007198:	f7ff fe88 	bl	8006eac <__sinit>
 800719c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a0:	0719      	lsls	r1, r3, #28
 80071a2:	d422      	bmi.n	80071ea <__swsetup_r+0x62>
 80071a4:	06da      	lsls	r2, r3, #27
 80071a6:	d407      	bmi.n	80071b8 <__swsetup_r+0x30>
 80071a8:	2209      	movs	r2, #9
 80071aa:	602a      	str	r2, [r5, #0]
 80071ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	f04f 30ff 	mov.w	r0, #4294967295
 80071b6:	e033      	b.n	8007220 <__swsetup_r+0x98>
 80071b8:	0758      	lsls	r0, r3, #29
 80071ba:	d512      	bpl.n	80071e2 <__swsetup_r+0x5a>
 80071bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071be:	b141      	cbz	r1, 80071d2 <__swsetup_r+0x4a>
 80071c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071c4:	4299      	cmp	r1, r3
 80071c6:	d002      	beq.n	80071ce <__swsetup_r+0x46>
 80071c8:	4628      	mov	r0, r5
 80071ca:	f000 ff0d 	bl	8007fe8 <_free_r>
 80071ce:	2300      	movs	r3, #0
 80071d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	2300      	movs	r3, #0
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f043 0308 	orr.w	r3, r3, #8
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	b94b      	cbnz	r3, 8007202 <__swsetup_r+0x7a>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f8:	d003      	beq.n	8007202 <__swsetup_r+0x7a>
 80071fa:	4621      	mov	r1, r4
 80071fc:	4628      	mov	r0, r5
 80071fe:	f001 fd97 	bl	8008d30 <__smakebuf_r>
 8007202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007206:	f013 0201 	ands.w	r2, r3, #1
 800720a:	d00a      	beq.n	8007222 <__swsetup_r+0x9a>
 800720c:	2200      	movs	r2, #0
 800720e:	60a2      	str	r2, [r4, #8]
 8007210:	6962      	ldr	r2, [r4, #20]
 8007212:	4252      	negs	r2, r2
 8007214:	61a2      	str	r2, [r4, #24]
 8007216:	6922      	ldr	r2, [r4, #16]
 8007218:	b942      	cbnz	r2, 800722c <__swsetup_r+0xa4>
 800721a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800721e:	d1c5      	bne.n	80071ac <__swsetup_r+0x24>
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	0799      	lsls	r1, r3, #30
 8007224:	bf58      	it	pl
 8007226:	6962      	ldrpl	r2, [r4, #20]
 8007228:	60a2      	str	r2, [r4, #8]
 800722a:	e7f4      	b.n	8007216 <__swsetup_r+0x8e>
 800722c:	2000      	movs	r0, #0
 800722e:	e7f7      	b.n	8007220 <__swsetup_r+0x98>
 8007230:	20000024 	.word	0x20000024

08007234 <memset>:
 8007234:	4402      	add	r2, r0
 8007236:	4603      	mov	r3, r0
 8007238:	4293      	cmp	r3, r2
 800723a:	d100      	bne.n	800723e <memset+0xa>
 800723c:	4770      	bx	lr
 800723e:	f803 1b01 	strb.w	r1, [r3], #1
 8007242:	e7f9      	b.n	8007238 <memset+0x4>

08007244 <_localeconv_r>:
 8007244:	4800      	ldr	r0, [pc, #0]	@ (8007248 <_localeconv_r+0x4>)
 8007246:	4770      	bx	lr
 8007248:	20000164 	.word	0x20000164

0800724c <_close_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d06      	ldr	r5, [pc, #24]	@ (8007268 <_close_r+0x1c>)
 8007250:	2300      	movs	r3, #0
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	f7fa ffde 	bl	8002218 <_close>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_close_r+0x1a>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_close_r+0x1a>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	200008a8 	.word	0x200008a8

0800726c <_lseek_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d07      	ldr	r5, [pc, #28]	@ (800728c <_lseek_r+0x20>)
 8007270:	4604      	mov	r4, r0
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	2200      	movs	r2, #0
 8007278:	602a      	str	r2, [r5, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	f7fa fff3 	bl	8002266 <_lseek>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_lseek_r+0x1e>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_lseek_r+0x1e>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	200008a8 	.word	0x200008a8

08007290 <_read_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4d07      	ldr	r5, [pc, #28]	@ (80072b0 <_read_r+0x20>)
 8007294:	4604      	mov	r4, r0
 8007296:	4608      	mov	r0, r1
 8007298:	4611      	mov	r1, r2
 800729a:	2200      	movs	r2, #0
 800729c:	602a      	str	r2, [r5, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	f7fa ff81 	bl	80021a6 <_read>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_read_r+0x1e>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_read_r+0x1e>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	200008a8 	.word	0x200008a8

080072b4 <_write_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4d07      	ldr	r5, [pc, #28]	@ (80072d4 <_write_r+0x20>)
 80072b8:	4604      	mov	r4, r0
 80072ba:	4608      	mov	r0, r1
 80072bc:	4611      	mov	r1, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	602a      	str	r2, [r5, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7fa ff8c 	bl	80021e0 <_write>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_write_r+0x1e>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_write_r+0x1e>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	200008a8 	.word	0x200008a8

080072d8 <__errno>:
 80072d8:	4b01      	ldr	r3, [pc, #4]	@ (80072e0 <__errno+0x8>)
 80072da:	6818      	ldr	r0, [r3, #0]
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000024 	.word	0x20000024

080072e4 <__libc_init_array>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	4d0d      	ldr	r5, [pc, #52]	@ (800731c <__libc_init_array+0x38>)
 80072e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007320 <__libc_init_array+0x3c>)
 80072ea:	1b64      	subs	r4, r4, r5
 80072ec:	10a4      	asrs	r4, r4, #2
 80072ee:	2600      	movs	r6, #0
 80072f0:	42a6      	cmp	r6, r4
 80072f2:	d109      	bne.n	8007308 <__libc_init_array+0x24>
 80072f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007324 <__libc_init_array+0x40>)
 80072f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007328 <__libc_init_array+0x44>)
 80072f8:	f001 ffd6 	bl	80092a8 <_init>
 80072fc:	1b64      	subs	r4, r4, r5
 80072fe:	10a4      	asrs	r4, r4, #2
 8007300:	2600      	movs	r6, #0
 8007302:	42a6      	cmp	r6, r4
 8007304:	d105      	bne.n	8007312 <__libc_init_array+0x2e>
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	f855 3b04 	ldr.w	r3, [r5], #4
 800730c:	4798      	blx	r3
 800730e:	3601      	adds	r6, #1
 8007310:	e7ee      	b.n	80072f0 <__libc_init_array+0xc>
 8007312:	f855 3b04 	ldr.w	r3, [r5], #4
 8007316:	4798      	blx	r3
 8007318:	3601      	adds	r6, #1
 800731a:	e7f2      	b.n	8007302 <__libc_init_array+0x1e>
 800731c:	08009834 	.word	0x08009834
 8007320:	08009834 	.word	0x08009834
 8007324:	08009834 	.word	0x08009834
 8007328:	08009838 	.word	0x08009838

0800732c <__retarget_lock_init_recursive>:
 800732c:	4770      	bx	lr

0800732e <__retarget_lock_acquire_recursive>:
 800732e:	4770      	bx	lr

08007330 <__retarget_lock_release_recursive>:
 8007330:	4770      	bx	lr

08007332 <quorem>:
 8007332:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007336:	6903      	ldr	r3, [r0, #16]
 8007338:	690c      	ldr	r4, [r1, #16]
 800733a:	42a3      	cmp	r3, r4
 800733c:	4607      	mov	r7, r0
 800733e:	db7e      	blt.n	800743e <quorem+0x10c>
 8007340:	3c01      	subs	r4, #1
 8007342:	f101 0814 	add.w	r8, r1, #20
 8007346:	00a3      	lsls	r3, r4, #2
 8007348:	f100 0514 	add.w	r5, r0, #20
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800735c:	3301      	adds	r3, #1
 800735e:	429a      	cmp	r2, r3
 8007360:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007364:	fbb2 f6f3 	udiv	r6, r2, r3
 8007368:	d32e      	bcc.n	80073c8 <quorem+0x96>
 800736a:	f04f 0a00 	mov.w	sl, #0
 800736e:	46c4      	mov	ip, r8
 8007370:	46ae      	mov	lr, r5
 8007372:	46d3      	mov	fp, sl
 8007374:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007378:	b298      	uxth	r0, r3
 800737a:	fb06 a000 	mla	r0, r6, r0, sl
 800737e:	0c02      	lsrs	r2, r0, #16
 8007380:	0c1b      	lsrs	r3, r3, #16
 8007382:	fb06 2303 	mla	r3, r6, r3, r2
 8007386:	f8de 2000 	ldr.w	r2, [lr]
 800738a:	b280      	uxth	r0, r0
 800738c:	b292      	uxth	r2, r2
 800738e:	1a12      	subs	r2, r2, r0
 8007390:	445a      	add	r2, fp
 8007392:	f8de 0000 	ldr.w	r0, [lr]
 8007396:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800739a:	b29b      	uxth	r3, r3
 800739c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80073a0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80073a4:	b292      	uxth	r2, r2
 80073a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80073aa:	45e1      	cmp	r9, ip
 80073ac:	f84e 2b04 	str.w	r2, [lr], #4
 80073b0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80073b4:	d2de      	bcs.n	8007374 <quorem+0x42>
 80073b6:	9b00      	ldr	r3, [sp, #0]
 80073b8:	58eb      	ldr	r3, [r5, r3]
 80073ba:	b92b      	cbnz	r3, 80073c8 <quorem+0x96>
 80073bc:	9b01      	ldr	r3, [sp, #4]
 80073be:	3b04      	subs	r3, #4
 80073c0:	429d      	cmp	r5, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	d32f      	bcc.n	8007426 <quorem+0xf4>
 80073c6:	613c      	str	r4, [r7, #16]
 80073c8:	4638      	mov	r0, r7
 80073ca:	f001 f97f 	bl	80086cc <__mcmp>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	db25      	blt.n	800741e <quorem+0xec>
 80073d2:	4629      	mov	r1, r5
 80073d4:	2000      	movs	r0, #0
 80073d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80073da:	f8d1 c000 	ldr.w	ip, [r1]
 80073de:	fa1f fe82 	uxth.w	lr, r2
 80073e2:	fa1f f38c 	uxth.w	r3, ip
 80073e6:	eba3 030e 	sub.w	r3, r3, lr
 80073ea:	4403      	add	r3, r0
 80073ec:	0c12      	lsrs	r2, r2, #16
 80073ee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80073f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073fc:	45c1      	cmp	r9, r8
 80073fe:	f841 3b04 	str.w	r3, [r1], #4
 8007402:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007406:	d2e6      	bcs.n	80073d6 <quorem+0xa4>
 8007408:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800740c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007410:	b922      	cbnz	r2, 800741c <quorem+0xea>
 8007412:	3b04      	subs	r3, #4
 8007414:	429d      	cmp	r5, r3
 8007416:	461a      	mov	r2, r3
 8007418:	d30b      	bcc.n	8007432 <quorem+0x100>
 800741a:	613c      	str	r4, [r7, #16]
 800741c:	3601      	adds	r6, #1
 800741e:	4630      	mov	r0, r6
 8007420:	b003      	add	sp, #12
 8007422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007426:	6812      	ldr	r2, [r2, #0]
 8007428:	3b04      	subs	r3, #4
 800742a:	2a00      	cmp	r2, #0
 800742c:	d1cb      	bne.n	80073c6 <quorem+0x94>
 800742e:	3c01      	subs	r4, #1
 8007430:	e7c6      	b.n	80073c0 <quorem+0x8e>
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	3b04      	subs	r3, #4
 8007436:	2a00      	cmp	r2, #0
 8007438:	d1ef      	bne.n	800741a <quorem+0xe8>
 800743a:	3c01      	subs	r4, #1
 800743c:	e7ea      	b.n	8007414 <quorem+0xe2>
 800743e:	2000      	movs	r0, #0
 8007440:	e7ee      	b.n	8007420 <quorem+0xee>
 8007442:	0000      	movs	r0, r0
 8007444:	0000      	movs	r0, r0
	...

08007448 <_dtoa_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	69c7      	ldr	r7, [r0, #28]
 800744e:	b097      	sub	sp, #92	@ 0x5c
 8007450:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007454:	ec55 4b10 	vmov	r4, r5, d0
 8007458:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800745a:	9107      	str	r1, [sp, #28]
 800745c:	4681      	mov	r9, r0
 800745e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007460:	9311      	str	r3, [sp, #68]	@ 0x44
 8007462:	b97f      	cbnz	r7, 8007484 <_dtoa_r+0x3c>
 8007464:	2010      	movs	r0, #16
 8007466:	f000 fe09 	bl	800807c <malloc>
 800746a:	4602      	mov	r2, r0
 800746c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007470:	b920      	cbnz	r0, 800747c <_dtoa_r+0x34>
 8007472:	4ba9      	ldr	r3, [pc, #676]	@ (8007718 <_dtoa_r+0x2d0>)
 8007474:	21ef      	movs	r1, #239	@ 0xef
 8007476:	48a9      	ldr	r0, [pc, #676]	@ (800771c <_dtoa_r+0x2d4>)
 8007478:	f001 fcf0 	bl	8008e5c <__assert_func>
 800747c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007480:	6007      	str	r7, [r0, #0]
 8007482:	60c7      	str	r7, [r0, #12]
 8007484:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007488:	6819      	ldr	r1, [r3, #0]
 800748a:	b159      	cbz	r1, 80074a4 <_dtoa_r+0x5c>
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	604a      	str	r2, [r1, #4]
 8007490:	2301      	movs	r3, #1
 8007492:	4093      	lsls	r3, r2
 8007494:	608b      	str	r3, [r1, #8]
 8007496:	4648      	mov	r0, r9
 8007498:	f000 fee6 	bl	8008268 <_Bfree>
 800749c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	1e2b      	subs	r3, r5, #0
 80074a6:	bfb9      	ittee	lt
 80074a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80074ac:	9305      	strlt	r3, [sp, #20]
 80074ae:	2300      	movge	r3, #0
 80074b0:	6033      	strge	r3, [r6, #0]
 80074b2:	9f05      	ldr	r7, [sp, #20]
 80074b4:	4b9a      	ldr	r3, [pc, #616]	@ (8007720 <_dtoa_r+0x2d8>)
 80074b6:	bfbc      	itt	lt
 80074b8:	2201      	movlt	r2, #1
 80074ba:	6032      	strlt	r2, [r6, #0]
 80074bc:	43bb      	bics	r3, r7
 80074be:	d112      	bne.n	80074e6 <_dtoa_r+0x9e>
 80074c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80074c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074cc:	4323      	orrs	r3, r4
 80074ce:	f000 855a 	beq.w	8007f86 <_dtoa_r+0xb3e>
 80074d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007734 <_dtoa_r+0x2ec>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 855c 	beq.w	8007f96 <_dtoa_r+0xb4e>
 80074de:	f10a 0303 	add.w	r3, sl, #3
 80074e2:	f000 bd56 	b.w	8007f92 <_dtoa_r+0xb4a>
 80074e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80074ea:	2200      	movs	r2, #0
 80074ec:	ec51 0b17 	vmov	r0, r1, d7
 80074f0:	2300      	movs	r3, #0
 80074f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80074f6:	f7f9 fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 80074fa:	4680      	mov	r8, r0
 80074fc:	b158      	cbz	r0, 8007516 <_dtoa_r+0xce>
 80074fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007500:	2301      	movs	r3, #1
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007506:	b113      	cbz	r3, 800750e <_dtoa_r+0xc6>
 8007508:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800750a:	4b86      	ldr	r3, [pc, #536]	@ (8007724 <_dtoa_r+0x2dc>)
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007738 <_dtoa_r+0x2f0>
 8007512:	f000 bd40 	b.w	8007f96 <_dtoa_r+0xb4e>
 8007516:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800751a:	aa14      	add	r2, sp, #80	@ 0x50
 800751c:	a915      	add	r1, sp, #84	@ 0x54
 800751e:	4648      	mov	r0, r9
 8007520:	f001 f984 	bl	800882c <__d2b>
 8007524:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007528:	9002      	str	r0, [sp, #8]
 800752a:	2e00      	cmp	r6, #0
 800752c:	d078      	beq.n	8007620 <_dtoa_r+0x1d8>
 800752e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007530:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800753c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007540:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007544:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007548:	4619      	mov	r1, r3
 800754a:	2200      	movs	r2, #0
 800754c:	4b76      	ldr	r3, [pc, #472]	@ (8007728 <_dtoa_r+0x2e0>)
 800754e:	f7f8 fe9b 	bl	8000288 <__aeabi_dsub>
 8007552:	a36b      	add	r3, pc, #428	@ (adr r3, 8007700 <_dtoa_r+0x2b8>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f9 f84e 	bl	80005f8 <__aeabi_dmul>
 800755c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007708 <_dtoa_r+0x2c0>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f8 fe93 	bl	800028c <__adddf3>
 8007566:	4604      	mov	r4, r0
 8007568:	4630      	mov	r0, r6
 800756a:	460d      	mov	r5, r1
 800756c:	f7f8 ffda 	bl	8000524 <__aeabi_i2d>
 8007570:	a367      	add	r3, pc, #412	@ (adr r3, 8007710 <_dtoa_r+0x2c8>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f7f9 f83f 	bl	80005f8 <__aeabi_dmul>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f8 fe83 	bl	800028c <__adddf3>
 8007586:	4604      	mov	r4, r0
 8007588:	460d      	mov	r5, r1
 800758a:	f7f9 fae5 	bl	8000b58 <__aeabi_d2iz>
 800758e:	2200      	movs	r2, #0
 8007590:	4607      	mov	r7, r0
 8007592:	2300      	movs	r3, #0
 8007594:	4620      	mov	r0, r4
 8007596:	4629      	mov	r1, r5
 8007598:	f7f9 faa0 	bl	8000adc <__aeabi_dcmplt>
 800759c:	b140      	cbz	r0, 80075b0 <_dtoa_r+0x168>
 800759e:	4638      	mov	r0, r7
 80075a0:	f7f8 ffc0 	bl	8000524 <__aeabi_i2d>
 80075a4:	4622      	mov	r2, r4
 80075a6:	462b      	mov	r3, r5
 80075a8:	f7f9 fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ac:	b900      	cbnz	r0, 80075b0 <_dtoa_r+0x168>
 80075ae:	3f01      	subs	r7, #1
 80075b0:	2f16      	cmp	r7, #22
 80075b2:	d852      	bhi.n	800765a <_dtoa_r+0x212>
 80075b4:	4b5d      	ldr	r3, [pc, #372]	@ (800772c <_dtoa_r+0x2e4>)
 80075b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80075c2:	f7f9 fa8b 	bl	8000adc <__aeabi_dcmplt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d049      	beq.n	800765e <_dtoa_r+0x216>
 80075ca:	3f01      	subs	r7, #1
 80075cc:	2300      	movs	r3, #0
 80075ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80075d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075d2:	1b9b      	subs	r3, r3, r6
 80075d4:	1e5a      	subs	r2, r3, #1
 80075d6:	bf45      	ittet	mi
 80075d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80075dc:	9300      	strmi	r3, [sp, #0]
 80075de:	2300      	movpl	r3, #0
 80075e0:	2300      	movmi	r3, #0
 80075e2:	9206      	str	r2, [sp, #24]
 80075e4:	bf54      	ite	pl
 80075e6:	9300      	strpl	r3, [sp, #0]
 80075e8:	9306      	strmi	r3, [sp, #24]
 80075ea:	2f00      	cmp	r7, #0
 80075ec:	db39      	blt.n	8007662 <_dtoa_r+0x21a>
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80075f2:	443b      	add	r3, r7
 80075f4:	9306      	str	r3, [sp, #24]
 80075f6:	2300      	movs	r3, #0
 80075f8:	9308      	str	r3, [sp, #32]
 80075fa:	9b07      	ldr	r3, [sp, #28]
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	d863      	bhi.n	80076c8 <_dtoa_r+0x280>
 8007600:	2b05      	cmp	r3, #5
 8007602:	bfc4      	itt	gt
 8007604:	3b04      	subgt	r3, #4
 8007606:	9307      	strgt	r3, [sp, #28]
 8007608:	9b07      	ldr	r3, [sp, #28]
 800760a:	f1a3 0302 	sub.w	r3, r3, #2
 800760e:	bfcc      	ite	gt
 8007610:	2400      	movgt	r4, #0
 8007612:	2401      	movle	r4, #1
 8007614:	2b03      	cmp	r3, #3
 8007616:	d863      	bhi.n	80076e0 <_dtoa_r+0x298>
 8007618:	e8df f003 	tbb	[pc, r3]
 800761c:	2b375452 	.word	0x2b375452
 8007620:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007624:	441e      	add	r6, r3
 8007626:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800762a:	2b20      	cmp	r3, #32
 800762c:	bfc1      	itttt	gt
 800762e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007632:	409f      	lslgt	r7, r3
 8007634:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007638:	fa24 f303 	lsrgt.w	r3, r4, r3
 800763c:	bfd6      	itet	le
 800763e:	f1c3 0320 	rsble	r3, r3, #32
 8007642:	ea47 0003 	orrgt.w	r0, r7, r3
 8007646:	fa04 f003 	lslle.w	r0, r4, r3
 800764a:	f7f8 ff5b 	bl	8000504 <__aeabi_ui2d>
 800764e:	2201      	movs	r2, #1
 8007650:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007654:	3e01      	subs	r6, #1
 8007656:	9212      	str	r2, [sp, #72]	@ 0x48
 8007658:	e776      	b.n	8007548 <_dtoa_r+0x100>
 800765a:	2301      	movs	r3, #1
 800765c:	e7b7      	b.n	80075ce <_dtoa_r+0x186>
 800765e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007660:	e7b6      	b.n	80075d0 <_dtoa_r+0x188>
 8007662:	9b00      	ldr	r3, [sp, #0]
 8007664:	1bdb      	subs	r3, r3, r7
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	427b      	negs	r3, r7
 800766a:	9308      	str	r3, [sp, #32]
 800766c:	2300      	movs	r3, #0
 800766e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007670:	e7c3      	b.n	80075fa <_dtoa_r+0x1b2>
 8007672:	2301      	movs	r3, #1
 8007674:	9309      	str	r3, [sp, #36]	@ 0x24
 8007676:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007678:	eb07 0b03 	add.w	fp, r7, r3
 800767c:	f10b 0301 	add.w	r3, fp, #1
 8007680:	2b01      	cmp	r3, #1
 8007682:	9303      	str	r3, [sp, #12]
 8007684:	bfb8      	it	lt
 8007686:	2301      	movlt	r3, #1
 8007688:	e006      	b.n	8007698 <_dtoa_r+0x250>
 800768a:	2301      	movs	r3, #1
 800768c:	9309      	str	r3, [sp, #36]	@ 0x24
 800768e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007690:	2b00      	cmp	r3, #0
 8007692:	dd28      	ble.n	80076e6 <_dtoa_r+0x29e>
 8007694:	469b      	mov	fp, r3
 8007696:	9303      	str	r3, [sp, #12]
 8007698:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800769c:	2100      	movs	r1, #0
 800769e:	2204      	movs	r2, #4
 80076a0:	f102 0514 	add.w	r5, r2, #20
 80076a4:	429d      	cmp	r5, r3
 80076a6:	d926      	bls.n	80076f6 <_dtoa_r+0x2ae>
 80076a8:	6041      	str	r1, [r0, #4]
 80076aa:	4648      	mov	r0, r9
 80076ac:	f000 fd9c 	bl	80081e8 <_Balloc>
 80076b0:	4682      	mov	sl, r0
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d142      	bne.n	800773c <_dtoa_r+0x2f4>
 80076b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007730 <_dtoa_r+0x2e8>)
 80076b8:	4602      	mov	r2, r0
 80076ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80076be:	e6da      	b.n	8007476 <_dtoa_r+0x2e>
 80076c0:	2300      	movs	r3, #0
 80076c2:	e7e3      	b.n	800768c <_dtoa_r+0x244>
 80076c4:	2300      	movs	r3, #0
 80076c6:	e7d5      	b.n	8007674 <_dtoa_r+0x22c>
 80076c8:	2401      	movs	r4, #1
 80076ca:	2300      	movs	r3, #0
 80076cc:	9307      	str	r3, [sp, #28]
 80076ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80076d0:	f04f 3bff 	mov.w	fp, #4294967295
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80076da:	2312      	movs	r3, #18
 80076dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80076de:	e7db      	b.n	8007698 <_dtoa_r+0x250>
 80076e0:	2301      	movs	r3, #1
 80076e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e4:	e7f4      	b.n	80076d0 <_dtoa_r+0x288>
 80076e6:	f04f 0b01 	mov.w	fp, #1
 80076ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80076ee:	465b      	mov	r3, fp
 80076f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80076f4:	e7d0      	b.n	8007698 <_dtoa_r+0x250>
 80076f6:	3101      	adds	r1, #1
 80076f8:	0052      	lsls	r2, r2, #1
 80076fa:	e7d1      	b.n	80076a0 <_dtoa_r+0x258>
 80076fc:	f3af 8000 	nop.w
 8007700:	636f4361 	.word	0x636f4361
 8007704:	3fd287a7 	.word	0x3fd287a7
 8007708:	8b60c8b3 	.word	0x8b60c8b3
 800770c:	3fc68a28 	.word	0x3fc68a28
 8007710:	509f79fb 	.word	0x509f79fb
 8007714:	3fd34413 	.word	0x3fd34413
 8007718:	080094f9 	.word	0x080094f9
 800771c:	08009510 	.word	0x08009510
 8007720:	7ff00000 	.word	0x7ff00000
 8007724:	080094c9 	.word	0x080094c9
 8007728:	3ff80000 	.word	0x3ff80000
 800772c:	08009660 	.word	0x08009660
 8007730:	08009568 	.word	0x08009568
 8007734:	080094f5 	.word	0x080094f5
 8007738:	080094c8 	.word	0x080094c8
 800773c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007740:	6018      	str	r0, [r3, #0]
 8007742:	9b03      	ldr	r3, [sp, #12]
 8007744:	2b0e      	cmp	r3, #14
 8007746:	f200 80a1 	bhi.w	800788c <_dtoa_r+0x444>
 800774a:	2c00      	cmp	r4, #0
 800774c:	f000 809e 	beq.w	800788c <_dtoa_r+0x444>
 8007750:	2f00      	cmp	r7, #0
 8007752:	dd33      	ble.n	80077bc <_dtoa_r+0x374>
 8007754:	4b9c      	ldr	r3, [pc, #624]	@ (80079c8 <_dtoa_r+0x580>)
 8007756:	f007 020f 	and.w	r2, r7, #15
 800775a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800775e:	ed93 7b00 	vldr	d7, [r3]
 8007762:	05f8      	lsls	r0, r7, #23
 8007764:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007768:	ea4f 1427 	mov.w	r4, r7, asr #4
 800776c:	d516      	bpl.n	800779c <_dtoa_r+0x354>
 800776e:	4b97      	ldr	r3, [pc, #604]	@ (80079cc <_dtoa_r+0x584>)
 8007770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007778:	f7f9 f868 	bl	800084c <__aeabi_ddiv>
 800777c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007780:	f004 040f 	and.w	r4, r4, #15
 8007784:	2603      	movs	r6, #3
 8007786:	4d91      	ldr	r5, [pc, #580]	@ (80079cc <_dtoa_r+0x584>)
 8007788:	b954      	cbnz	r4, 80077a0 <_dtoa_r+0x358>
 800778a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800778e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007792:	f7f9 f85b 	bl	800084c <__aeabi_ddiv>
 8007796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800779a:	e028      	b.n	80077ee <_dtoa_r+0x3a6>
 800779c:	2602      	movs	r6, #2
 800779e:	e7f2      	b.n	8007786 <_dtoa_r+0x33e>
 80077a0:	07e1      	lsls	r1, r4, #31
 80077a2:	d508      	bpl.n	80077b6 <_dtoa_r+0x36e>
 80077a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80077a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077ac:	f7f8 ff24 	bl	80005f8 <__aeabi_dmul>
 80077b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077b4:	3601      	adds	r6, #1
 80077b6:	1064      	asrs	r4, r4, #1
 80077b8:	3508      	adds	r5, #8
 80077ba:	e7e5      	b.n	8007788 <_dtoa_r+0x340>
 80077bc:	f000 80af 	beq.w	800791e <_dtoa_r+0x4d6>
 80077c0:	427c      	negs	r4, r7
 80077c2:	4b81      	ldr	r3, [pc, #516]	@ (80079c8 <_dtoa_r+0x580>)
 80077c4:	4d81      	ldr	r5, [pc, #516]	@ (80079cc <_dtoa_r+0x584>)
 80077c6:	f004 020f 	and.w	r2, r4, #15
 80077ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80077d6:	f7f8 ff0f 	bl	80005f8 <__aeabi_dmul>
 80077da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077de:	1124      	asrs	r4, r4, #4
 80077e0:	2300      	movs	r3, #0
 80077e2:	2602      	movs	r6, #2
 80077e4:	2c00      	cmp	r4, #0
 80077e6:	f040 808f 	bne.w	8007908 <_dtoa_r+0x4c0>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1d3      	bne.n	8007796 <_dtoa_r+0x34e>
 80077ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80077f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8094 	beq.w	8007922 <_dtoa_r+0x4da>
 80077fa:	4b75      	ldr	r3, [pc, #468]	@ (80079d0 <_dtoa_r+0x588>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	4620      	mov	r0, r4
 8007800:	4629      	mov	r1, r5
 8007802:	f7f9 f96b 	bl	8000adc <__aeabi_dcmplt>
 8007806:	2800      	cmp	r0, #0
 8007808:	f000 808b 	beq.w	8007922 <_dtoa_r+0x4da>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8087 	beq.w	8007922 <_dtoa_r+0x4da>
 8007814:	f1bb 0f00 	cmp.w	fp, #0
 8007818:	dd34      	ble.n	8007884 <_dtoa_r+0x43c>
 800781a:	4620      	mov	r0, r4
 800781c:	4b6d      	ldr	r3, [pc, #436]	@ (80079d4 <_dtoa_r+0x58c>)
 800781e:	2200      	movs	r2, #0
 8007820:	4629      	mov	r1, r5
 8007822:	f7f8 fee9 	bl	80005f8 <__aeabi_dmul>
 8007826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800782a:	f107 38ff 	add.w	r8, r7, #4294967295
 800782e:	3601      	adds	r6, #1
 8007830:	465c      	mov	r4, fp
 8007832:	4630      	mov	r0, r6
 8007834:	f7f8 fe76 	bl	8000524 <__aeabi_i2d>
 8007838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800783c:	f7f8 fedc 	bl	80005f8 <__aeabi_dmul>
 8007840:	4b65      	ldr	r3, [pc, #404]	@ (80079d8 <_dtoa_r+0x590>)
 8007842:	2200      	movs	r2, #0
 8007844:	f7f8 fd22 	bl	800028c <__adddf3>
 8007848:	4605      	mov	r5, r0
 800784a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800784e:	2c00      	cmp	r4, #0
 8007850:	d16a      	bne.n	8007928 <_dtoa_r+0x4e0>
 8007852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007856:	4b61      	ldr	r3, [pc, #388]	@ (80079dc <_dtoa_r+0x594>)
 8007858:	2200      	movs	r2, #0
 800785a:	f7f8 fd15 	bl	8000288 <__aeabi_dsub>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007866:	462a      	mov	r2, r5
 8007868:	4633      	mov	r3, r6
 800786a:	f7f9 f955 	bl	8000b18 <__aeabi_dcmpgt>
 800786e:	2800      	cmp	r0, #0
 8007870:	f040 8298 	bne.w	8007da4 <_dtoa_r+0x95c>
 8007874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007878:	462a      	mov	r2, r5
 800787a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800787e:	f7f9 f92d 	bl	8000adc <__aeabi_dcmplt>
 8007882:	bb38      	cbnz	r0, 80078d4 <_dtoa_r+0x48c>
 8007884:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007888:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800788c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800788e:	2b00      	cmp	r3, #0
 8007890:	f2c0 8157 	blt.w	8007b42 <_dtoa_r+0x6fa>
 8007894:	2f0e      	cmp	r7, #14
 8007896:	f300 8154 	bgt.w	8007b42 <_dtoa_r+0x6fa>
 800789a:	4b4b      	ldr	r3, [pc, #300]	@ (80079c8 <_dtoa_r+0x580>)
 800789c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078a0:	ed93 7b00 	vldr	d7, [r3]
 80078a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	ed8d 7b00 	vstr	d7, [sp]
 80078ac:	f280 80e5 	bge.w	8007a7a <_dtoa_r+0x632>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f300 80e1 	bgt.w	8007a7a <_dtoa_r+0x632>
 80078b8:	d10c      	bne.n	80078d4 <_dtoa_r+0x48c>
 80078ba:	4b48      	ldr	r3, [pc, #288]	@ (80079dc <_dtoa_r+0x594>)
 80078bc:	2200      	movs	r2, #0
 80078be:	ec51 0b17 	vmov	r0, r1, d7
 80078c2:	f7f8 fe99 	bl	80005f8 <__aeabi_dmul>
 80078c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ca:	f7f9 f91b 	bl	8000b04 <__aeabi_dcmpge>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f000 8266 	beq.w	8007da0 <_dtoa_r+0x958>
 80078d4:	2400      	movs	r4, #0
 80078d6:	4625      	mov	r5, r4
 80078d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078da:	4656      	mov	r6, sl
 80078dc:	ea6f 0803 	mvn.w	r8, r3
 80078e0:	2700      	movs	r7, #0
 80078e2:	4621      	mov	r1, r4
 80078e4:	4648      	mov	r0, r9
 80078e6:	f000 fcbf 	bl	8008268 <_Bfree>
 80078ea:	2d00      	cmp	r5, #0
 80078ec:	f000 80bd 	beq.w	8007a6a <_dtoa_r+0x622>
 80078f0:	b12f      	cbz	r7, 80078fe <_dtoa_r+0x4b6>
 80078f2:	42af      	cmp	r7, r5
 80078f4:	d003      	beq.n	80078fe <_dtoa_r+0x4b6>
 80078f6:	4639      	mov	r1, r7
 80078f8:	4648      	mov	r0, r9
 80078fa:	f000 fcb5 	bl	8008268 <_Bfree>
 80078fe:	4629      	mov	r1, r5
 8007900:	4648      	mov	r0, r9
 8007902:	f000 fcb1 	bl	8008268 <_Bfree>
 8007906:	e0b0      	b.n	8007a6a <_dtoa_r+0x622>
 8007908:	07e2      	lsls	r2, r4, #31
 800790a:	d505      	bpl.n	8007918 <_dtoa_r+0x4d0>
 800790c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007910:	f7f8 fe72 	bl	80005f8 <__aeabi_dmul>
 8007914:	3601      	adds	r6, #1
 8007916:	2301      	movs	r3, #1
 8007918:	1064      	asrs	r4, r4, #1
 800791a:	3508      	adds	r5, #8
 800791c:	e762      	b.n	80077e4 <_dtoa_r+0x39c>
 800791e:	2602      	movs	r6, #2
 8007920:	e765      	b.n	80077ee <_dtoa_r+0x3a6>
 8007922:	9c03      	ldr	r4, [sp, #12]
 8007924:	46b8      	mov	r8, r7
 8007926:	e784      	b.n	8007832 <_dtoa_r+0x3ea>
 8007928:	4b27      	ldr	r3, [pc, #156]	@ (80079c8 <_dtoa_r+0x580>)
 800792a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800792c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007930:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007934:	4454      	add	r4, sl
 8007936:	2900      	cmp	r1, #0
 8007938:	d054      	beq.n	80079e4 <_dtoa_r+0x59c>
 800793a:	4929      	ldr	r1, [pc, #164]	@ (80079e0 <_dtoa_r+0x598>)
 800793c:	2000      	movs	r0, #0
 800793e:	f7f8 ff85 	bl	800084c <__aeabi_ddiv>
 8007942:	4633      	mov	r3, r6
 8007944:	462a      	mov	r2, r5
 8007946:	f7f8 fc9f 	bl	8000288 <__aeabi_dsub>
 800794a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800794e:	4656      	mov	r6, sl
 8007950:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007954:	f7f9 f900 	bl	8000b58 <__aeabi_d2iz>
 8007958:	4605      	mov	r5, r0
 800795a:	f7f8 fde3 	bl	8000524 <__aeabi_i2d>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007966:	f7f8 fc8f 	bl	8000288 <__aeabi_dsub>
 800796a:	3530      	adds	r5, #48	@ 0x30
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007974:	f806 5b01 	strb.w	r5, [r6], #1
 8007978:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800797c:	f7f9 f8ae 	bl	8000adc <__aeabi_dcmplt>
 8007980:	2800      	cmp	r0, #0
 8007982:	d172      	bne.n	8007a6a <_dtoa_r+0x622>
 8007984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007988:	4911      	ldr	r1, [pc, #68]	@ (80079d0 <_dtoa_r+0x588>)
 800798a:	2000      	movs	r0, #0
 800798c:	f7f8 fc7c 	bl	8000288 <__aeabi_dsub>
 8007990:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007994:	f7f9 f8a2 	bl	8000adc <__aeabi_dcmplt>
 8007998:	2800      	cmp	r0, #0
 800799a:	f040 80b4 	bne.w	8007b06 <_dtoa_r+0x6be>
 800799e:	42a6      	cmp	r6, r4
 80079a0:	f43f af70 	beq.w	8007884 <_dtoa_r+0x43c>
 80079a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80079a8:	4b0a      	ldr	r3, [pc, #40]	@ (80079d4 <_dtoa_r+0x58c>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	f7f8 fe24 	bl	80005f8 <__aeabi_dmul>
 80079b0:	4b08      	ldr	r3, [pc, #32]	@ (80079d4 <_dtoa_r+0x58c>)
 80079b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80079b6:	2200      	movs	r2, #0
 80079b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079bc:	f7f8 fe1c 	bl	80005f8 <__aeabi_dmul>
 80079c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079c4:	e7c4      	b.n	8007950 <_dtoa_r+0x508>
 80079c6:	bf00      	nop
 80079c8:	08009660 	.word	0x08009660
 80079cc:	08009638 	.word	0x08009638
 80079d0:	3ff00000 	.word	0x3ff00000
 80079d4:	40240000 	.word	0x40240000
 80079d8:	401c0000 	.word	0x401c0000
 80079dc:	40140000 	.word	0x40140000
 80079e0:	3fe00000 	.word	0x3fe00000
 80079e4:	4631      	mov	r1, r6
 80079e6:	4628      	mov	r0, r5
 80079e8:	f7f8 fe06 	bl	80005f8 <__aeabi_dmul>
 80079ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80079f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80079f2:	4656      	mov	r6, sl
 80079f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f8:	f7f9 f8ae 	bl	8000b58 <__aeabi_d2iz>
 80079fc:	4605      	mov	r5, r0
 80079fe:	f7f8 fd91 	bl	8000524 <__aeabi_i2d>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a0a:	f7f8 fc3d 	bl	8000288 <__aeabi_dsub>
 8007a0e:	3530      	adds	r5, #48	@ 0x30
 8007a10:	f806 5b01 	strb.w	r5, [r6], #1
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	42a6      	cmp	r6, r4
 8007a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	d124      	bne.n	8007a6e <_dtoa_r+0x626>
 8007a24:	4baf      	ldr	r3, [pc, #700]	@ (8007ce4 <_dtoa_r+0x89c>)
 8007a26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a2a:	f7f8 fc2f 	bl	800028c <__adddf3>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a36:	f7f9 f86f 	bl	8000b18 <__aeabi_dcmpgt>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d163      	bne.n	8007b06 <_dtoa_r+0x6be>
 8007a3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a42:	49a8      	ldr	r1, [pc, #672]	@ (8007ce4 <_dtoa_r+0x89c>)
 8007a44:	2000      	movs	r0, #0
 8007a46:	f7f8 fc1f 	bl	8000288 <__aeabi_dsub>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a52:	f7f9 f843 	bl	8000adc <__aeabi_dcmplt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f af14 	beq.w	8007884 <_dtoa_r+0x43c>
 8007a5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007a5e:	1e73      	subs	r3, r6, #1
 8007a60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a66:	2b30      	cmp	r3, #48	@ 0x30
 8007a68:	d0f8      	beq.n	8007a5c <_dtoa_r+0x614>
 8007a6a:	4647      	mov	r7, r8
 8007a6c:	e03b      	b.n	8007ae6 <_dtoa_r+0x69e>
 8007a6e:	4b9e      	ldr	r3, [pc, #632]	@ (8007ce8 <_dtoa_r+0x8a0>)
 8007a70:	f7f8 fdc2 	bl	80005f8 <__aeabi_dmul>
 8007a74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a78:	e7bc      	b.n	80079f4 <_dtoa_r+0x5ac>
 8007a7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007a7e:	4656      	mov	r6, sl
 8007a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a84:	4620      	mov	r0, r4
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7f8 fee0 	bl	800084c <__aeabi_ddiv>
 8007a8c:	f7f9 f864 	bl	8000b58 <__aeabi_d2iz>
 8007a90:	4680      	mov	r8, r0
 8007a92:	f7f8 fd47 	bl	8000524 <__aeabi_i2d>
 8007a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a9a:	f7f8 fdad 	bl	80005f8 <__aeabi_dmul>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007aaa:	f7f8 fbed 	bl	8000288 <__aeabi_dsub>
 8007aae:	f806 4b01 	strb.w	r4, [r6], #1
 8007ab2:	9d03      	ldr	r5, [sp, #12]
 8007ab4:	eba6 040a 	sub.w	r4, r6, sl
 8007ab8:	42a5      	cmp	r5, r4
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	d133      	bne.n	8007b28 <_dtoa_r+0x6e0>
 8007ac0:	f7f8 fbe4 	bl	800028c <__adddf3>
 8007ac4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ac8:	4604      	mov	r4, r0
 8007aca:	460d      	mov	r5, r1
 8007acc:	f7f9 f824 	bl	8000b18 <__aeabi_dcmpgt>
 8007ad0:	b9c0      	cbnz	r0, 8007b04 <_dtoa_r+0x6bc>
 8007ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 fff5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ade:	b110      	cbz	r0, 8007ae6 <_dtoa_r+0x69e>
 8007ae0:	f018 0f01 	tst.w	r8, #1
 8007ae4:	d10e      	bne.n	8007b04 <_dtoa_r+0x6bc>
 8007ae6:	9902      	ldr	r1, [sp, #8]
 8007ae8:	4648      	mov	r0, r9
 8007aea:	f000 fbbd 	bl	8008268 <_Bfree>
 8007aee:	2300      	movs	r3, #0
 8007af0:	7033      	strb	r3, [r6, #0]
 8007af2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007af4:	3701      	adds	r7, #1
 8007af6:	601f      	str	r7, [r3, #0]
 8007af8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 824b 	beq.w	8007f96 <_dtoa_r+0xb4e>
 8007b00:	601e      	str	r6, [r3, #0]
 8007b02:	e248      	b.n	8007f96 <_dtoa_r+0xb4e>
 8007b04:	46b8      	mov	r8, r7
 8007b06:	4633      	mov	r3, r6
 8007b08:	461e      	mov	r6, r3
 8007b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b0e:	2a39      	cmp	r2, #57	@ 0x39
 8007b10:	d106      	bne.n	8007b20 <_dtoa_r+0x6d8>
 8007b12:	459a      	cmp	sl, r3
 8007b14:	d1f8      	bne.n	8007b08 <_dtoa_r+0x6c0>
 8007b16:	2230      	movs	r2, #48	@ 0x30
 8007b18:	f108 0801 	add.w	r8, r8, #1
 8007b1c:	f88a 2000 	strb.w	r2, [sl]
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	3201      	adds	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	e7a0      	b.n	8007a6a <_dtoa_r+0x622>
 8007b28:	4b6f      	ldr	r3, [pc, #444]	@ (8007ce8 <_dtoa_r+0x8a0>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f7f8 fd64 	bl	80005f8 <__aeabi_dmul>
 8007b30:	2200      	movs	r2, #0
 8007b32:	2300      	movs	r3, #0
 8007b34:	4604      	mov	r4, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	f7f8 ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d09f      	beq.n	8007a80 <_dtoa_r+0x638>
 8007b40:	e7d1      	b.n	8007ae6 <_dtoa_r+0x69e>
 8007b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b44:	2a00      	cmp	r2, #0
 8007b46:	f000 80ea 	beq.w	8007d1e <_dtoa_r+0x8d6>
 8007b4a:	9a07      	ldr	r2, [sp, #28]
 8007b4c:	2a01      	cmp	r2, #1
 8007b4e:	f300 80cd 	bgt.w	8007cec <_dtoa_r+0x8a4>
 8007b52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	f000 80c1 	beq.w	8007cdc <_dtoa_r+0x894>
 8007b5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007b5e:	9c08      	ldr	r4, [sp, #32]
 8007b60:	9e00      	ldr	r6, [sp, #0]
 8007b62:	9a00      	ldr	r2, [sp, #0]
 8007b64:	441a      	add	r2, r3
 8007b66:	9200      	str	r2, [sp, #0]
 8007b68:	9a06      	ldr	r2, [sp, #24]
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	441a      	add	r2, r3
 8007b6e:	4648      	mov	r0, r9
 8007b70:	9206      	str	r2, [sp, #24]
 8007b72:	f000 fc2d 	bl	80083d0 <__i2b>
 8007b76:	4605      	mov	r5, r0
 8007b78:	b166      	cbz	r6, 8007b94 <_dtoa_r+0x74c>
 8007b7a:	9b06      	ldr	r3, [sp, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dd09      	ble.n	8007b94 <_dtoa_r+0x74c>
 8007b80:	42b3      	cmp	r3, r6
 8007b82:	9a00      	ldr	r2, [sp, #0]
 8007b84:	bfa8      	it	ge
 8007b86:	4633      	movge	r3, r6
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	9200      	str	r2, [sp, #0]
 8007b8c:	9a06      	ldr	r2, [sp, #24]
 8007b8e:	1af6      	subs	r6, r6, r3
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	9306      	str	r3, [sp, #24]
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	b30b      	cbz	r3, 8007bdc <_dtoa_r+0x794>
 8007b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 80c6 	beq.w	8007d2c <_dtoa_r+0x8e4>
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	f000 80c0 	beq.w	8007d26 <_dtoa_r+0x8de>
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4622      	mov	r2, r4
 8007baa:	4648      	mov	r0, r9
 8007bac:	f000 fcc8 	bl	8008540 <__pow5mult>
 8007bb0:	9a02      	ldr	r2, [sp, #8]
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	4648      	mov	r0, r9
 8007bb8:	f000 fc20 	bl	80083fc <__multiply>
 8007bbc:	9902      	ldr	r1, [sp, #8]
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	4648      	mov	r0, r9
 8007bc2:	f000 fb51 	bl	8008268 <_Bfree>
 8007bc6:	9b08      	ldr	r3, [sp, #32]
 8007bc8:	1b1b      	subs	r3, r3, r4
 8007bca:	9308      	str	r3, [sp, #32]
 8007bcc:	f000 80b1 	beq.w	8007d32 <_dtoa_r+0x8ea>
 8007bd0:	9a08      	ldr	r2, [sp, #32]
 8007bd2:	4641      	mov	r1, r8
 8007bd4:	4648      	mov	r0, r9
 8007bd6:	f000 fcb3 	bl	8008540 <__pow5mult>
 8007bda:	9002      	str	r0, [sp, #8]
 8007bdc:	2101      	movs	r1, #1
 8007bde:	4648      	mov	r0, r9
 8007be0:	f000 fbf6 	bl	80083d0 <__i2b>
 8007be4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007be6:	4604      	mov	r4, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 81d8 	beq.w	8007f9e <_dtoa_r+0xb56>
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	4648      	mov	r0, r9
 8007bf4:	f000 fca4 	bl	8008540 <__pow5mult>
 8007bf8:	9b07      	ldr	r3, [sp, #28]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	f300 809f 	bgt.w	8007d40 <_dtoa_r+0x8f8>
 8007c02:	9b04      	ldr	r3, [sp, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f040 8097 	bne.w	8007d38 <_dtoa_r+0x8f0>
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 8093 	bne.w	8007d3c <_dtoa_r+0x8f4>
 8007c16:	9b05      	ldr	r3, [sp, #20]
 8007c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c1c:	0d1b      	lsrs	r3, r3, #20
 8007c1e:	051b      	lsls	r3, r3, #20
 8007c20:	b133      	cbz	r3, 8007c30 <_dtoa_r+0x7e8>
 8007c22:	9b00      	ldr	r3, [sp, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	9b06      	ldr	r3, [sp, #24]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	9308      	str	r3, [sp, #32]
 8007c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 81b8 	beq.w	8007faa <_dtoa_r+0xb62>
 8007c3a:	6923      	ldr	r3, [r4, #16]
 8007c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c40:	6918      	ldr	r0, [r3, #16]
 8007c42:	f000 fb79 	bl	8008338 <__hi0bits>
 8007c46:	f1c0 0020 	rsb	r0, r0, #32
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	4418      	add	r0, r3
 8007c4e:	f010 001f 	ands.w	r0, r0, #31
 8007c52:	f000 8082 	beq.w	8007d5a <_dtoa_r+0x912>
 8007c56:	f1c0 0320 	rsb	r3, r0, #32
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	dd73      	ble.n	8007d46 <_dtoa_r+0x8fe>
 8007c5e:	9b00      	ldr	r3, [sp, #0]
 8007c60:	f1c0 001c 	rsb	r0, r0, #28
 8007c64:	4403      	add	r3, r0
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	9b06      	ldr	r3, [sp, #24]
 8007c6a:	4403      	add	r3, r0
 8007c6c:	4406      	add	r6, r0
 8007c6e:	9306      	str	r3, [sp, #24]
 8007c70:	9b00      	ldr	r3, [sp, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	dd05      	ble.n	8007c82 <_dtoa_r+0x83a>
 8007c76:	9902      	ldr	r1, [sp, #8]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4648      	mov	r0, r9
 8007c7c:	f000 fcba 	bl	80085f4 <__lshift>
 8007c80:	9002      	str	r0, [sp, #8]
 8007c82:	9b06      	ldr	r3, [sp, #24]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dd05      	ble.n	8007c94 <_dtoa_r+0x84c>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4648      	mov	r0, r9
 8007c8e:	f000 fcb1 	bl	80085f4 <__lshift>
 8007c92:	4604      	mov	r4, r0
 8007c94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d061      	beq.n	8007d5e <_dtoa_r+0x916>
 8007c9a:	9802      	ldr	r0, [sp, #8]
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	f000 fd15 	bl	80086cc <__mcmp>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	da5b      	bge.n	8007d5e <_dtoa_r+0x916>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9902      	ldr	r1, [sp, #8]
 8007caa:	220a      	movs	r2, #10
 8007cac:	4648      	mov	r0, r9
 8007cae:	f000 fafd 	bl	80082ac <__multadd>
 8007cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb4:	9002      	str	r0, [sp, #8]
 8007cb6:	f107 38ff 	add.w	r8, r7, #4294967295
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 8177 	beq.w	8007fae <_dtoa_r+0xb66>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	4648      	mov	r0, r9
 8007cc8:	f000 faf0 	bl	80082ac <__multadd>
 8007ccc:	f1bb 0f00 	cmp.w	fp, #0
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	dc6f      	bgt.n	8007db4 <_dtoa_r+0x96c>
 8007cd4:	9b07      	ldr	r3, [sp, #28]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	dc49      	bgt.n	8007d6e <_dtoa_r+0x926>
 8007cda:	e06b      	b.n	8007db4 <_dtoa_r+0x96c>
 8007cdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007cde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ce2:	e73c      	b.n	8007b5e <_dtoa_r+0x716>
 8007ce4:	3fe00000 	.word	0x3fe00000
 8007ce8:	40240000 	.word	0x40240000
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	1e5c      	subs	r4, r3, #1
 8007cf0:	9b08      	ldr	r3, [sp, #32]
 8007cf2:	42a3      	cmp	r3, r4
 8007cf4:	db09      	blt.n	8007d0a <_dtoa_r+0x8c2>
 8007cf6:	1b1c      	subs	r4, r3, r4
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f6bf af30 	bge.w	8007b60 <_dtoa_r+0x718>
 8007d00:	9b00      	ldr	r3, [sp, #0]
 8007d02:	9a03      	ldr	r2, [sp, #12]
 8007d04:	1a9e      	subs	r6, r3, r2
 8007d06:	2300      	movs	r3, #0
 8007d08:	e72b      	b.n	8007b62 <_dtoa_r+0x71a>
 8007d0a:	9b08      	ldr	r3, [sp, #32]
 8007d0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d0e:	9408      	str	r4, [sp, #32]
 8007d10:	1ae3      	subs	r3, r4, r3
 8007d12:	441a      	add	r2, r3
 8007d14:	9e00      	ldr	r6, [sp, #0]
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	920d      	str	r2, [sp, #52]	@ 0x34
 8007d1a:	2400      	movs	r4, #0
 8007d1c:	e721      	b.n	8007b62 <_dtoa_r+0x71a>
 8007d1e:	9c08      	ldr	r4, [sp, #32]
 8007d20:	9e00      	ldr	r6, [sp, #0]
 8007d22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007d24:	e728      	b.n	8007b78 <_dtoa_r+0x730>
 8007d26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007d2a:	e751      	b.n	8007bd0 <_dtoa_r+0x788>
 8007d2c:	9a08      	ldr	r2, [sp, #32]
 8007d2e:	9902      	ldr	r1, [sp, #8]
 8007d30:	e750      	b.n	8007bd4 <_dtoa_r+0x78c>
 8007d32:	f8cd 8008 	str.w	r8, [sp, #8]
 8007d36:	e751      	b.n	8007bdc <_dtoa_r+0x794>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e779      	b.n	8007c30 <_dtoa_r+0x7e8>
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	e777      	b.n	8007c30 <_dtoa_r+0x7e8>
 8007d40:	2300      	movs	r3, #0
 8007d42:	9308      	str	r3, [sp, #32]
 8007d44:	e779      	b.n	8007c3a <_dtoa_r+0x7f2>
 8007d46:	d093      	beq.n	8007c70 <_dtoa_r+0x828>
 8007d48:	9a00      	ldr	r2, [sp, #0]
 8007d4a:	331c      	adds	r3, #28
 8007d4c:	441a      	add	r2, r3
 8007d4e:	9200      	str	r2, [sp, #0]
 8007d50:	9a06      	ldr	r2, [sp, #24]
 8007d52:	441a      	add	r2, r3
 8007d54:	441e      	add	r6, r3
 8007d56:	9206      	str	r2, [sp, #24]
 8007d58:	e78a      	b.n	8007c70 <_dtoa_r+0x828>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	e7f4      	b.n	8007d48 <_dtoa_r+0x900>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	46b8      	mov	r8, r7
 8007d64:	dc20      	bgt.n	8007da8 <_dtoa_r+0x960>
 8007d66:	469b      	mov	fp, r3
 8007d68:	9b07      	ldr	r3, [sp, #28]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	dd1e      	ble.n	8007dac <_dtoa_r+0x964>
 8007d6e:	f1bb 0f00 	cmp.w	fp, #0
 8007d72:	f47f adb1 	bne.w	80078d8 <_dtoa_r+0x490>
 8007d76:	4621      	mov	r1, r4
 8007d78:	465b      	mov	r3, fp
 8007d7a:	2205      	movs	r2, #5
 8007d7c:	4648      	mov	r0, r9
 8007d7e:	f000 fa95 	bl	80082ac <__multadd>
 8007d82:	4601      	mov	r1, r0
 8007d84:	4604      	mov	r4, r0
 8007d86:	9802      	ldr	r0, [sp, #8]
 8007d88:	f000 fca0 	bl	80086cc <__mcmp>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f77f ada3 	ble.w	80078d8 <_dtoa_r+0x490>
 8007d92:	4656      	mov	r6, sl
 8007d94:	2331      	movs	r3, #49	@ 0x31
 8007d96:	f806 3b01 	strb.w	r3, [r6], #1
 8007d9a:	f108 0801 	add.w	r8, r8, #1
 8007d9e:	e59f      	b.n	80078e0 <_dtoa_r+0x498>
 8007da0:	9c03      	ldr	r4, [sp, #12]
 8007da2:	46b8      	mov	r8, r7
 8007da4:	4625      	mov	r5, r4
 8007da6:	e7f4      	b.n	8007d92 <_dtoa_r+0x94a>
 8007da8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8101 	beq.w	8007fb6 <_dtoa_r+0xb6e>
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	dd05      	ble.n	8007dc4 <_dtoa_r+0x97c>
 8007db8:	4629      	mov	r1, r5
 8007dba:	4632      	mov	r2, r6
 8007dbc:	4648      	mov	r0, r9
 8007dbe:	f000 fc19 	bl	80085f4 <__lshift>
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	9b08      	ldr	r3, [sp, #32]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d05c      	beq.n	8007e84 <_dtoa_r+0xa3c>
 8007dca:	6869      	ldr	r1, [r5, #4]
 8007dcc:	4648      	mov	r0, r9
 8007dce:	f000 fa0b 	bl	80081e8 <_Balloc>
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	b928      	cbnz	r0, 8007de2 <_dtoa_r+0x99a>
 8007dd6:	4b82      	ldr	r3, [pc, #520]	@ (8007fe0 <_dtoa_r+0xb98>)
 8007dd8:	4602      	mov	r2, r0
 8007dda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007dde:	f7ff bb4a 	b.w	8007476 <_dtoa_r+0x2e>
 8007de2:	692a      	ldr	r2, [r5, #16]
 8007de4:	3202      	adds	r2, #2
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	f105 010c 	add.w	r1, r5, #12
 8007dec:	300c      	adds	r0, #12
 8007dee:	f001 f827 	bl	8008e40 <memcpy>
 8007df2:	2201      	movs	r2, #1
 8007df4:	4631      	mov	r1, r6
 8007df6:	4648      	mov	r0, r9
 8007df8:	f000 fbfc 	bl	80085f4 <__lshift>
 8007dfc:	f10a 0301 	add.w	r3, sl, #1
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	eb0a 030b 	add.w	r3, sl, fp
 8007e06:	9308      	str	r3, [sp, #32]
 8007e08:	9b04      	ldr	r3, [sp, #16]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	462f      	mov	r7, r5
 8007e10:	9306      	str	r3, [sp, #24]
 8007e12:	4605      	mov	r5, r0
 8007e14:	9b00      	ldr	r3, [sp, #0]
 8007e16:	9802      	ldr	r0, [sp, #8]
 8007e18:	4621      	mov	r1, r4
 8007e1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e1e:	f7ff fa88 	bl	8007332 <quorem>
 8007e22:	4603      	mov	r3, r0
 8007e24:	3330      	adds	r3, #48	@ 0x30
 8007e26:	9003      	str	r0, [sp, #12]
 8007e28:	4639      	mov	r1, r7
 8007e2a:	9802      	ldr	r0, [sp, #8]
 8007e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e2e:	f000 fc4d 	bl	80086cc <__mcmp>
 8007e32:	462a      	mov	r2, r5
 8007e34:	9004      	str	r0, [sp, #16]
 8007e36:	4621      	mov	r1, r4
 8007e38:	4648      	mov	r0, r9
 8007e3a:	f000 fc63 	bl	8008704 <__mdiff>
 8007e3e:	68c2      	ldr	r2, [r0, #12]
 8007e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e42:	4606      	mov	r6, r0
 8007e44:	bb02      	cbnz	r2, 8007e88 <_dtoa_r+0xa40>
 8007e46:	4601      	mov	r1, r0
 8007e48:	9802      	ldr	r0, [sp, #8]
 8007e4a:	f000 fc3f 	bl	80086cc <__mcmp>
 8007e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e50:	4602      	mov	r2, r0
 8007e52:	4631      	mov	r1, r6
 8007e54:	4648      	mov	r0, r9
 8007e56:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e5a:	f000 fa05 	bl	8008268 <_Bfree>
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007e62:	9e00      	ldr	r6, [sp, #0]
 8007e64:	ea42 0103 	orr.w	r1, r2, r3
 8007e68:	9b06      	ldr	r3, [sp, #24]
 8007e6a:	4319      	orrs	r1, r3
 8007e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e6e:	d10d      	bne.n	8007e8c <_dtoa_r+0xa44>
 8007e70:	2b39      	cmp	r3, #57	@ 0x39
 8007e72:	d027      	beq.n	8007ec4 <_dtoa_r+0xa7c>
 8007e74:	9a04      	ldr	r2, [sp, #16]
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	dd01      	ble.n	8007e7e <_dtoa_r+0xa36>
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	3331      	adds	r3, #49	@ 0x31
 8007e7e:	f88b 3000 	strb.w	r3, [fp]
 8007e82:	e52e      	b.n	80078e2 <_dtoa_r+0x49a>
 8007e84:	4628      	mov	r0, r5
 8007e86:	e7b9      	b.n	8007dfc <_dtoa_r+0x9b4>
 8007e88:	2201      	movs	r2, #1
 8007e8a:	e7e2      	b.n	8007e52 <_dtoa_r+0xa0a>
 8007e8c:	9904      	ldr	r1, [sp, #16]
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	db04      	blt.n	8007e9c <_dtoa_r+0xa54>
 8007e92:	9807      	ldr	r0, [sp, #28]
 8007e94:	4301      	orrs	r1, r0
 8007e96:	9806      	ldr	r0, [sp, #24]
 8007e98:	4301      	orrs	r1, r0
 8007e9a:	d120      	bne.n	8007ede <_dtoa_r+0xa96>
 8007e9c:	2a00      	cmp	r2, #0
 8007e9e:	ddee      	ble.n	8007e7e <_dtoa_r+0xa36>
 8007ea0:	9902      	ldr	r1, [sp, #8]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	4648      	mov	r0, r9
 8007ea8:	f000 fba4 	bl	80085f4 <__lshift>
 8007eac:	4621      	mov	r1, r4
 8007eae:	9002      	str	r0, [sp, #8]
 8007eb0:	f000 fc0c 	bl	80086cc <__mcmp>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	9b00      	ldr	r3, [sp, #0]
 8007eb8:	dc02      	bgt.n	8007ec0 <_dtoa_r+0xa78>
 8007eba:	d1e0      	bne.n	8007e7e <_dtoa_r+0xa36>
 8007ebc:	07da      	lsls	r2, r3, #31
 8007ebe:	d5de      	bpl.n	8007e7e <_dtoa_r+0xa36>
 8007ec0:	2b39      	cmp	r3, #57	@ 0x39
 8007ec2:	d1da      	bne.n	8007e7a <_dtoa_r+0xa32>
 8007ec4:	2339      	movs	r3, #57	@ 0x39
 8007ec6:	f88b 3000 	strb.w	r3, [fp]
 8007eca:	4633      	mov	r3, r6
 8007ecc:	461e      	mov	r6, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ed4:	2a39      	cmp	r2, #57	@ 0x39
 8007ed6:	d04e      	beq.n	8007f76 <_dtoa_r+0xb2e>
 8007ed8:	3201      	adds	r2, #1
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	e501      	b.n	80078e2 <_dtoa_r+0x49a>
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	dd03      	ble.n	8007eea <_dtoa_r+0xaa2>
 8007ee2:	2b39      	cmp	r3, #57	@ 0x39
 8007ee4:	d0ee      	beq.n	8007ec4 <_dtoa_r+0xa7c>
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	e7c9      	b.n	8007e7e <_dtoa_r+0xa36>
 8007eea:	9a00      	ldr	r2, [sp, #0]
 8007eec:	9908      	ldr	r1, [sp, #32]
 8007eee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ef2:	428a      	cmp	r2, r1
 8007ef4:	d028      	beq.n	8007f48 <_dtoa_r+0xb00>
 8007ef6:	9902      	ldr	r1, [sp, #8]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	220a      	movs	r2, #10
 8007efc:	4648      	mov	r0, r9
 8007efe:	f000 f9d5 	bl	80082ac <__multadd>
 8007f02:	42af      	cmp	r7, r5
 8007f04:	9002      	str	r0, [sp, #8]
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	f04f 020a 	mov.w	r2, #10
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4648      	mov	r0, r9
 8007f12:	d107      	bne.n	8007f24 <_dtoa_r+0xadc>
 8007f14:	f000 f9ca 	bl	80082ac <__multadd>
 8007f18:	4607      	mov	r7, r0
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	9b00      	ldr	r3, [sp, #0]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	e777      	b.n	8007e14 <_dtoa_r+0x9cc>
 8007f24:	f000 f9c2 	bl	80082ac <__multadd>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4607      	mov	r7, r0
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	220a      	movs	r2, #10
 8007f30:	4648      	mov	r0, r9
 8007f32:	f000 f9bb 	bl	80082ac <__multadd>
 8007f36:	4605      	mov	r5, r0
 8007f38:	e7f0      	b.n	8007f1c <_dtoa_r+0xad4>
 8007f3a:	f1bb 0f00 	cmp.w	fp, #0
 8007f3e:	bfcc      	ite	gt
 8007f40:	465e      	movgt	r6, fp
 8007f42:	2601      	movle	r6, #1
 8007f44:	4456      	add	r6, sl
 8007f46:	2700      	movs	r7, #0
 8007f48:	9902      	ldr	r1, [sp, #8]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	4648      	mov	r0, r9
 8007f50:	f000 fb50 	bl	80085f4 <__lshift>
 8007f54:	4621      	mov	r1, r4
 8007f56:	9002      	str	r0, [sp, #8]
 8007f58:	f000 fbb8 	bl	80086cc <__mcmp>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	dcb4      	bgt.n	8007eca <_dtoa_r+0xa82>
 8007f60:	d102      	bne.n	8007f68 <_dtoa_r+0xb20>
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	07db      	lsls	r3, r3, #31
 8007f66:	d4b0      	bmi.n	8007eca <_dtoa_r+0xa82>
 8007f68:	4633      	mov	r3, r6
 8007f6a:	461e      	mov	r6, r3
 8007f6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f70:	2a30      	cmp	r2, #48	@ 0x30
 8007f72:	d0fa      	beq.n	8007f6a <_dtoa_r+0xb22>
 8007f74:	e4b5      	b.n	80078e2 <_dtoa_r+0x49a>
 8007f76:	459a      	cmp	sl, r3
 8007f78:	d1a8      	bne.n	8007ecc <_dtoa_r+0xa84>
 8007f7a:	2331      	movs	r3, #49	@ 0x31
 8007f7c:	f108 0801 	add.w	r8, r8, #1
 8007f80:	f88a 3000 	strb.w	r3, [sl]
 8007f84:	e4ad      	b.n	80078e2 <_dtoa_r+0x49a>
 8007f86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007fe4 <_dtoa_r+0xb9c>
 8007f8c:	b11b      	cbz	r3, 8007f96 <_dtoa_r+0xb4e>
 8007f8e:	f10a 0308 	add.w	r3, sl, #8
 8007f92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	4650      	mov	r0, sl
 8007f98:	b017      	add	sp, #92	@ 0x5c
 8007f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9e:	9b07      	ldr	r3, [sp, #28]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	f77f ae2e 	ble.w	8007c02 <_dtoa_r+0x7ba>
 8007fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fa8:	9308      	str	r3, [sp, #32]
 8007faa:	2001      	movs	r0, #1
 8007fac:	e64d      	b.n	8007c4a <_dtoa_r+0x802>
 8007fae:	f1bb 0f00 	cmp.w	fp, #0
 8007fb2:	f77f aed9 	ble.w	8007d68 <_dtoa_r+0x920>
 8007fb6:	4656      	mov	r6, sl
 8007fb8:	9802      	ldr	r0, [sp, #8]
 8007fba:	4621      	mov	r1, r4
 8007fbc:	f7ff f9b9 	bl	8007332 <quorem>
 8007fc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007fc4:	f806 3b01 	strb.w	r3, [r6], #1
 8007fc8:	eba6 020a 	sub.w	r2, r6, sl
 8007fcc:	4593      	cmp	fp, r2
 8007fce:	ddb4      	ble.n	8007f3a <_dtoa_r+0xaf2>
 8007fd0:	9902      	ldr	r1, [sp, #8]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	220a      	movs	r2, #10
 8007fd6:	4648      	mov	r0, r9
 8007fd8:	f000 f968 	bl	80082ac <__multadd>
 8007fdc:	9002      	str	r0, [sp, #8]
 8007fde:	e7eb      	b.n	8007fb8 <_dtoa_r+0xb70>
 8007fe0:	08009568 	.word	0x08009568
 8007fe4:	080094ec 	.word	0x080094ec

08007fe8 <_free_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4605      	mov	r5, r0
 8007fec:	2900      	cmp	r1, #0
 8007fee:	d041      	beq.n	8008074 <_free_r+0x8c>
 8007ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff4:	1f0c      	subs	r4, r1, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bfb8      	it	lt
 8007ffa:	18e4      	addlt	r4, r4, r3
 8007ffc:	f000 f8e8 	bl	80081d0 <__malloc_lock>
 8008000:	4a1d      	ldr	r2, [pc, #116]	@ (8008078 <_free_r+0x90>)
 8008002:	6813      	ldr	r3, [r2, #0]
 8008004:	b933      	cbnz	r3, 8008014 <_free_r+0x2c>
 8008006:	6063      	str	r3, [r4, #4]
 8008008:	6014      	str	r4, [r2, #0]
 800800a:	4628      	mov	r0, r5
 800800c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008010:	f000 b8e4 	b.w	80081dc <__malloc_unlock>
 8008014:	42a3      	cmp	r3, r4
 8008016:	d908      	bls.n	800802a <_free_r+0x42>
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	1821      	adds	r1, r4, r0
 800801c:	428b      	cmp	r3, r1
 800801e:	bf01      	itttt	eq
 8008020:	6819      	ldreq	r1, [r3, #0]
 8008022:	685b      	ldreq	r3, [r3, #4]
 8008024:	1809      	addeq	r1, r1, r0
 8008026:	6021      	streq	r1, [r4, #0]
 8008028:	e7ed      	b.n	8008006 <_free_r+0x1e>
 800802a:	461a      	mov	r2, r3
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	b10b      	cbz	r3, 8008034 <_free_r+0x4c>
 8008030:	42a3      	cmp	r3, r4
 8008032:	d9fa      	bls.n	800802a <_free_r+0x42>
 8008034:	6811      	ldr	r1, [r2, #0]
 8008036:	1850      	adds	r0, r2, r1
 8008038:	42a0      	cmp	r0, r4
 800803a:	d10b      	bne.n	8008054 <_free_r+0x6c>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	4401      	add	r1, r0
 8008040:	1850      	adds	r0, r2, r1
 8008042:	4283      	cmp	r3, r0
 8008044:	6011      	str	r1, [r2, #0]
 8008046:	d1e0      	bne.n	800800a <_free_r+0x22>
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	6053      	str	r3, [r2, #4]
 800804e:	4408      	add	r0, r1
 8008050:	6010      	str	r0, [r2, #0]
 8008052:	e7da      	b.n	800800a <_free_r+0x22>
 8008054:	d902      	bls.n	800805c <_free_r+0x74>
 8008056:	230c      	movs	r3, #12
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	e7d6      	b.n	800800a <_free_r+0x22>
 800805c:	6820      	ldr	r0, [r4, #0]
 800805e:	1821      	adds	r1, r4, r0
 8008060:	428b      	cmp	r3, r1
 8008062:	bf04      	itt	eq
 8008064:	6819      	ldreq	r1, [r3, #0]
 8008066:	685b      	ldreq	r3, [r3, #4]
 8008068:	6063      	str	r3, [r4, #4]
 800806a:	bf04      	itt	eq
 800806c:	1809      	addeq	r1, r1, r0
 800806e:	6021      	streq	r1, [r4, #0]
 8008070:	6054      	str	r4, [r2, #4]
 8008072:	e7ca      	b.n	800800a <_free_r+0x22>
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	bf00      	nop
 8008078:	200008b4 	.word	0x200008b4

0800807c <malloc>:
 800807c:	4b02      	ldr	r3, [pc, #8]	@ (8008088 <malloc+0xc>)
 800807e:	4601      	mov	r1, r0
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f000 b825 	b.w	80080d0 <_malloc_r>
 8008086:	bf00      	nop
 8008088:	20000024 	.word	0x20000024

0800808c <sbrk_aligned>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4e0f      	ldr	r6, [pc, #60]	@ (80080cc <sbrk_aligned+0x40>)
 8008090:	460c      	mov	r4, r1
 8008092:	6831      	ldr	r1, [r6, #0]
 8008094:	4605      	mov	r5, r0
 8008096:	b911      	cbnz	r1, 800809e <sbrk_aligned+0x12>
 8008098:	f000 fec2 	bl	8008e20 <_sbrk_r>
 800809c:	6030      	str	r0, [r6, #0]
 800809e:	4621      	mov	r1, r4
 80080a0:	4628      	mov	r0, r5
 80080a2:	f000 febd 	bl	8008e20 <_sbrk_r>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	d103      	bne.n	80080b2 <sbrk_aligned+0x26>
 80080aa:	f04f 34ff 	mov.w	r4, #4294967295
 80080ae:	4620      	mov	r0, r4
 80080b0:	bd70      	pop	{r4, r5, r6, pc}
 80080b2:	1cc4      	adds	r4, r0, #3
 80080b4:	f024 0403 	bic.w	r4, r4, #3
 80080b8:	42a0      	cmp	r0, r4
 80080ba:	d0f8      	beq.n	80080ae <sbrk_aligned+0x22>
 80080bc:	1a21      	subs	r1, r4, r0
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 feae 	bl	8008e20 <_sbrk_r>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d1f2      	bne.n	80080ae <sbrk_aligned+0x22>
 80080c8:	e7ef      	b.n	80080aa <sbrk_aligned+0x1e>
 80080ca:	bf00      	nop
 80080cc:	200008b0 	.word	0x200008b0

080080d0 <_malloc_r>:
 80080d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d4:	1ccd      	adds	r5, r1, #3
 80080d6:	f025 0503 	bic.w	r5, r5, #3
 80080da:	3508      	adds	r5, #8
 80080dc:	2d0c      	cmp	r5, #12
 80080de:	bf38      	it	cc
 80080e0:	250c      	movcc	r5, #12
 80080e2:	2d00      	cmp	r5, #0
 80080e4:	4606      	mov	r6, r0
 80080e6:	db01      	blt.n	80080ec <_malloc_r+0x1c>
 80080e8:	42a9      	cmp	r1, r5
 80080ea:	d904      	bls.n	80080f6 <_malloc_r+0x26>
 80080ec:	230c      	movs	r3, #12
 80080ee:	6033      	str	r3, [r6, #0]
 80080f0:	2000      	movs	r0, #0
 80080f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081cc <_malloc_r+0xfc>
 80080fa:	f000 f869 	bl	80081d0 <__malloc_lock>
 80080fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008102:	461c      	mov	r4, r3
 8008104:	bb44      	cbnz	r4, 8008158 <_malloc_r+0x88>
 8008106:	4629      	mov	r1, r5
 8008108:	4630      	mov	r0, r6
 800810a:	f7ff ffbf 	bl	800808c <sbrk_aligned>
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	4604      	mov	r4, r0
 8008112:	d158      	bne.n	80081c6 <_malloc_r+0xf6>
 8008114:	f8d8 4000 	ldr.w	r4, [r8]
 8008118:	4627      	mov	r7, r4
 800811a:	2f00      	cmp	r7, #0
 800811c:	d143      	bne.n	80081a6 <_malloc_r+0xd6>
 800811e:	2c00      	cmp	r4, #0
 8008120:	d04b      	beq.n	80081ba <_malloc_r+0xea>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	4639      	mov	r1, r7
 8008126:	4630      	mov	r0, r6
 8008128:	eb04 0903 	add.w	r9, r4, r3
 800812c:	f000 fe78 	bl	8008e20 <_sbrk_r>
 8008130:	4581      	cmp	r9, r0
 8008132:	d142      	bne.n	80081ba <_malloc_r+0xea>
 8008134:	6821      	ldr	r1, [r4, #0]
 8008136:	1a6d      	subs	r5, r5, r1
 8008138:	4629      	mov	r1, r5
 800813a:	4630      	mov	r0, r6
 800813c:	f7ff ffa6 	bl	800808c <sbrk_aligned>
 8008140:	3001      	adds	r0, #1
 8008142:	d03a      	beq.n	80081ba <_malloc_r+0xea>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	442b      	add	r3, r5
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	f8d8 3000 	ldr.w	r3, [r8]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	bb62      	cbnz	r2, 80081ac <_malloc_r+0xdc>
 8008152:	f8c8 7000 	str.w	r7, [r8]
 8008156:	e00f      	b.n	8008178 <_malloc_r+0xa8>
 8008158:	6822      	ldr	r2, [r4, #0]
 800815a:	1b52      	subs	r2, r2, r5
 800815c:	d420      	bmi.n	80081a0 <_malloc_r+0xd0>
 800815e:	2a0b      	cmp	r2, #11
 8008160:	d917      	bls.n	8008192 <_malloc_r+0xc2>
 8008162:	1961      	adds	r1, r4, r5
 8008164:	42a3      	cmp	r3, r4
 8008166:	6025      	str	r5, [r4, #0]
 8008168:	bf18      	it	ne
 800816a:	6059      	strne	r1, [r3, #4]
 800816c:	6863      	ldr	r3, [r4, #4]
 800816e:	bf08      	it	eq
 8008170:	f8c8 1000 	streq.w	r1, [r8]
 8008174:	5162      	str	r2, [r4, r5]
 8008176:	604b      	str	r3, [r1, #4]
 8008178:	4630      	mov	r0, r6
 800817a:	f000 f82f 	bl	80081dc <__malloc_unlock>
 800817e:	f104 000b 	add.w	r0, r4, #11
 8008182:	1d23      	adds	r3, r4, #4
 8008184:	f020 0007 	bic.w	r0, r0, #7
 8008188:	1ac2      	subs	r2, r0, r3
 800818a:	bf1c      	itt	ne
 800818c:	1a1b      	subne	r3, r3, r0
 800818e:	50a3      	strne	r3, [r4, r2]
 8008190:	e7af      	b.n	80080f2 <_malloc_r+0x22>
 8008192:	6862      	ldr	r2, [r4, #4]
 8008194:	42a3      	cmp	r3, r4
 8008196:	bf0c      	ite	eq
 8008198:	f8c8 2000 	streq.w	r2, [r8]
 800819c:	605a      	strne	r2, [r3, #4]
 800819e:	e7eb      	b.n	8008178 <_malloc_r+0xa8>
 80081a0:	4623      	mov	r3, r4
 80081a2:	6864      	ldr	r4, [r4, #4]
 80081a4:	e7ae      	b.n	8008104 <_malloc_r+0x34>
 80081a6:	463c      	mov	r4, r7
 80081a8:	687f      	ldr	r7, [r7, #4]
 80081aa:	e7b6      	b.n	800811a <_malloc_r+0x4a>
 80081ac:	461a      	mov	r2, r3
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d1fb      	bne.n	80081ac <_malloc_r+0xdc>
 80081b4:	2300      	movs	r3, #0
 80081b6:	6053      	str	r3, [r2, #4]
 80081b8:	e7de      	b.n	8008178 <_malloc_r+0xa8>
 80081ba:	230c      	movs	r3, #12
 80081bc:	6033      	str	r3, [r6, #0]
 80081be:	4630      	mov	r0, r6
 80081c0:	f000 f80c 	bl	80081dc <__malloc_unlock>
 80081c4:	e794      	b.n	80080f0 <_malloc_r+0x20>
 80081c6:	6005      	str	r5, [r0, #0]
 80081c8:	e7d6      	b.n	8008178 <_malloc_r+0xa8>
 80081ca:	bf00      	nop
 80081cc:	200008b4 	.word	0x200008b4

080081d0 <__malloc_lock>:
 80081d0:	4801      	ldr	r0, [pc, #4]	@ (80081d8 <__malloc_lock+0x8>)
 80081d2:	f7ff b8ac 	b.w	800732e <__retarget_lock_acquire_recursive>
 80081d6:	bf00      	nop
 80081d8:	200008ac 	.word	0x200008ac

080081dc <__malloc_unlock>:
 80081dc:	4801      	ldr	r0, [pc, #4]	@ (80081e4 <__malloc_unlock+0x8>)
 80081de:	f7ff b8a7 	b.w	8007330 <__retarget_lock_release_recursive>
 80081e2:	bf00      	nop
 80081e4:	200008ac 	.word	0x200008ac

080081e8 <_Balloc>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	69c6      	ldr	r6, [r0, #28]
 80081ec:	4604      	mov	r4, r0
 80081ee:	460d      	mov	r5, r1
 80081f0:	b976      	cbnz	r6, 8008210 <_Balloc+0x28>
 80081f2:	2010      	movs	r0, #16
 80081f4:	f7ff ff42 	bl	800807c <malloc>
 80081f8:	4602      	mov	r2, r0
 80081fa:	61e0      	str	r0, [r4, #28]
 80081fc:	b920      	cbnz	r0, 8008208 <_Balloc+0x20>
 80081fe:	4b18      	ldr	r3, [pc, #96]	@ (8008260 <_Balloc+0x78>)
 8008200:	4818      	ldr	r0, [pc, #96]	@ (8008264 <_Balloc+0x7c>)
 8008202:	216b      	movs	r1, #107	@ 0x6b
 8008204:	f000 fe2a 	bl	8008e5c <__assert_func>
 8008208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800820c:	6006      	str	r6, [r0, #0]
 800820e:	60c6      	str	r6, [r0, #12]
 8008210:	69e6      	ldr	r6, [r4, #28]
 8008212:	68f3      	ldr	r3, [r6, #12]
 8008214:	b183      	cbz	r3, 8008238 <_Balloc+0x50>
 8008216:	69e3      	ldr	r3, [r4, #28]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800821e:	b9b8      	cbnz	r0, 8008250 <_Balloc+0x68>
 8008220:	2101      	movs	r1, #1
 8008222:	fa01 f605 	lsl.w	r6, r1, r5
 8008226:	1d72      	adds	r2, r6, #5
 8008228:	0092      	lsls	r2, r2, #2
 800822a:	4620      	mov	r0, r4
 800822c:	f000 fe34 	bl	8008e98 <_calloc_r>
 8008230:	b160      	cbz	r0, 800824c <_Balloc+0x64>
 8008232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008236:	e00e      	b.n	8008256 <_Balloc+0x6e>
 8008238:	2221      	movs	r2, #33	@ 0x21
 800823a:	2104      	movs	r1, #4
 800823c:	4620      	mov	r0, r4
 800823e:	f000 fe2b 	bl	8008e98 <_calloc_r>
 8008242:	69e3      	ldr	r3, [r4, #28]
 8008244:	60f0      	str	r0, [r6, #12]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e4      	bne.n	8008216 <_Balloc+0x2e>
 800824c:	2000      	movs	r0, #0
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	6802      	ldr	r2, [r0, #0]
 8008252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008256:	2300      	movs	r3, #0
 8008258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800825c:	e7f7      	b.n	800824e <_Balloc+0x66>
 800825e:	bf00      	nop
 8008260:	080094f9 	.word	0x080094f9
 8008264:	08009579 	.word	0x08009579

08008268 <_Bfree>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	69c6      	ldr	r6, [r0, #28]
 800826c:	4605      	mov	r5, r0
 800826e:	460c      	mov	r4, r1
 8008270:	b976      	cbnz	r6, 8008290 <_Bfree+0x28>
 8008272:	2010      	movs	r0, #16
 8008274:	f7ff ff02 	bl	800807c <malloc>
 8008278:	4602      	mov	r2, r0
 800827a:	61e8      	str	r0, [r5, #28]
 800827c:	b920      	cbnz	r0, 8008288 <_Bfree+0x20>
 800827e:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <_Bfree+0x3c>)
 8008280:	4809      	ldr	r0, [pc, #36]	@ (80082a8 <_Bfree+0x40>)
 8008282:	218f      	movs	r1, #143	@ 0x8f
 8008284:	f000 fdea 	bl	8008e5c <__assert_func>
 8008288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800828c:	6006      	str	r6, [r0, #0]
 800828e:	60c6      	str	r6, [r0, #12]
 8008290:	b13c      	cbz	r4, 80082a2 <_Bfree+0x3a>
 8008292:	69eb      	ldr	r3, [r5, #28]
 8008294:	6862      	ldr	r2, [r4, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800829c:	6021      	str	r1, [r4, #0]
 800829e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	080094f9 	.word	0x080094f9
 80082a8:	08009579 	.word	0x08009579

080082ac <__multadd>:
 80082ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b0:	690d      	ldr	r5, [r1, #16]
 80082b2:	4607      	mov	r7, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	461e      	mov	r6, r3
 80082b8:	f101 0c14 	add.w	ip, r1, #20
 80082bc:	2000      	movs	r0, #0
 80082be:	f8dc 3000 	ldr.w	r3, [ip]
 80082c2:	b299      	uxth	r1, r3
 80082c4:	fb02 6101 	mla	r1, r2, r1, r6
 80082c8:	0c1e      	lsrs	r6, r3, #16
 80082ca:	0c0b      	lsrs	r3, r1, #16
 80082cc:	fb02 3306 	mla	r3, r2, r6, r3
 80082d0:	b289      	uxth	r1, r1
 80082d2:	3001      	adds	r0, #1
 80082d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082d8:	4285      	cmp	r5, r0
 80082da:	f84c 1b04 	str.w	r1, [ip], #4
 80082de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082e2:	dcec      	bgt.n	80082be <__multadd+0x12>
 80082e4:	b30e      	cbz	r6, 800832a <__multadd+0x7e>
 80082e6:	68a3      	ldr	r3, [r4, #8]
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	dc19      	bgt.n	8008320 <__multadd+0x74>
 80082ec:	6861      	ldr	r1, [r4, #4]
 80082ee:	4638      	mov	r0, r7
 80082f0:	3101      	adds	r1, #1
 80082f2:	f7ff ff79 	bl	80081e8 <_Balloc>
 80082f6:	4680      	mov	r8, r0
 80082f8:	b928      	cbnz	r0, 8008306 <__multadd+0x5a>
 80082fa:	4602      	mov	r2, r0
 80082fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008330 <__multadd+0x84>)
 80082fe:	480d      	ldr	r0, [pc, #52]	@ (8008334 <__multadd+0x88>)
 8008300:	21ba      	movs	r1, #186	@ 0xba
 8008302:	f000 fdab 	bl	8008e5c <__assert_func>
 8008306:	6922      	ldr	r2, [r4, #16]
 8008308:	3202      	adds	r2, #2
 800830a:	f104 010c 	add.w	r1, r4, #12
 800830e:	0092      	lsls	r2, r2, #2
 8008310:	300c      	adds	r0, #12
 8008312:	f000 fd95 	bl	8008e40 <memcpy>
 8008316:	4621      	mov	r1, r4
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff ffa5 	bl	8008268 <_Bfree>
 800831e:	4644      	mov	r4, r8
 8008320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008324:	3501      	adds	r5, #1
 8008326:	615e      	str	r6, [r3, #20]
 8008328:	6125      	str	r5, [r4, #16]
 800832a:	4620      	mov	r0, r4
 800832c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008330:	08009568 	.word	0x08009568
 8008334:	08009579 	.word	0x08009579

08008338 <__hi0bits>:
 8008338:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800833c:	4603      	mov	r3, r0
 800833e:	bf36      	itet	cc
 8008340:	0403      	lslcc	r3, r0, #16
 8008342:	2000      	movcs	r0, #0
 8008344:	2010      	movcc	r0, #16
 8008346:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800834a:	bf3c      	itt	cc
 800834c:	021b      	lslcc	r3, r3, #8
 800834e:	3008      	addcc	r0, #8
 8008350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008354:	bf3c      	itt	cc
 8008356:	011b      	lslcc	r3, r3, #4
 8008358:	3004      	addcc	r0, #4
 800835a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800835e:	bf3c      	itt	cc
 8008360:	009b      	lslcc	r3, r3, #2
 8008362:	3002      	addcc	r0, #2
 8008364:	2b00      	cmp	r3, #0
 8008366:	db05      	blt.n	8008374 <__hi0bits+0x3c>
 8008368:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800836c:	f100 0001 	add.w	r0, r0, #1
 8008370:	bf08      	it	eq
 8008372:	2020      	moveq	r0, #32
 8008374:	4770      	bx	lr

08008376 <__lo0bits>:
 8008376:	6803      	ldr	r3, [r0, #0]
 8008378:	4602      	mov	r2, r0
 800837a:	f013 0007 	ands.w	r0, r3, #7
 800837e:	d00b      	beq.n	8008398 <__lo0bits+0x22>
 8008380:	07d9      	lsls	r1, r3, #31
 8008382:	d421      	bmi.n	80083c8 <__lo0bits+0x52>
 8008384:	0798      	lsls	r0, r3, #30
 8008386:	bf49      	itett	mi
 8008388:	085b      	lsrmi	r3, r3, #1
 800838a:	089b      	lsrpl	r3, r3, #2
 800838c:	2001      	movmi	r0, #1
 800838e:	6013      	strmi	r3, [r2, #0]
 8008390:	bf5c      	itt	pl
 8008392:	6013      	strpl	r3, [r2, #0]
 8008394:	2002      	movpl	r0, #2
 8008396:	4770      	bx	lr
 8008398:	b299      	uxth	r1, r3
 800839a:	b909      	cbnz	r1, 80083a0 <__lo0bits+0x2a>
 800839c:	0c1b      	lsrs	r3, r3, #16
 800839e:	2010      	movs	r0, #16
 80083a0:	b2d9      	uxtb	r1, r3
 80083a2:	b909      	cbnz	r1, 80083a8 <__lo0bits+0x32>
 80083a4:	3008      	adds	r0, #8
 80083a6:	0a1b      	lsrs	r3, r3, #8
 80083a8:	0719      	lsls	r1, r3, #28
 80083aa:	bf04      	itt	eq
 80083ac:	091b      	lsreq	r3, r3, #4
 80083ae:	3004      	addeq	r0, #4
 80083b0:	0799      	lsls	r1, r3, #30
 80083b2:	bf04      	itt	eq
 80083b4:	089b      	lsreq	r3, r3, #2
 80083b6:	3002      	addeq	r0, #2
 80083b8:	07d9      	lsls	r1, r3, #31
 80083ba:	d403      	bmi.n	80083c4 <__lo0bits+0x4e>
 80083bc:	085b      	lsrs	r3, r3, #1
 80083be:	f100 0001 	add.w	r0, r0, #1
 80083c2:	d003      	beq.n	80083cc <__lo0bits+0x56>
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	4770      	bx	lr
 80083c8:	2000      	movs	r0, #0
 80083ca:	4770      	bx	lr
 80083cc:	2020      	movs	r0, #32
 80083ce:	4770      	bx	lr

080083d0 <__i2b>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	460c      	mov	r4, r1
 80083d4:	2101      	movs	r1, #1
 80083d6:	f7ff ff07 	bl	80081e8 <_Balloc>
 80083da:	4602      	mov	r2, r0
 80083dc:	b928      	cbnz	r0, 80083ea <__i2b+0x1a>
 80083de:	4b05      	ldr	r3, [pc, #20]	@ (80083f4 <__i2b+0x24>)
 80083e0:	4805      	ldr	r0, [pc, #20]	@ (80083f8 <__i2b+0x28>)
 80083e2:	f240 1145 	movw	r1, #325	@ 0x145
 80083e6:	f000 fd39 	bl	8008e5c <__assert_func>
 80083ea:	2301      	movs	r3, #1
 80083ec:	6144      	str	r4, [r0, #20]
 80083ee:	6103      	str	r3, [r0, #16]
 80083f0:	bd10      	pop	{r4, pc}
 80083f2:	bf00      	nop
 80083f4:	08009568 	.word	0x08009568
 80083f8:	08009579 	.word	0x08009579

080083fc <__multiply>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	4617      	mov	r7, r2
 8008402:	690a      	ldr	r2, [r1, #16]
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	429a      	cmp	r2, r3
 8008408:	bfa8      	it	ge
 800840a:	463b      	movge	r3, r7
 800840c:	4689      	mov	r9, r1
 800840e:	bfa4      	itt	ge
 8008410:	460f      	movge	r7, r1
 8008412:	4699      	movge	r9, r3
 8008414:	693d      	ldr	r5, [r7, #16]
 8008416:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	eb05 060a 	add.w	r6, r5, sl
 8008422:	42b3      	cmp	r3, r6
 8008424:	b085      	sub	sp, #20
 8008426:	bfb8      	it	lt
 8008428:	3101      	addlt	r1, #1
 800842a:	f7ff fedd 	bl	80081e8 <_Balloc>
 800842e:	b930      	cbnz	r0, 800843e <__multiply+0x42>
 8008430:	4602      	mov	r2, r0
 8008432:	4b41      	ldr	r3, [pc, #260]	@ (8008538 <__multiply+0x13c>)
 8008434:	4841      	ldr	r0, [pc, #260]	@ (800853c <__multiply+0x140>)
 8008436:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800843a:	f000 fd0f 	bl	8008e5c <__assert_func>
 800843e:	f100 0414 	add.w	r4, r0, #20
 8008442:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008446:	4623      	mov	r3, r4
 8008448:	2200      	movs	r2, #0
 800844a:	4573      	cmp	r3, lr
 800844c:	d320      	bcc.n	8008490 <__multiply+0x94>
 800844e:	f107 0814 	add.w	r8, r7, #20
 8008452:	f109 0114 	add.w	r1, r9, #20
 8008456:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800845a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800845e:	9302      	str	r3, [sp, #8]
 8008460:	1beb      	subs	r3, r5, r7
 8008462:	3b15      	subs	r3, #21
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	3304      	adds	r3, #4
 800846a:	3715      	adds	r7, #21
 800846c:	42bd      	cmp	r5, r7
 800846e:	bf38      	it	cc
 8008470:	2304      	movcc	r3, #4
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	9b02      	ldr	r3, [sp, #8]
 8008476:	9103      	str	r1, [sp, #12]
 8008478:	428b      	cmp	r3, r1
 800847a:	d80c      	bhi.n	8008496 <__multiply+0x9a>
 800847c:	2e00      	cmp	r6, #0
 800847e:	dd03      	ble.n	8008488 <__multiply+0x8c>
 8008480:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008484:	2b00      	cmp	r3, #0
 8008486:	d055      	beq.n	8008534 <__multiply+0x138>
 8008488:	6106      	str	r6, [r0, #16]
 800848a:	b005      	add	sp, #20
 800848c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008490:	f843 2b04 	str.w	r2, [r3], #4
 8008494:	e7d9      	b.n	800844a <__multiply+0x4e>
 8008496:	f8b1 a000 	ldrh.w	sl, [r1]
 800849a:	f1ba 0f00 	cmp.w	sl, #0
 800849e:	d01f      	beq.n	80084e0 <__multiply+0xe4>
 80084a0:	46c4      	mov	ip, r8
 80084a2:	46a1      	mov	r9, r4
 80084a4:	2700      	movs	r7, #0
 80084a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084aa:	f8d9 3000 	ldr.w	r3, [r9]
 80084ae:	fa1f fb82 	uxth.w	fp, r2
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80084b8:	443b      	add	r3, r7
 80084ba:	f8d9 7000 	ldr.w	r7, [r9]
 80084be:	0c12      	lsrs	r2, r2, #16
 80084c0:	0c3f      	lsrs	r7, r7, #16
 80084c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80084c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084d0:	4565      	cmp	r5, ip
 80084d2:	f849 3b04 	str.w	r3, [r9], #4
 80084d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80084da:	d8e4      	bhi.n	80084a6 <__multiply+0xaa>
 80084dc:	9b01      	ldr	r3, [sp, #4]
 80084de:	50e7      	str	r7, [r4, r3]
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80084e6:	3104      	adds	r1, #4
 80084e8:	f1b9 0f00 	cmp.w	r9, #0
 80084ec:	d020      	beq.n	8008530 <__multiply+0x134>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	4647      	mov	r7, r8
 80084f2:	46a4      	mov	ip, r4
 80084f4:	f04f 0a00 	mov.w	sl, #0
 80084f8:	f8b7 b000 	ldrh.w	fp, [r7]
 80084fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008500:	fb09 220b 	mla	r2, r9, fp, r2
 8008504:	4452      	add	r2, sl
 8008506:	b29b      	uxth	r3, r3
 8008508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800850c:	f84c 3b04 	str.w	r3, [ip], #4
 8008510:	f857 3b04 	ldr.w	r3, [r7], #4
 8008514:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008518:	f8bc 3000 	ldrh.w	r3, [ip]
 800851c:	fb09 330a 	mla	r3, r9, sl, r3
 8008520:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008524:	42bd      	cmp	r5, r7
 8008526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800852a:	d8e5      	bhi.n	80084f8 <__multiply+0xfc>
 800852c:	9a01      	ldr	r2, [sp, #4]
 800852e:	50a3      	str	r3, [r4, r2]
 8008530:	3404      	adds	r4, #4
 8008532:	e79f      	b.n	8008474 <__multiply+0x78>
 8008534:	3e01      	subs	r6, #1
 8008536:	e7a1      	b.n	800847c <__multiply+0x80>
 8008538:	08009568 	.word	0x08009568
 800853c:	08009579 	.word	0x08009579

08008540 <__pow5mult>:
 8008540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008544:	4615      	mov	r5, r2
 8008546:	f012 0203 	ands.w	r2, r2, #3
 800854a:	4607      	mov	r7, r0
 800854c:	460e      	mov	r6, r1
 800854e:	d007      	beq.n	8008560 <__pow5mult+0x20>
 8008550:	4c25      	ldr	r4, [pc, #148]	@ (80085e8 <__pow5mult+0xa8>)
 8008552:	3a01      	subs	r2, #1
 8008554:	2300      	movs	r3, #0
 8008556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800855a:	f7ff fea7 	bl	80082ac <__multadd>
 800855e:	4606      	mov	r6, r0
 8008560:	10ad      	asrs	r5, r5, #2
 8008562:	d03d      	beq.n	80085e0 <__pow5mult+0xa0>
 8008564:	69fc      	ldr	r4, [r7, #28]
 8008566:	b97c      	cbnz	r4, 8008588 <__pow5mult+0x48>
 8008568:	2010      	movs	r0, #16
 800856a:	f7ff fd87 	bl	800807c <malloc>
 800856e:	4602      	mov	r2, r0
 8008570:	61f8      	str	r0, [r7, #28]
 8008572:	b928      	cbnz	r0, 8008580 <__pow5mult+0x40>
 8008574:	4b1d      	ldr	r3, [pc, #116]	@ (80085ec <__pow5mult+0xac>)
 8008576:	481e      	ldr	r0, [pc, #120]	@ (80085f0 <__pow5mult+0xb0>)
 8008578:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800857c:	f000 fc6e 	bl	8008e5c <__assert_func>
 8008580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008584:	6004      	str	r4, [r0, #0]
 8008586:	60c4      	str	r4, [r0, #12]
 8008588:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800858c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008590:	b94c      	cbnz	r4, 80085a6 <__pow5mult+0x66>
 8008592:	f240 2171 	movw	r1, #625	@ 0x271
 8008596:	4638      	mov	r0, r7
 8008598:	f7ff ff1a 	bl	80083d0 <__i2b>
 800859c:	2300      	movs	r3, #0
 800859e:	f8c8 0008 	str.w	r0, [r8, #8]
 80085a2:	4604      	mov	r4, r0
 80085a4:	6003      	str	r3, [r0, #0]
 80085a6:	f04f 0900 	mov.w	r9, #0
 80085aa:	07eb      	lsls	r3, r5, #31
 80085ac:	d50a      	bpl.n	80085c4 <__pow5mult+0x84>
 80085ae:	4631      	mov	r1, r6
 80085b0:	4622      	mov	r2, r4
 80085b2:	4638      	mov	r0, r7
 80085b4:	f7ff ff22 	bl	80083fc <__multiply>
 80085b8:	4631      	mov	r1, r6
 80085ba:	4680      	mov	r8, r0
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff fe53 	bl	8008268 <_Bfree>
 80085c2:	4646      	mov	r6, r8
 80085c4:	106d      	asrs	r5, r5, #1
 80085c6:	d00b      	beq.n	80085e0 <__pow5mult+0xa0>
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	b938      	cbnz	r0, 80085dc <__pow5mult+0x9c>
 80085cc:	4622      	mov	r2, r4
 80085ce:	4621      	mov	r1, r4
 80085d0:	4638      	mov	r0, r7
 80085d2:	f7ff ff13 	bl	80083fc <__multiply>
 80085d6:	6020      	str	r0, [r4, #0]
 80085d8:	f8c0 9000 	str.w	r9, [r0]
 80085dc:	4604      	mov	r4, r0
 80085de:	e7e4      	b.n	80085aa <__pow5mult+0x6a>
 80085e0:	4630      	mov	r0, r6
 80085e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e6:	bf00      	nop
 80085e8:	0800962c 	.word	0x0800962c
 80085ec:	080094f9 	.word	0x080094f9
 80085f0:	08009579 	.word	0x08009579

080085f4 <__lshift>:
 80085f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	460c      	mov	r4, r1
 80085fa:	6849      	ldr	r1, [r1, #4]
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	4607      	mov	r7, r0
 8008606:	4691      	mov	r9, r2
 8008608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800860c:	f108 0601 	add.w	r6, r8, #1
 8008610:	42b3      	cmp	r3, r6
 8008612:	db0b      	blt.n	800862c <__lshift+0x38>
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff fde7 	bl	80081e8 <_Balloc>
 800861a:	4605      	mov	r5, r0
 800861c:	b948      	cbnz	r0, 8008632 <__lshift+0x3e>
 800861e:	4602      	mov	r2, r0
 8008620:	4b28      	ldr	r3, [pc, #160]	@ (80086c4 <__lshift+0xd0>)
 8008622:	4829      	ldr	r0, [pc, #164]	@ (80086c8 <__lshift+0xd4>)
 8008624:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008628:	f000 fc18 	bl	8008e5c <__assert_func>
 800862c:	3101      	adds	r1, #1
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	e7ee      	b.n	8008610 <__lshift+0x1c>
 8008632:	2300      	movs	r3, #0
 8008634:	f100 0114 	add.w	r1, r0, #20
 8008638:	f100 0210 	add.w	r2, r0, #16
 800863c:	4618      	mov	r0, r3
 800863e:	4553      	cmp	r3, sl
 8008640:	db33      	blt.n	80086aa <__lshift+0xb6>
 8008642:	6920      	ldr	r0, [r4, #16]
 8008644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008648:	f104 0314 	add.w	r3, r4, #20
 800864c:	f019 091f 	ands.w	r9, r9, #31
 8008650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008654:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008658:	d02b      	beq.n	80086b2 <__lshift+0xbe>
 800865a:	f1c9 0e20 	rsb	lr, r9, #32
 800865e:	468a      	mov	sl, r1
 8008660:	2200      	movs	r2, #0
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	fa00 f009 	lsl.w	r0, r0, r9
 8008668:	4310      	orrs	r0, r2
 800866a:	f84a 0b04 	str.w	r0, [sl], #4
 800866e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008672:	459c      	cmp	ip, r3
 8008674:	fa22 f20e 	lsr.w	r2, r2, lr
 8008678:	d8f3      	bhi.n	8008662 <__lshift+0x6e>
 800867a:	ebac 0304 	sub.w	r3, ip, r4
 800867e:	3b15      	subs	r3, #21
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	3304      	adds	r3, #4
 8008686:	f104 0015 	add.w	r0, r4, #21
 800868a:	4560      	cmp	r0, ip
 800868c:	bf88      	it	hi
 800868e:	2304      	movhi	r3, #4
 8008690:	50ca      	str	r2, [r1, r3]
 8008692:	b10a      	cbz	r2, 8008698 <__lshift+0xa4>
 8008694:	f108 0602 	add.w	r6, r8, #2
 8008698:	3e01      	subs	r6, #1
 800869a:	4638      	mov	r0, r7
 800869c:	612e      	str	r6, [r5, #16]
 800869e:	4621      	mov	r1, r4
 80086a0:	f7ff fde2 	bl	8008268 <_Bfree>
 80086a4:	4628      	mov	r0, r5
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80086ae:	3301      	adds	r3, #1
 80086b0:	e7c5      	b.n	800863e <__lshift+0x4a>
 80086b2:	3904      	subs	r1, #4
 80086b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80086bc:	459c      	cmp	ip, r3
 80086be:	d8f9      	bhi.n	80086b4 <__lshift+0xc0>
 80086c0:	e7ea      	b.n	8008698 <__lshift+0xa4>
 80086c2:	bf00      	nop
 80086c4:	08009568 	.word	0x08009568
 80086c8:	08009579 	.word	0x08009579

080086cc <__mcmp>:
 80086cc:	690a      	ldr	r2, [r1, #16]
 80086ce:	4603      	mov	r3, r0
 80086d0:	6900      	ldr	r0, [r0, #16]
 80086d2:	1a80      	subs	r0, r0, r2
 80086d4:	b530      	push	{r4, r5, lr}
 80086d6:	d10e      	bne.n	80086f6 <__mcmp+0x2a>
 80086d8:	3314      	adds	r3, #20
 80086da:	3114      	adds	r1, #20
 80086dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086ec:	4295      	cmp	r5, r2
 80086ee:	d003      	beq.n	80086f8 <__mcmp+0x2c>
 80086f0:	d205      	bcs.n	80086fe <__mcmp+0x32>
 80086f2:	f04f 30ff 	mov.w	r0, #4294967295
 80086f6:	bd30      	pop	{r4, r5, pc}
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	d3f3      	bcc.n	80086e4 <__mcmp+0x18>
 80086fc:	e7fb      	b.n	80086f6 <__mcmp+0x2a>
 80086fe:	2001      	movs	r0, #1
 8008700:	e7f9      	b.n	80086f6 <__mcmp+0x2a>
	...

08008704 <__mdiff>:
 8008704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	4689      	mov	r9, r1
 800870a:	4606      	mov	r6, r0
 800870c:	4611      	mov	r1, r2
 800870e:	4648      	mov	r0, r9
 8008710:	4614      	mov	r4, r2
 8008712:	f7ff ffdb 	bl	80086cc <__mcmp>
 8008716:	1e05      	subs	r5, r0, #0
 8008718:	d112      	bne.n	8008740 <__mdiff+0x3c>
 800871a:	4629      	mov	r1, r5
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff fd63 	bl	80081e8 <_Balloc>
 8008722:	4602      	mov	r2, r0
 8008724:	b928      	cbnz	r0, 8008732 <__mdiff+0x2e>
 8008726:	4b3f      	ldr	r3, [pc, #252]	@ (8008824 <__mdiff+0x120>)
 8008728:	f240 2137 	movw	r1, #567	@ 0x237
 800872c:	483e      	ldr	r0, [pc, #248]	@ (8008828 <__mdiff+0x124>)
 800872e:	f000 fb95 	bl	8008e5c <__assert_func>
 8008732:	2301      	movs	r3, #1
 8008734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008738:	4610      	mov	r0, r2
 800873a:	b003      	add	sp, #12
 800873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008740:	bfbc      	itt	lt
 8008742:	464b      	movlt	r3, r9
 8008744:	46a1      	movlt	r9, r4
 8008746:	4630      	mov	r0, r6
 8008748:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800874c:	bfba      	itte	lt
 800874e:	461c      	movlt	r4, r3
 8008750:	2501      	movlt	r5, #1
 8008752:	2500      	movge	r5, #0
 8008754:	f7ff fd48 	bl	80081e8 <_Balloc>
 8008758:	4602      	mov	r2, r0
 800875a:	b918      	cbnz	r0, 8008764 <__mdiff+0x60>
 800875c:	4b31      	ldr	r3, [pc, #196]	@ (8008824 <__mdiff+0x120>)
 800875e:	f240 2145 	movw	r1, #581	@ 0x245
 8008762:	e7e3      	b.n	800872c <__mdiff+0x28>
 8008764:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008768:	6926      	ldr	r6, [r4, #16]
 800876a:	60c5      	str	r5, [r0, #12]
 800876c:	f109 0310 	add.w	r3, r9, #16
 8008770:	f109 0514 	add.w	r5, r9, #20
 8008774:	f104 0e14 	add.w	lr, r4, #20
 8008778:	f100 0b14 	add.w	fp, r0, #20
 800877c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008780:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	46d9      	mov	r9, fp
 8008788:	f04f 0c00 	mov.w	ip, #0
 800878c:	9b01      	ldr	r3, [sp, #4]
 800878e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008792:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	fa1f f38a 	uxth.w	r3, sl
 800879c:	4619      	mov	r1, r3
 800879e:	b283      	uxth	r3, r0
 80087a0:	1acb      	subs	r3, r1, r3
 80087a2:	0c00      	lsrs	r0, r0, #16
 80087a4:	4463      	add	r3, ip
 80087a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087b4:	4576      	cmp	r6, lr
 80087b6:	f849 3b04 	str.w	r3, [r9], #4
 80087ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087be:	d8e5      	bhi.n	800878c <__mdiff+0x88>
 80087c0:	1b33      	subs	r3, r6, r4
 80087c2:	3b15      	subs	r3, #21
 80087c4:	f023 0303 	bic.w	r3, r3, #3
 80087c8:	3415      	adds	r4, #21
 80087ca:	3304      	adds	r3, #4
 80087cc:	42a6      	cmp	r6, r4
 80087ce:	bf38      	it	cc
 80087d0:	2304      	movcc	r3, #4
 80087d2:	441d      	add	r5, r3
 80087d4:	445b      	add	r3, fp
 80087d6:	461e      	mov	r6, r3
 80087d8:	462c      	mov	r4, r5
 80087da:	4544      	cmp	r4, r8
 80087dc:	d30e      	bcc.n	80087fc <__mdiff+0xf8>
 80087de:	f108 0103 	add.w	r1, r8, #3
 80087e2:	1b49      	subs	r1, r1, r5
 80087e4:	f021 0103 	bic.w	r1, r1, #3
 80087e8:	3d03      	subs	r5, #3
 80087ea:	45a8      	cmp	r8, r5
 80087ec:	bf38      	it	cc
 80087ee:	2100      	movcc	r1, #0
 80087f0:	440b      	add	r3, r1
 80087f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087f6:	b191      	cbz	r1, 800881e <__mdiff+0x11a>
 80087f8:	6117      	str	r7, [r2, #16]
 80087fa:	e79d      	b.n	8008738 <__mdiff+0x34>
 80087fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008800:	46e6      	mov	lr, ip
 8008802:	0c08      	lsrs	r0, r1, #16
 8008804:	fa1c fc81 	uxtah	ip, ip, r1
 8008808:	4471      	add	r1, lr
 800880a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800880e:	b289      	uxth	r1, r1
 8008810:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008814:	f846 1b04 	str.w	r1, [r6], #4
 8008818:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800881c:	e7dd      	b.n	80087da <__mdiff+0xd6>
 800881e:	3f01      	subs	r7, #1
 8008820:	e7e7      	b.n	80087f2 <__mdiff+0xee>
 8008822:	bf00      	nop
 8008824:	08009568 	.word	0x08009568
 8008828:	08009579 	.word	0x08009579

0800882c <__d2b>:
 800882c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008830:	460f      	mov	r7, r1
 8008832:	2101      	movs	r1, #1
 8008834:	ec59 8b10 	vmov	r8, r9, d0
 8008838:	4616      	mov	r6, r2
 800883a:	f7ff fcd5 	bl	80081e8 <_Balloc>
 800883e:	4604      	mov	r4, r0
 8008840:	b930      	cbnz	r0, 8008850 <__d2b+0x24>
 8008842:	4602      	mov	r2, r0
 8008844:	4b23      	ldr	r3, [pc, #140]	@ (80088d4 <__d2b+0xa8>)
 8008846:	4824      	ldr	r0, [pc, #144]	@ (80088d8 <__d2b+0xac>)
 8008848:	f240 310f 	movw	r1, #783	@ 0x30f
 800884c:	f000 fb06 	bl	8008e5c <__assert_func>
 8008850:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008854:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008858:	b10d      	cbz	r5, 800885e <__d2b+0x32>
 800885a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	f1b8 0300 	subs.w	r3, r8, #0
 8008864:	d023      	beq.n	80088ae <__d2b+0x82>
 8008866:	4668      	mov	r0, sp
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	f7ff fd84 	bl	8008376 <__lo0bits>
 800886e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008872:	b1d0      	cbz	r0, 80088aa <__d2b+0x7e>
 8008874:	f1c0 0320 	rsb	r3, r0, #32
 8008878:	fa02 f303 	lsl.w	r3, r2, r3
 800887c:	430b      	orrs	r3, r1
 800887e:	40c2      	lsrs	r2, r0
 8008880:	6163      	str	r3, [r4, #20]
 8008882:	9201      	str	r2, [sp, #4]
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	61a3      	str	r3, [r4, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	bf0c      	ite	eq
 800888c:	2201      	moveq	r2, #1
 800888e:	2202      	movne	r2, #2
 8008890:	6122      	str	r2, [r4, #16]
 8008892:	b1a5      	cbz	r5, 80088be <__d2b+0x92>
 8008894:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008898:	4405      	add	r5, r0
 800889a:	603d      	str	r5, [r7, #0]
 800889c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088a0:	6030      	str	r0, [r6, #0]
 80088a2:	4620      	mov	r0, r4
 80088a4:	b003      	add	sp, #12
 80088a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088aa:	6161      	str	r1, [r4, #20]
 80088ac:	e7ea      	b.n	8008884 <__d2b+0x58>
 80088ae:	a801      	add	r0, sp, #4
 80088b0:	f7ff fd61 	bl	8008376 <__lo0bits>
 80088b4:	9b01      	ldr	r3, [sp, #4]
 80088b6:	6163      	str	r3, [r4, #20]
 80088b8:	3020      	adds	r0, #32
 80088ba:	2201      	movs	r2, #1
 80088bc:	e7e8      	b.n	8008890 <__d2b+0x64>
 80088be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80088c6:	6038      	str	r0, [r7, #0]
 80088c8:	6918      	ldr	r0, [r3, #16]
 80088ca:	f7ff fd35 	bl	8008338 <__hi0bits>
 80088ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088d2:	e7e5      	b.n	80088a0 <__d2b+0x74>
 80088d4:	08009568 	.word	0x08009568
 80088d8:	08009579 	.word	0x08009579

080088dc <__ssputs_r>:
 80088dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	688e      	ldr	r6, [r1, #8]
 80088e2:	461f      	mov	r7, r3
 80088e4:	42be      	cmp	r6, r7
 80088e6:	680b      	ldr	r3, [r1, #0]
 80088e8:	4682      	mov	sl, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	4690      	mov	r8, r2
 80088ee:	d82d      	bhi.n	800894c <__ssputs_r+0x70>
 80088f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088f8:	d026      	beq.n	8008948 <__ssputs_r+0x6c>
 80088fa:	6965      	ldr	r5, [r4, #20]
 80088fc:	6909      	ldr	r1, [r1, #16]
 80088fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008902:	eba3 0901 	sub.w	r9, r3, r1
 8008906:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800890a:	1c7b      	adds	r3, r7, #1
 800890c:	444b      	add	r3, r9
 800890e:	106d      	asrs	r5, r5, #1
 8008910:	429d      	cmp	r5, r3
 8008912:	bf38      	it	cc
 8008914:	461d      	movcc	r5, r3
 8008916:	0553      	lsls	r3, r2, #21
 8008918:	d527      	bpl.n	800896a <__ssputs_r+0x8e>
 800891a:	4629      	mov	r1, r5
 800891c:	f7ff fbd8 	bl	80080d0 <_malloc_r>
 8008920:	4606      	mov	r6, r0
 8008922:	b360      	cbz	r0, 800897e <__ssputs_r+0xa2>
 8008924:	6921      	ldr	r1, [r4, #16]
 8008926:	464a      	mov	r2, r9
 8008928:	f000 fa8a 	bl	8008e40 <memcpy>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	6126      	str	r6, [r4, #16]
 800893a:	6165      	str	r5, [r4, #20]
 800893c:	444e      	add	r6, r9
 800893e:	eba5 0509 	sub.w	r5, r5, r9
 8008942:	6026      	str	r6, [r4, #0]
 8008944:	60a5      	str	r5, [r4, #8]
 8008946:	463e      	mov	r6, r7
 8008948:	42be      	cmp	r6, r7
 800894a:	d900      	bls.n	800894e <__ssputs_r+0x72>
 800894c:	463e      	mov	r6, r7
 800894e:	6820      	ldr	r0, [r4, #0]
 8008950:	4632      	mov	r2, r6
 8008952:	4641      	mov	r1, r8
 8008954:	f000 fa28 	bl	8008da8 <memmove>
 8008958:	68a3      	ldr	r3, [r4, #8]
 800895a:	1b9b      	subs	r3, r3, r6
 800895c:	60a3      	str	r3, [r4, #8]
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	4433      	add	r3, r6
 8008962:	6023      	str	r3, [r4, #0]
 8008964:	2000      	movs	r0, #0
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	462a      	mov	r2, r5
 800896c:	f000 faba 	bl	8008ee4 <_realloc_r>
 8008970:	4606      	mov	r6, r0
 8008972:	2800      	cmp	r0, #0
 8008974:	d1e0      	bne.n	8008938 <__ssputs_r+0x5c>
 8008976:	6921      	ldr	r1, [r4, #16]
 8008978:	4650      	mov	r0, sl
 800897a:	f7ff fb35 	bl	8007fe8 <_free_r>
 800897e:	230c      	movs	r3, #12
 8008980:	f8ca 3000 	str.w	r3, [sl]
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	e7e9      	b.n	8008966 <__ssputs_r+0x8a>
	...

08008994 <_svfiprintf_r>:
 8008994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008998:	4698      	mov	r8, r3
 800899a:	898b      	ldrh	r3, [r1, #12]
 800899c:	061b      	lsls	r3, r3, #24
 800899e:	b09d      	sub	sp, #116	@ 0x74
 80089a0:	4607      	mov	r7, r0
 80089a2:	460d      	mov	r5, r1
 80089a4:	4614      	mov	r4, r2
 80089a6:	d510      	bpl.n	80089ca <_svfiprintf_r+0x36>
 80089a8:	690b      	ldr	r3, [r1, #16]
 80089aa:	b973      	cbnz	r3, 80089ca <_svfiprintf_r+0x36>
 80089ac:	2140      	movs	r1, #64	@ 0x40
 80089ae:	f7ff fb8f 	bl	80080d0 <_malloc_r>
 80089b2:	6028      	str	r0, [r5, #0]
 80089b4:	6128      	str	r0, [r5, #16]
 80089b6:	b930      	cbnz	r0, 80089c6 <_svfiprintf_r+0x32>
 80089b8:	230c      	movs	r3, #12
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	b01d      	add	sp, #116	@ 0x74
 80089c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	2340      	movs	r3, #64	@ 0x40
 80089c8:	616b      	str	r3, [r5, #20]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ce:	2320      	movs	r3, #32
 80089d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089d8:	2330      	movs	r3, #48	@ 0x30
 80089da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b78 <_svfiprintf_r+0x1e4>
 80089de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089e2:	f04f 0901 	mov.w	r9, #1
 80089e6:	4623      	mov	r3, r4
 80089e8:	469a      	mov	sl, r3
 80089ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ee:	b10a      	cbz	r2, 80089f4 <_svfiprintf_r+0x60>
 80089f0:	2a25      	cmp	r2, #37	@ 0x25
 80089f2:	d1f9      	bne.n	80089e8 <_svfiprintf_r+0x54>
 80089f4:	ebba 0b04 	subs.w	fp, sl, r4
 80089f8:	d00b      	beq.n	8008a12 <_svfiprintf_r+0x7e>
 80089fa:	465b      	mov	r3, fp
 80089fc:	4622      	mov	r2, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	4638      	mov	r0, r7
 8008a02:	f7ff ff6b 	bl	80088dc <__ssputs_r>
 8008a06:	3001      	adds	r0, #1
 8008a08:	f000 80a7 	beq.w	8008b5a <_svfiprintf_r+0x1c6>
 8008a0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a0e:	445a      	add	r2, fp
 8008a10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a12:	f89a 3000 	ldrb.w	r3, [sl]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 809f 	beq.w	8008b5a <_svfiprintf_r+0x1c6>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a26:	f10a 0a01 	add.w	sl, sl, #1
 8008a2a:	9304      	str	r3, [sp, #16]
 8008a2c:	9307      	str	r3, [sp, #28]
 8008a2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a32:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a34:	4654      	mov	r4, sl
 8008a36:	2205      	movs	r2, #5
 8008a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3c:	484e      	ldr	r0, [pc, #312]	@ (8008b78 <_svfiprintf_r+0x1e4>)
 8008a3e:	f7f7 fbc7 	bl	80001d0 <memchr>
 8008a42:	9a04      	ldr	r2, [sp, #16]
 8008a44:	b9d8      	cbnz	r0, 8008a7e <_svfiprintf_r+0xea>
 8008a46:	06d0      	lsls	r0, r2, #27
 8008a48:	bf44      	itt	mi
 8008a4a:	2320      	movmi	r3, #32
 8008a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a50:	0711      	lsls	r1, r2, #28
 8008a52:	bf44      	itt	mi
 8008a54:	232b      	movmi	r3, #43	@ 0x2b
 8008a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a60:	d015      	beq.n	8008a8e <_svfiprintf_r+0xfa>
 8008a62:	9a07      	ldr	r2, [sp, #28]
 8008a64:	4654      	mov	r4, sl
 8008a66:	2000      	movs	r0, #0
 8008a68:	f04f 0c0a 	mov.w	ip, #10
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a72:	3b30      	subs	r3, #48	@ 0x30
 8008a74:	2b09      	cmp	r3, #9
 8008a76:	d94b      	bls.n	8008b10 <_svfiprintf_r+0x17c>
 8008a78:	b1b0      	cbz	r0, 8008aa8 <_svfiprintf_r+0x114>
 8008a7a:	9207      	str	r2, [sp, #28]
 8008a7c:	e014      	b.n	8008aa8 <_svfiprintf_r+0x114>
 8008a7e:	eba0 0308 	sub.w	r3, r0, r8
 8008a82:	fa09 f303 	lsl.w	r3, r9, r3
 8008a86:	4313      	orrs	r3, r2
 8008a88:	9304      	str	r3, [sp, #16]
 8008a8a:	46a2      	mov	sl, r4
 8008a8c:	e7d2      	b.n	8008a34 <_svfiprintf_r+0xa0>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	1d19      	adds	r1, r3, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	9103      	str	r1, [sp, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfbb      	ittet	lt
 8008a9a:	425b      	neglt	r3, r3
 8008a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa0:	9307      	strge	r3, [sp, #28]
 8008aa2:	9307      	strlt	r3, [sp, #28]
 8008aa4:	bfb8      	it	lt
 8008aa6:	9204      	strlt	r2, [sp, #16]
 8008aa8:	7823      	ldrb	r3, [r4, #0]
 8008aaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aac:	d10a      	bne.n	8008ac4 <_svfiprintf_r+0x130>
 8008aae:	7863      	ldrb	r3, [r4, #1]
 8008ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ab2:	d132      	bne.n	8008b1a <_svfiprintf_r+0x186>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	1d1a      	adds	r2, r3, #4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	9203      	str	r2, [sp, #12]
 8008abc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ac0:	3402      	adds	r4, #2
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b88 <_svfiprintf_r+0x1f4>
 8008ac8:	7821      	ldrb	r1, [r4, #0]
 8008aca:	2203      	movs	r2, #3
 8008acc:	4650      	mov	r0, sl
 8008ace:	f7f7 fb7f 	bl	80001d0 <memchr>
 8008ad2:	b138      	cbz	r0, 8008ae4 <_svfiprintf_r+0x150>
 8008ad4:	9b04      	ldr	r3, [sp, #16]
 8008ad6:	eba0 000a 	sub.w	r0, r0, sl
 8008ada:	2240      	movs	r2, #64	@ 0x40
 8008adc:	4082      	lsls	r2, r0
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	3401      	adds	r4, #1
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae8:	4824      	ldr	r0, [pc, #144]	@ (8008b7c <_svfiprintf_r+0x1e8>)
 8008aea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008aee:	2206      	movs	r2, #6
 8008af0:	f7f7 fb6e 	bl	80001d0 <memchr>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d036      	beq.n	8008b66 <_svfiprintf_r+0x1d2>
 8008af8:	4b21      	ldr	r3, [pc, #132]	@ (8008b80 <_svfiprintf_r+0x1ec>)
 8008afa:	bb1b      	cbnz	r3, 8008b44 <_svfiprintf_r+0x1b0>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	3307      	adds	r3, #7
 8008b00:	f023 0307 	bic.w	r3, r3, #7
 8008b04:	3308      	adds	r3, #8
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0a:	4433      	add	r3, r6
 8008b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b0e:	e76a      	b.n	80089e6 <_svfiprintf_r+0x52>
 8008b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b14:	460c      	mov	r4, r1
 8008b16:	2001      	movs	r0, #1
 8008b18:	e7a8      	b.n	8008a6c <_svfiprintf_r+0xd8>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	3401      	adds	r4, #1
 8008b1e:	9305      	str	r3, [sp, #20]
 8008b20:	4619      	mov	r1, r3
 8008b22:	f04f 0c0a 	mov.w	ip, #10
 8008b26:	4620      	mov	r0, r4
 8008b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b2c:	3a30      	subs	r2, #48	@ 0x30
 8008b2e:	2a09      	cmp	r2, #9
 8008b30:	d903      	bls.n	8008b3a <_svfiprintf_r+0x1a6>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0c6      	beq.n	8008ac4 <_svfiprintf_r+0x130>
 8008b36:	9105      	str	r1, [sp, #20]
 8008b38:	e7c4      	b.n	8008ac4 <_svfiprintf_r+0x130>
 8008b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b3e:	4604      	mov	r4, r0
 8008b40:	2301      	movs	r3, #1
 8008b42:	e7f0      	b.n	8008b26 <_svfiprintf_r+0x192>
 8008b44:	ab03      	add	r3, sp, #12
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	462a      	mov	r2, r5
 8008b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b84 <_svfiprintf_r+0x1f0>)
 8008b4c:	a904      	add	r1, sp, #16
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f7fd fd6a 	bl	8006628 <_printf_float>
 8008b54:	1c42      	adds	r2, r0, #1
 8008b56:	4606      	mov	r6, r0
 8008b58:	d1d6      	bne.n	8008b08 <_svfiprintf_r+0x174>
 8008b5a:	89ab      	ldrh	r3, [r5, #12]
 8008b5c:	065b      	lsls	r3, r3, #25
 8008b5e:	f53f af2d 	bmi.w	80089bc <_svfiprintf_r+0x28>
 8008b62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b64:	e72c      	b.n	80089c0 <_svfiprintf_r+0x2c>
 8008b66:	ab03      	add	r3, sp, #12
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	462a      	mov	r2, r5
 8008b6c:	4b05      	ldr	r3, [pc, #20]	@ (8008b84 <_svfiprintf_r+0x1f0>)
 8008b6e:	a904      	add	r1, sp, #16
 8008b70:	4638      	mov	r0, r7
 8008b72:	f7fd fff1 	bl	8006b58 <_printf_i>
 8008b76:	e7ed      	b.n	8008b54 <_svfiprintf_r+0x1c0>
 8008b78:	080095d2 	.word	0x080095d2
 8008b7c:	080095dc 	.word	0x080095dc
 8008b80:	08006629 	.word	0x08006629
 8008b84:	080088dd 	.word	0x080088dd
 8008b88:	080095d8 	.word	0x080095d8

08008b8c <__sflush_r>:
 8008b8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	0716      	lsls	r6, r2, #28
 8008b96:	4605      	mov	r5, r0
 8008b98:	460c      	mov	r4, r1
 8008b9a:	d454      	bmi.n	8008c46 <__sflush_r+0xba>
 8008b9c:	684b      	ldr	r3, [r1, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dc02      	bgt.n	8008ba8 <__sflush_r+0x1c>
 8008ba2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dd48      	ble.n	8008c3a <__sflush_r+0xae>
 8008ba8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008baa:	2e00      	cmp	r6, #0
 8008bac:	d045      	beq.n	8008c3a <__sflush_r+0xae>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bb4:	682f      	ldr	r7, [r5, #0]
 8008bb6:	6a21      	ldr	r1, [r4, #32]
 8008bb8:	602b      	str	r3, [r5, #0]
 8008bba:	d030      	beq.n	8008c1e <__sflush_r+0x92>
 8008bbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	0759      	lsls	r1, r3, #29
 8008bc2:	d505      	bpl.n	8008bd0 <__sflush_r+0x44>
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	1ad2      	subs	r2, r2, r3
 8008bc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bca:	b10b      	cbz	r3, 8008bd0 <__sflush_r+0x44>
 8008bcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bd4:	6a21      	ldr	r1, [r4, #32]
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	47b0      	blx	r6
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	d106      	bne.n	8008bee <__sflush_r+0x62>
 8008be0:	6829      	ldr	r1, [r5, #0]
 8008be2:	291d      	cmp	r1, #29
 8008be4:	d82b      	bhi.n	8008c3e <__sflush_r+0xb2>
 8008be6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c90 <__sflush_r+0x104>)
 8008be8:	40ca      	lsrs	r2, r1
 8008bea:	07d6      	lsls	r6, r2, #31
 8008bec:	d527      	bpl.n	8008c3e <__sflush_r+0xb2>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	6062      	str	r2, [r4, #4]
 8008bf2:	04d9      	lsls	r1, r3, #19
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	6022      	str	r2, [r4, #0]
 8008bf8:	d504      	bpl.n	8008c04 <__sflush_r+0x78>
 8008bfa:	1c42      	adds	r2, r0, #1
 8008bfc:	d101      	bne.n	8008c02 <__sflush_r+0x76>
 8008bfe:	682b      	ldr	r3, [r5, #0]
 8008c00:	b903      	cbnz	r3, 8008c04 <__sflush_r+0x78>
 8008c02:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c06:	602f      	str	r7, [r5, #0]
 8008c08:	b1b9      	cbz	r1, 8008c3a <__sflush_r+0xae>
 8008c0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	d002      	beq.n	8008c18 <__sflush_r+0x8c>
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7ff f9e8 	bl	8007fe8 <_free_r>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c1c:	e00d      	b.n	8008c3a <__sflush_r+0xae>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b0      	blx	r6
 8008c24:	4602      	mov	r2, r0
 8008c26:	1c50      	adds	r0, r2, #1
 8008c28:	d1c9      	bne.n	8008bbe <__sflush_r+0x32>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0c6      	beq.n	8008bbe <__sflush_r+0x32>
 8008c30:	2b1d      	cmp	r3, #29
 8008c32:	d001      	beq.n	8008c38 <__sflush_r+0xac>
 8008c34:	2b16      	cmp	r3, #22
 8008c36:	d11e      	bne.n	8008c76 <__sflush_r+0xea>
 8008c38:	602f      	str	r7, [r5, #0]
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e022      	b.n	8008c84 <__sflush_r+0xf8>
 8008c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c42:	b21b      	sxth	r3, r3
 8008c44:	e01b      	b.n	8008c7e <__sflush_r+0xf2>
 8008c46:	690f      	ldr	r7, [r1, #16]
 8008c48:	2f00      	cmp	r7, #0
 8008c4a:	d0f6      	beq.n	8008c3a <__sflush_r+0xae>
 8008c4c:	0793      	lsls	r3, r2, #30
 8008c4e:	680e      	ldr	r6, [r1, #0]
 8008c50:	bf08      	it	eq
 8008c52:	694b      	ldreq	r3, [r1, #20]
 8008c54:	600f      	str	r7, [r1, #0]
 8008c56:	bf18      	it	ne
 8008c58:	2300      	movne	r3, #0
 8008c5a:	eba6 0807 	sub.w	r8, r6, r7
 8008c5e:	608b      	str	r3, [r1, #8]
 8008c60:	f1b8 0f00 	cmp.w	r8, #0
 8008c64:	dde9      	ble.n	8008c3a <__sflush_r+0xae>
 8008c66:	6a21      	ldr	r1, [r4, #32]
 8008c68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c6a:	4643      	mov	r3, r8
 8008c6c:	463a      	mov	r2, r7
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b0      	blx	r6
 8008c72:	2800      	cmp	r0, #0
 8008c74:	dc08      	bgt.n	8008c88 <__sflush_r+0xfc>
 8008c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c88:	4407      	add	r7, r0
 8008c8a:	eba8 0800 	sub.w	r8, r8, r0
 8008c8e:	e7e7      	b.n	8008c60 <__sflush_r+0xd4>
 8008c90:	20400001 	.word	0x20400001

08008c94 <_fflush_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	690b      	ldr	r3, [r1, #16]
 8008c98:	4605      	mov	r5, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	b913      	cbnz	r3, 8008ca4 <_fflush_r+0x10>
 8008c9e:	2500      	movs	r5, #0
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	b118      	cbz	r0, 8008cae <_fflush_r+0x1a>
 8008ca6:	6a03      	ldr	r3, [r0, #32]
 8008ca8:	b90b      	cbnz	r3, 8008cae <_fflush_r+0x1a>
 8008caa:	f7fe f8ff 	bl	8006eac <__sinit>
 8008cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0f3      	beq.n	8008c9e <_fflush_r+0xa>
 8008cb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cb8:	07d0      	lsls	r0, r2, #31
 8008cba:	d404      	bmi.n	8008cc6 <_fflush_r+0x32>
 8008cbc:	0599      	lsls	r1, r3, #22
 8008cbe:	d402      	bmi.n	8008cc6 <_fflush_r+0x32>
 8008cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cc2:	f7fe fb34 	bl	800732e <__retarget_lock_acquire_recursive>
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	4621      	mov	r1, r4
 8008cca:	f7ff ff5f 	bl	8008b8c <__sflush_r>
 8008cce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cd0:	07da      	lsls	r2, r3, #31
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	d4e4      	bmi.n	8008ca0 <_fflush_r+0xc>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	059b      	lsls	r3, r3, #22
 8008cda:	d4e1      	bmi.n	8008ca0 <_fflush_r+0xc>
 8008cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cde:	f7fe fb27 	bl	8007330 <__retarget_lock_release_recursive>
 8008ce2:	e7dd      	b.n	8008ca0 <_fflush_r+0xc>

08008ce4 <__swhatbuf_r>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cec:	2900      	cmp	r1, #0
 8008cee:	b096      	sub	sp, #88	@ 0x58
 8008cf0:	4615      	mov	r5, r2
 8008cf2:	461e      	mov	r6, r3
 8008cf4:	da0d      	bge.n	8008d12 <__swhatbuf_r+0x2e>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cfc:	f04f 0100 	mov.w	r1, #0
 8008d00:	bf14      	ite	ne
 8008d02:	2340      	movne	r3, #64	@ 0x40
 8008d04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d08:	2000      	movs	r0, #0
 8008d0a:	6031      	str	r1, [r6, #0]
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	b016      	add	sp, #88	@ 0x58
 8008d10:	bd70      	pop	{r4, r5, r6, pc}
 8008d12:	466a      	mov	r2, sp
 8008d14:	f000 f862 	bl	8008ddc <_fstat_r>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dbec      	blt.n	8008cf6 <__swhatbuf_r+0x12>
 8008d1c:	9901      	ldr	r1, [sp, #4]
 8008d1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d26:	4259      	negs	r1, r3
 8008d28:	4159      	adcs	r1, r3
 8008d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d2e:	e7eb      	b.n	8008d08 <__swhatbuf_r+0x24>

08008d30 <__smakebuf_r>:
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d34:	079d      	lsls	r5, r3, #30
 8008d36:	4606      	mov	r6, r0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	d507      	bpl.n	8008d4c <__smakebuf_r+0x1c>
 8008d3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	2301      	movs	r3, #1
 8008d46:	6163      	str	r3, [r4, #20]
 8008d48:	b003      	add	sp, #12
 8008d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4c:	ab01      	add	r3, sp, #4
 8008d4e:	466a      	mov	r2, sp
 8008d50:	f7ff ffc8 	bl	8008ce4 <__swhatbuf_r>
 8008d54:	9f00      	ldr	r7, [sp, #0]
 8008d56:	4605      	mov	r5, r0
 8008d58:	4639      	mov	r1, r7
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7ff f9b8 	bl	80080d0 <_malloc_r>
 8008d60:	b948      	cbnz	r0, 8008d76 <__smakebuf_r+0x46>
 8008d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d66:	059a      	lsls	r2, r3, #22
 8008d68:	d4ee      	bmi.n	8008d48 <__smakebuf_r+0x18>
 8008d6a:	f023 0303 	bic.w	r3, r3, #3
 8008d6e:	f043 0302 	orr.w	r3, r3, #2
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	e7e2      	b.n	8008d3c <__smakebuf_r+0xc>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	6020      	str	r0, [r4, #0]
 8008d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d86:	b15b      	cbz	r3, 8008da0 <__smakebuf_r+0x70>
 8008d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f000 f837 	bl	8008e00 <_isatty_r>
 8008d92:	b128      	cbz	r0, 8008da0 <__smakebuf_r+0x70>
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	f043 0301 	orr.w	r3, r3, #1
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	431d      	orrs	r5, r3
 8008da4:	81a5      	strh	r5, [r4, #12]
 8008da6:	e7cf      	b.n	8008d48 <__smakebuf_r+0x18>

08008da8 <memmove>:
 8008da8:	4288      	cmp	r0, r1
 8008daa:	b510      	push	{r4, lr}
 8008dac:	eb01 0402 	add.w	r4, r1, r2
 8008db0:	d902      	bls.n	8008db8 <memmove+0x10>
 8008db2:	4284      	cmp	r4, r0
 8008db4:	4623      	mov	r3, r4
 8008db6:	d807      	bhi.n	8008dc8 <memmove+0x20>
 8008db8:	1e43      	subs	r3, r0, #1
 8008dba:	42a1      	cmp	r1, r4
 8008dbc:	d008      	beq.n	8008dd0 <memmove+0x28>
 8008dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dc6:	e7f8      	b.n	8008dba <memmove+0x12>
 8008dc8:	4402      	add	r2, r0
 8008dca:	4601      	mov	r1, r0
 8008dcc:	428a      	cmp	r2, r1
 8008dce:	d100      	bne.n	8008dd2 <memmove+0x2a>
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dda:	e7f7      	b.n	8008dcc <memmove+0x24>

08008ddc <_fstat_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4d07      	ldr	r5, [pc, #28]	@ (8008dfc <_fstat_r+0x20>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	4611      	mov	r1, r2
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	f7f9 fa21 	bl	8002230 <_fstat>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d102      	bne.n	8008df8 <_fstat_r+0x1c>
 8008df2:	682b      	ldr	r3, [r5, #0]
 8008df4:	b103      	cbz	r3, 8008df8 <_fstat_r+0x1c>
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	bd38      	pop	{r3, r4, r5, pc}
 8008dfa:	bf00      	nop
 8008dfc:	200008a8 	.word	0x200008a8

08008e00 <_isatty_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d06      	ldr	r5, [pc, #24]	@ (8008e1c <_isatty_r+0x1c>)
 8008e04:	2300      	movs	r3, #0
 8008e06:	4604      	mov	r4, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	602b      	str	r3, [r5, #0]
 8008e0c:	f7f9 fa20 	bl	8002250 <_isatty>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_isatty_r+0x1a>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_isatty_r+0x1a>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	200008a8 	.word	0x200008a8

08008e20 <_sbrk_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d06      	ldr	r5, [pc, #24]	@ (8008e3c <_sbrk_r+0x1c>)
 8008e24:	2300      	movs	r3, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	602b      	str	r3, [r5, #0]
 8008e2c:	f7f9 fa28 	bl	8002280 <_sbrk>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_sbrk_r+0x1a>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_sbrk_r+0x1a>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	200008a8 	.word	0x200008a8

08008e40 <memcpy>:
 8008e40:	440a      	add	r2, r1
 8008e42:	4291      	cmp	r1, r2
 8008e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e48:	d100      	bne.n	8008e4c <memcpy+0xc>
 8008e4a:	4770      	bx	lr
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e56:	4291      	cmp	r1, r2
 8008e58:	d1f9      	bne.n	8008e4e <memcpy+0xe>
 8008e5a:	bd10      	pop	{r4, pc}

08008e5c <__assert_func>:
 8008e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e5e:	4614      	mov	r4, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	4b09      	ldr	r3, [pc, #36]	@ (8008e88 <__assert_func+0x2c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4605      	mov	r5, r0
 8008e68:	68d8      	ldr	r0, [r3, #12]
 8008e6a:	b14c      	cbz	r4, 8008e80 <__assert_func+0x24>
 8008e6c:	4b07      	ldr	r3, [pc, #28]	@ (8008e8c <__assert_func+0x30>)
 8008e6e:	9100      	str	r1, [sp, #0]
 8008e70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e74:	4906      	ldr	r1, [pc, #24]	@ (8008e90 <__assert_func+0x34>)
 8008e76:	462b      	mov	r3, r5
 8008e78:	f000 f870 	bl	8008f5c <fiprintf>
 8008e7c:	f000 f880 	bl	8008f80 <abort>
 8008e80:	4b04      	ldr	r3, [pc, #16]	@ (8008e94 <__assert_func+0x38>)
 8008e82:	461c      	mov	r4, r3
 8008e84:	e7f3      	b.n	8008e6e <__assert_func+0x12>
 8008e86:	bf00      	nop
 8008e88:	20000024 	.word	0x20000024
 8008e8c:	080095ed 	.word	0x080095ed
 8008e90:	080095fa 	.word	0x080095fa
 8008e94:	08009628 	.word	0x08009628

08008e98 <_calloc_r>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	fba1 5402 	umull	r5, r4, r1, r2
 8008e9e:	b934      	cbnz	r4, 8008eae <_calloc_r+0x16>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7ff f915 	bl	80080d0 <_malloc_r>
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	b928      	cbnz	r0, 8008eb6 <_calloc_r+0x1e>
 8008eaa:	4630      	mov	r0, r6
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
 8008eae:	220c      	movs	r2, #12
 8008eb0:	6002      	str	r2, [r0, #0]
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	e7f9      	b.n	8008eaa <_calloc_r+0x12>
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4621      	mov	r1, r4
 8008eba:	f7fe f9bb 	bl	8007234 <memset>
 8008ebe:	e7f4      	b.n	8008eaa <_calloc_r+0x12>

08008ec0 <__ascii_mbtowc>:
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	b901      	cbnz	r1, 8008ec6 <__ascii_mbtowc+0x6>
 8008ec4:	a901      	add	r1, sp, #4
 8008ec6:	b142      	cbz	r2, 8008eda <__ascii_mbtowc+0x1a>
 8008ec8:	b14b      	cbz	r3, 8008ede <__ascii_mbtowc+0x1e>
 8008eca:	7813      	ldrb	r3, [r2, #0]
 8008ecc:	600b      	str	r3, [r1, #0]
 8008ece:	7812      	ldrb	r2, [r2, #0]
 8008ed0:	1e10      	subs	r0, r2, #0
 8008ed2:	bf18      	it	ne
 8008ed4:	2001      	movne	r0, #1
 8008ed6:	b002      	add	sp, #8
 8008ed8:	4770      	bx	lr
 8008eda:	4610      	mov	r0, r2
 8008edc:	e7fb      	b.n	8008ed6 <__ascii_mbtowc+0x16>
 8008ede:	f06f 0001 	mvn.w	r0, #1
 8008ee2:	e7f8      	b.n	8008ed6 <__ascii_mbtowc+0x16>

08008ee4 <_realloc_r>:
 8008ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee8:	4607      	mov	r7, r0
 8008eea:	4614      	mov	r4, r2
 8008eec:	460d      	mov	r5, r1
 8008eee:	b921      	cbnz	r1, 8008efa <_realloc_r+0x16>
 8008ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	f7ff b8eb 	b.w	80080d0 <_malloc_r>
 8008efa:	b92a      	cbnz	r2, 8008f08 <_realloc_r+0x24>
 8008efc:	f7ff f874 	bl	8007fe8 <_free_r>
 8008f00:	4625      	mov	r5, r4
 8008f02:	4628      	mov	r0, r5
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f08:	f000 f841 	bl	8008f8e <_malloc_usable_size_r>
 8008f0c:	4284      	cmp	r4, r0
 8008f0e:	4606      	mov	r6, r0
 8008f10:	d802      	bhi.n	8008f18 <_realloc_r+0x34>
 8008f12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f16:	d8f4      	bhi.n	8008f02 <_realloc_r+0x1e>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	f7ff f8d8 	bl	80080d0 <_malloc_r>
 8008f20:	4680      	mov	r8, r0
 8008f22:	b908      	cbnz	r0, 8008f28 <_realloc_r+0x44>
 8008f24:	4645      	mov	r5, r8
 8008f26:	e7ec      	b.n	8008f02 <_realloc_r+0x1e>
 8008f28:	42b4      	cmp	r4, r6
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	bf28      	it	cs
 8008f30:	4632      	movcs	r2, r6
 8008f32:	f7ff ff85 	bl	8008e40 <memcpy>
 8008f36:	4629      	mov	r1, r5
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7ff f855 	bl	8007fe8 <_free_r>
 8008f3e:	e7f1      	b.n	8008f24 <_realloc_r+0x40>

08008f40 <__ascii_wctomb>:
 8008f40:	4603      	mov	r3, r0
 8008f42:	4608      	mov	r0, r1
 8008f44:	b141      	cbz	r1, 8008f58 <__ascii_wctomb+0x18>
 8008f46:	2aff      	cmp	r2, #255	@ 0xff
 8008f48:	d904      	bls.n	8008f54 <__ascii_wctomb+0x14>
 8008f4a:	228a      	movs	r2, #138	@ 0x8a
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f52:	4770      	bx	lr
 8008f54:	700a      	strb	r2, [r1, #0]
 8008f56:	2001      	movs	r0, #1
 8008f58:	4770      	bx	lr
	...

08008f5c <fiprintf>:
 8008f5c:	b40e      	push	{r1, r2, r3}
 8008f5e:	b503      	push	{r0, r1, lr}
 8008f60:	4601      	mov	r1, r0
 8008f62:	ab03      	add	r3, sp, #12
 8008f64:	4805      	ldr	r0, [pc, #20]	@ (8008f7c <fiprintf+0x20>)
 8008f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	f000 f83f 	bl	8008ff0 <_vfiprintf_r>
 8008f72:	b002      	add	sp, #8
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	b003      	add	sp, #12
 8008f7a:	4770      	bx	lr
 8008f7c:	20000024 	.word	0x20000024

08008f80 <abort>:
 8008f80:	b508      	push	{r3, lr}
 8008f82:	2006      	movs	r0, #6
 8008f84:	f000 f974 	bl	8009270 <raise>
 8008f88:	2001      	movs	r0, #1
 8008f8a:	f7f9 f901 	bl	8002190 <_exit>

08008f8e <_malloc_usable_size_r>:
 8008f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f92:	1f18      	subs	r0, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfbc      	itt	lt
 8008f98:	580b      	ldrlt	r3, [r1, r0]
 8008f9a:	18c0      	addlt	r0, r0, r3
 8008f9c:	4770      	bx	lr

08008f9e <__sfputc_r>:
 8008f9e:	6893      	ldr	r3, [r2, #8]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	b410      	push	{r4}
 8008fa6:	6093      	str	r3, [r2, #8]
 8008fa8:	da08      	bge.n	8008fbc <__sfputc_r+0x1e>
 8008faa:	6994      	ldr	r4, [r2, #24]
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	db01      	blt.n	8008fb4 <__sfputc_r+0x16>
 8008fb0:	290a      	cmp	r1, #10
 8008fb2:	d103      	bne.n	8008fbc <__sfputc_r+0x1e>
 8008fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb8:	f7fe b8a7 	b.w	800710a <__swbuf_r>
 8008fbc:	6813      	ldr	r3, [r2, #0]
 8008fbe:	1c58      	adds	r0, r3, #1
 8008fc0:	6010      	str	r0, [r2, #0]
 8008fc2:	7019      	strb	r1, [r3, #0]
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <__sfputs_r>:
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	4614      	mov	r4, r2
 8008fd4:	18d5      	adds	r5, r2, r3
 8008fd6:	42ac      	cmp	r4, r5
 8008fd8:	d101      	bne.n	8008fde <__sfputs_r+0x12>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e007      	b.n	8008fee <__sfputs_r+0x22>
 8008fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7ff ffda 	bl	8008f9e <__sfputc_r>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	d1f3      	bne.n	8008fd6 <__sfputs_r+0xa>
 8008fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ff0 <_vfiprintf_r>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	b09d      	sub	sp, #116	@ 0x74
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	4698      	mov	r8, r3
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	b118      	cbz	r0, 8009008 <_vfiprintf_r+0x18>
 8009000:	6a03      	ldr	r3, [r0, #32]
 8009002:	b90b      	cbnz	r3, 8009008 <_vfiprintf_r+0x18>
 8009004:	f7fd ff52 	bl	8006eac <__sinit>
 8009008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800900a:	07d9      	lsls	r1, r3, #31
 800900c:	d405      	bmi.n	800901a <_vfiprintf_r+0x2a>
 800900e:	89ab      	ldrh	r3, [r5, #12]
 8009010:	059a      	lsls	r2, r3, #22
 8009012:	d402      	bmi.n	800901a <_vfiprintf_r+0x2a>
 8009014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009016:	f7fe f98a 	bl	800732e <__retarget_lock_acquire_recursive>
 800901a:	89ab      	ldrh	r3, [r5, #12]
 800901c:	071b      	lsls	r3, r3, #28
 800901e:	d501      	bpl.n	8009024 <_vfiprintf_r+0x34>
 8009020:	692b      	ldr	r3, [r5, #16]
 8009022:	b99b      	cbnz	r3, 800904c <_vfiprintf_r+0x5c>
 8009024:	4629      	mov	r1, r5
 8009026:	4630      	mov	r0, r6
 8009028:	f7fe f8ae 	bl	8007188 <__swsetup_r>
 800902c:	b170      	cbz	r0, 800904c <_vfiprintf_r+0x5c>
 800902e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009030:	07dc      	lsls	r4, r3, #31
 8009032:	d504      	bpl.n	800903e <_vfiprintf_r+0x4e>
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	b01d      	add	sp, #116	@ 0x74
 800903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903e:	89ab      	ldrh	r3, [r5, #12]
 8009040:	0598      	lsls	r0, r3, #22
 8009042:	d4f7      	bmi.n	8009034 <_vfiprintf_r+0x44>
 8009044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009046:	f7fe f973 	bl	8007330 <__retarget_lock_release_recursive>
 800904a:	e7f3      	b.n	8009034 <_vfiprintf_r+0x44>
 800904c:	2300      	movs	r3, #0
 800904e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009050:	2320      	movs	r3, #32
 8009052:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009056:	f8cd 800c 	str.w	r8, [sp, #12]
 800905a:	2330      	movs	r3, #48	@ 0x30
 800905c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800920c <_vfiprintf_r+0x21c>
 8009060:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009064:	f04f 0901 	mov.w	r9, #1
 8009068:	4623      	mov	r3, r4
 800906a:	469a      	mov	sl, r3
 800906c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009070:	b10a      	cbz	r2, 8009076 <_vfiprintf_r+0x86>
 8009072:	2a25      	cmp	r2, #37	@ 0x25
 8009074:	d1f9      	bne.n	800906a <_vfiprintf_r+0x7a>
 8009076:	ebba 0b04 	subs.w	fp, sl, r4
 800907a:	d00b      	beq.n	8009094 <_vfiprintf_r+0xa4>
 800907c:	465b      	mov	r3, fp
 800907e:	4622      	mov	r2, r4
 8009080:	4629      	mov	r1, r5
 8009082:	4630      	mov	r0, r6
 8009084:	f7ff ffa2 	bl	8008fcc <__sfputs_r>
 8009088:	3001      	adds	r0, #1
 800908a:	f000 80a7 	beq.w	80091dc <_vfiprintf_r+0x1ec>
 800908e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009090:	445a      	add	r2, fp
 8009092:	9209      	str	r2, [sp, #36]	@ 0x24
 8009094:	f89a 3000 	ldrb.w	r3, [sl]
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 809f 	beq.w	80091dc <_vfiprintf_r+0x1ec>
 800909e:	2300      	movs	r3, #0
 80090a0:	f04f 32ff 	mov.w	r2, #4294967295
 80090a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a8:	f10a 0a01 	add.w	sl, sl, #1
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80090b6:	4654      	mov	r4, sl
 80090b8:	2205      	movs	r2, #5
 80090ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090be:	4853      	ldr	r0, [pc, #332]	@ (800920c <_vfiprintf_r+0x21c>)
 80090c0:	f7f7 f886 	bl	80001d0 <memchr>
 80090c4:	9a04      	ldr	r2, [sp, #16]
 80090c6:	b9d8      	cbnz	r0, 8009100 <_vfiprintf_r+0x110>
 80090c8:	06d1      	lsls	r1, r2, #27
 80090ca:	bf44      	itt	mi
 80090cc:	2320      	movmi	r3, #32
 80090ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090d2:	0713      	lsls	r3, r2, #28
 80090d4:	bf44      	itt	mi
 80090d6:	232b      	movmi	r3, #43	@ 0x2b
 80090d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090dc:	f89a 3000 	ldrb.w	r3, [sl]
 80090e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e2:	d015      	beq.n	8009110 <_vfiprintf_r+0x120>
 80090e4:	9a07      	ldr	r2, [sp, #28]
 80090e6:	4654      	mov	r4, sl
 80090e8:	2000      	movs	r0, #0
 80090ea:	f04f 0c0a 	mov.w	ip, #10
 80090ee:	4621      	mov	r1, r4
 80090f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f4:	3b30      	subs	r3, #48	@ 0x30
 80090f6:	2b09      	cmp	r3, #9
 80090f8:	d94b      	bls.n	8009192 <_vfiprintf_r+0x1a2>
 80090fa:	b1b0      	cbz	r0, 800912a <_vfiprintf_r+0x13a>
 80090fc:	9207      	str	r2, [sp, #28]
 80090fe:	e014      	b.n	800912a <_vfiprintf_r+0x13a>
 8009100:	eba0 0308 	sub.w	r3, r0, r8
 8009104:	fa09 f303 	lsl.w	r3, r9, r3
 8009108:	4313      	orrs	r3, r2
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	46a2      	mov	sl, r4
 800910e:	e7d2      	b.n	80090b6 <_vfiprintf_r+0xc6>
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	1d19      	adds	r1, r3, #4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	9103      	str	r1, [sp, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	bfbb      	ittet	lt
 800911c:	425b      	neglt	r3, r3
 800911e:	f042 0202 	orrlt.w	r2, r2, #2
 8009122:	9307      	strge	r3, [sp, #28]
 8009124:	9307      	strlt	r3, [sp, #28]
 8009126:	bfb8      	it	lt
 8009128:	9204      	strlt	r2, [sp, #16]
 800912a:	7823      	ldrb	r3, [r4, #0]
 800912c:	2b2e      	cmp	r3, #46	@ 0x2e
 800912e:	d10a      	bne.n	8009146 <_vfiprintf_r+0x156>
 8009130:	7863      	ldrb	r3, [r4, #1]
 8009132:	2b2a      	cmp	r3, #42	@ 0x2a
 8009134:	d132      	bne.n	800919c <_vfiprintf_r+0x1ac>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	1d1a      	adds	r2, r3, #4
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	9203      	str	r2, [sp, #12]
 800913e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009142:	3402      	adds	r4, #2
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800921c <_vfiprintf_r+0x22c>
 800914a:	7821      	ldrb	r1, [r4, #0]
 800914c:	2203      	movs	r2, #3
 800914e:	4650      	mov	r0, sl
 8009150:	f7f7 f83e 	bl	80001d0 <memchr>
 8009154:	b138      	cbz	r0, 8009166 <_vfiprintf_r+0x176>
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	eba0 000a 	sub.w	r0, r0, sl
 800915c:	2240      	movs	r2, #64	@ 0x40
 800915e:	4082      	lsls	r2, r0
 8009160:	4313      	orrs	r3, r2
 8009162:	3401      	adds	r4, #1
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800916a:	4829      	ldr	r0, [pc, #164]	@ (8009210 <_vfiprintf_r+0x220>)
 800916c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009170:	2206      	movs	r2, #6
 8009172:	f7f7 f82d 	bl	80001d0 <memchr>
 8009176:	2800      	cmp	r0, #0
 8009178:	d03f      	beq.n	80091fa <_vfiprintf_r+0x20a>
 800917a:	4b26      	ldr	r3, [pc, #152]	@ (8009214 <_vfiprintf_r+0x224>)
 800917c:	bb1b      	cbnz	r3, 80091c6 <_vfiprintf_r+0x1d6>
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	3307      	adds	r3, #7
 8009182:	f023 0307 	bic.w	r3, r3, #7
 8009186:	3308      	adds	r3, #8
 8009188:	9303      	str	r3, [sp, #12]
 800918a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918c:	443b      	add	r3, r7
 800918e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009190:	e76a      	b.n	8009068 <_vfiprintf_r+0x78>
 8009192:	fb0c 3202 	mla	r2, ip, r2, r3
 8009196:	460c      	mov	r4, r1
 8009198:	2001      	movs	r0, #1
 800919a:	e7a8      	b.n	80090ee <_vfiprintf_r+0xfe>
 800919c:	2300      	movs	r3, #0
 800919e:	3401      	adds	r4, #1
 80091a0:	9305      	str	r3, [sp, #20]
 80091a2:	4619      	mov	r1, r3
 80091a4:	f04f 0c0a 	mov.w	ip, #10
 80091a8:	4620      	mov	r0, r4
 80091aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ae:	3a30      	subs	r2, #48	@ 0x30
 80091b0:	2a09      	cmp	r2, #9
 80091b2:	d903      	bls.n	80091bc <_vfiprintf_r+0x1cc>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0c6      	beq.n	8009146 <_vfiprintf_r+0x156>
 80091b8:	9105      	str	r1, [sp, #20]
 80091ba:	e7c4      	b.n	8009146 <_vfiprintf_r+0x156>
 80091bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80091c0:	4604      	mov	r4, r0
 80091c2:	2301      	movs	r3, #1
 80091c4:	e7f0      	b.n	80091a8 <_vfiprintf_r+0x1b8>
 80091c6:	ab03      	add	r3, sp, #12
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	462a      	mov	r2, r5
 80091cc:	4b12      	ldr	r3, [pc, #72]	@ (8009218 <_vfiprintf_r+0x228>)
 80091ce:	a904      	add	r1, sp, #16
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7fd fa29 	bl	8006628 <_printf_float>
 80091d6:	4607      	mov	r7, r0
 80091d8:	1c78      	adds	r0, r7, #1
 80091da:	d1d6      	bne.n	800918a <_vfiprintf_r+0x19a>
 80091dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091de:	07d9      	lsls	r1, r3, #31
 80091e0:	d405      	bmi.n	80091ee <_vfiprintf_r+0x1fe>
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	059a      	lsls	r2, r3, #22
 80091e6:	d402      	bmi.n	80091ee <_vfiprintf_r+0x1fe>
 80091e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ea:	f7fe f8a1 	bl	8007330 <__retarget_lock_release_recursive>
 80091ee:	89ab      	ldrh	r3, [r5, #12]
 80091f0:	065b      	lsls	r3, r3, #25
 80091f2:	f53f af1f 	bmi.w	8009034 <_vfiprintf_r+0x44>
 80091f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091f8:	e71e      	b.n	8009038 <_vfiprintf_r+0x48>
 80091fa:	ab03      	add	r3, sp, #12
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	462a      	mov	r2, r5
 8009200:	4b05      	ldr	r3, [pc, #20]	@ (8009218 <_vfiprintf_r+0x228>)
 8009202:	a904      	add	r1, sp, #16
 8009204:	4630      	mov	r0, r6
 8009206:	f7fd fca7 	bl	8006b58 <_printf_i>
 800920a:	e7e4      	b.n	80091d6 <_vfiprintf_r+0x1e6>
 800920c:	080095d2 	.word	0x080095d2
 8009210:	080095dc 	.word	0x080095dc
 8009214:	08006629 	.word	0x08006629
 8009218:	08008fcd 	.word	0x08008fcd
 800921c:	080095d8 	.word	0x080095d8

08009220 <_raise_r>:
 8009220:	291f      	cmp	r1, #31
 8009222:	b538      	push	{r3, r4, r5, lr}
 8009224:	4605      	mov	r5, r0
 8009226:	460c      	mov	r4, r1
 8009228:	d904      	bls.n	8009234 <_raise_r+0x14>
 800922a:	2316      	movs	r3, #22
 800922c:	6003      	str	r3, [r0, #0]
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009236:	b112      	cbz	r2, 800923e <_raise_r+0x1e>
 8009238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800923c:	b94b      	cbnz	r3, 8009252 <_raise_r+0x32>
 800923e:	4628      	mov	r0, r5
 8009240:	f000 f830 	bl	80092a4 <_getpid_r>
 8009244:	4622      	mov	r2, r4
 8009246:	4601      	mov	r1, r0
 8009248:	4628      	mov	r0, r5
 800924a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800924e:	f000 b817 	b.w	8009280 <_kill_r>
 8009252:	2b01      	cmp	r3, #1
 8009254:	d00a      	beq.n	800926c <_raise_r+0x4c>
 8009256:	1c59      	adds	r1, r3, #1
 8009258:	d103      	bne.n	8009262 <_raise_r+0x42>
 800925a:	2316      	movs	r3, #22
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	2001      	movs	r0, #1
 8009260:	e7e7      	b.n	8009232 <_raise_r+0x12>
 8009262:	2100      	movs	r1, #0
 8009264:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009268:	4620      	mov	r0, r4
 800926a:	4798      	blx	r3
 800926c:	2000      	movs	r0, #0
 800926e:	e7e0      	b.n	8009232 <_raise_r+0x12>

08009270 <raise>:
 8009270:	4b02      	ldr	r3, [pc, #8]	@ (800927c <raise+0xc>)
 8009272:	4601      	mov	r1, r0
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f7ff bfd3 	b.w	8009220 <_raise_r>
 800927a:	bf00      	nop
 800927c:	20000024 	.word	0x20000024

08009280 <_kill_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d07      	ldr	r5, [pc, #28]	@ (80092a0 <_kill_r+0x20>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	4611      	mov	r1, r2
 800928c:	602b      	str	r3, [r5, #0]
 800928e:	f7f8 ff6f 	bl	8002170 <_kill>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d102      	bne.n	800929c <_kill_r+0x1c>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	b103      	cbz	r3, 800929c <_kill_r+0x1c>
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	bd38      	pop	{r3, r4, r5, pc}
 800929e:	bf00      	nop
 80092a0:	200008a8 	.word	0x200008a8

080092a4 <_getpid_r>:
 80092a4:	f7f8 bf5c 	b.w	8002160 <_getpid>

080092a8 <_init>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr

080092b4 <_fini>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr
