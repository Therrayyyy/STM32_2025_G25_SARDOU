
Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008010  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  080081a0  080081a0  000091a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008670  08008670  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008670  08008670  00009670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008678  08008678  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800867c  0800867c  0000967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008680  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200001d4  08008854  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08008854  0000a734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f688  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c8  00000000  00000000  0001988c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0001bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a23  00000000  00000000  0001ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279f0  00000000  00000000  0001d4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115e7  00000000  00000000  00044ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec9d3  00000000  00000000  0005648a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004790  00000000  00000000  00142ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00147630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008188 	.word	0x08008188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008188 	.word	0x08008188

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a24      	ldr	r2, [pc, #144]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_GPIO_Init+0xc4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff2:	f001 fabd 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480b      	ldr	r0, [pc, #44]	@ (800103c <MX_GPIO_Init+0xc8>)
 800100e:	f001 f905 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001012:	2320      	movs	r3, #32
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102c:	f001 f8f6 	bl	800221c <HAL_GPIO_Init>

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	@ 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	48000800 	.word	0x48000800

08001040 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <MX_I2C1_Init+0x74>)
 8001046:	4a1c      	ldr	r2, [pc, #112]	@ (80010b8 <MX_I2C1_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_I2C1_Init+0x74>)
 800104c:	4a1b      	ldr	r2, [pc, #108]	@ (80010bc <MX_I2C1_Init+0x7c>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_I2C1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001056:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <MX_I2C1_Init+0x74>)
 8001058:	2201      	movs	r2, #1
 800105a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_I2C1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_I2C1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800107a:	480e      	ldr	r0, [pc, #56]	@ (80010b4 <MX_I2C1_Init+0x74>)
 800107c:	f001 fa90 	bl	80025a0 <HAL_I2C_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001086:	f000 fce4 	bl	8001a52 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4809      	ldr	r0, [pc, #36]	@ (80010b4 <MX_I2C1_Init+0x74>)
 800108e:	f001 ff41 	bl	8002f14 <HAL_I2CEx_ConfigAnalogFilter>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001098:	f000 fcdb 	bl	8001a52 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800109c:	2100      	movs	r1, #0
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_I2C1_Init+0x74>)
 80010a0:	f001 ff83 	bl	8002faa <HAL_I2CEx_ConfigDigitalFilter>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010aa:	f000 fcd2 	bl	8001a52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001f0 	.word	0x200001f0
 80010b8:	40005400 	.word	0x40005400
 80010bc:	10d19ce4 	.word	0x10d19ce4

080010c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0ac      	sub	sp, #176	@ 0xb0
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2288      	movs	r2, #136	@ 0x88
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 ff5c 	bl	8005f9e <memset>
  if(i2cHandle->Instance==I2C1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a21      	ldr	r2, [pc, #132]	@ (8001170 <HAL_I2C_MspInit+0xb0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d13b      	bne.n	8001168 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010f0:	2340      	movs	r3, #64	@ 0x40
 80010f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fe05 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001108:	f000 fca3 	bl	8001a52 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_I2C_MspInit+0xb4>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	4a18      	ldr	r2, [pc, #96]	@ (8001174 <HAL_I2C_MspInit+0xb4>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_I2C_MspInit+0xb4>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001124:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113e:	2304      	movs	r3, #4
 8001140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001148:	4619      	mov	r1, r3
 800114a:	480b      	ldr	r0, [pc, #44]	@ (8001178 <HAL_I2C_MspInit+0xb8>)
 800114c:	f001 f866 	bl	800221c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_I2C_MspInit+0xb4>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_I2C_MspInit+0xb4>)
 8001156:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800115a:	6593      	str	r3, [r2, #88]	@ 0x58
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <HAL_I2C_MspInit+0xb4>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	37b0      	adds	r7, #176	@ 0xb0
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40005400 	.word	0x40005400
 8001174:	40021000 	.word	0x40021000
 8001178:	48000400 	.word	0x48000400

0800117c <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	f043 030c 	orr.w	r3, r3, #12
 8001192:	b2da      	uxtb	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f043 0320 	orr.w	r3, r3, #32
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80011a8:	f107 0118 	add.w	r1, r7, #24
 80011ac:	230a      	movs	r3, #10
 80011ae:	2202      	movs	r2, #2
 80011b0:	486c      	ldr	r0, [pc, #432]	@ (8001364 <lcd_init+0x1e8>)
 80011b2:	f003 fab5 	bl	8004720 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80011b6:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80011ba:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80011bc:	f107 0114 	add.w	r1, r7, #20
 80011c0:	230a      	movs	r3, #10
 80011c2:	2202      	movs	r2, #2
 80011c4:	4867      	ldr	r0, [pc, #412]	@ (8001364 <lcd_init+0x1e8>)
 80011c6:	f003 faab 	bl	8004720 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80011ca:	2364      	movs	r3, #100	@ 0x64
 80011cc:	2205      	movs	r2, #5
 80011ce:	217c      	movs	r1, #124	@ 0x7c
 80011d0:	69f8      	ldr	r0, [r7, #28]
 80011d2:	f001 fb99 	bl	8002908 <HAL_I2C_IsDeviceReady>
 80011d6:	4603      	mov	r3, r0
 80011d8:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80011da:	f107 0113 	add.w	r1, r7, #19
 80011de:	230a      	movs	r3, #10
 80011e0:	2201      	movs	r2, #1
 80011e2:	4860      	ldr	r0, [pc, #384]	@ (8001364 <lcd_init+0x1e8>)
 80011e4:	f003 fa9c 	bl	8004720 <HAL_UART_Transmit>
	HAL_Delay(50);
 80011e8:	2032      	movs	r0, #50	@ 0x32
 80011ea:	f000 ff0d 	bl	8002008 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80011ee:	f107 0218 	add.w	r2, r7, #24
 80011f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2302      	movs	r3, #2
 80011fa:	217c      	movs	r1, #124	@ 0x7c
 80011fc:	69f8      	ldr	r0, [r7, #28]
 80011fe:	f001 fa6b 	bl	80026d8 <HAL_I2C_Master_Transmit>
 8001202:	4603      	mov	r3, r0
 8001204:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001206:	f107 0112 	add.w	r1, r7, #18
 800120a:	230a      	movs	r3, #10
 800120c:	2201      	movs	r2, #1
 800120e:	4855      	ldr	r0, [pc, #340]	@ (8001364 <lcd_init+0x1e8>)
 8001210:	f003 fa86 	bl	8004720 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001214:	2032      	movs	r0, #50	@ 0x32
 8001216:	f000 fef7 	bl	8002008 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800121a:	f107 0218 	add.w	r2, r7, #24
 800121e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2302      	movs	r3, #2
 8001226:	217c      	movs	r1, #124	@ 0x7c
 8001228:	69f8      	ldr	r0, [r7, #28]
 800122a:	f001 fa55 	bl	80026d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800122e:	2005      	movs	r0, #5
 8001230:	f000 feea 	bl	8002008 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001234:	f107 0218 	add.w	r2, r7, #24
 8001238:	f241 3388 	movw	r3, #5000	@ 0x1388
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	217c      	movs	r1, #124	@ 0x7c
 8001242:	69f8      	ldr	r0, [r7, #28]
 8001244:	f001 fa48 	bl	80026d8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2204      	movs	r2, #4
 800124c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	b2db      	uxtb	r3, r3
 8001258:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800125a:	f107 0218 	add.w	r2, r7, #24
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2302      	movs	r3, #2
 8001266:	217c      	movs	r1, #124	@ 0x7c
 8001268:	69f8      	ldr	r0, [r7, #28]
 800126a:	f001 fa35 	bl	80026d8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800126e:	2301      	movs	r3, #1
 8001270:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001272:	f107 0218 	add.w	r2, r7, #24
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2302      	movs	r3, #2
 800127e:	217c      	movs	r1, #124	@ 0x7c
 8001280:	69f8      	ldr	r0, [r7, #28]
 8001282:	f001 fa29 	bl	80026d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001286:	2002      	movs	r0, #2
 8001288:	f000 febe 	bl	8002008 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2202      	movs	r2, #2
 8001290:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	789b      	ldrb	r3, [r3, #2]
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	b2db      	uxtb	r3, r3
 800129c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800129e:	f107 0218 	add.w	r2, r7, #24
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2302      	movs	r3, #2
 80012aa:	217c      	movs	r1, #124	@ 0x7c
 80012ac:	69f8      	ldr	r0, [r7, #28]
 80012ae:	f001 fa13 	bl	80026d8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012ba:	f107 0210 	add.w	r2, r7, #16
 80012be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2302      	movs	r3, #2
 80012c6:	21c4      	movs	r1, #196	@ 0xc4
 80012c8:	69f8      	ldr	r0, [r7, #28]
 80012ca:	f001 fa05 	bl	80026d8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80012ce:	2308      	movs	r3, #8
 80012d0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80012d2:	23ff      	movs	r3, #255	@ 0xff
 80012d4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012d6:	f107 0210 	add.w	r2, r7, #16
 80012da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2302      	movs	r3, #2
 80012e2:	21c4      	movs	r1, #196	@ 0xc4
 80012e4:	69f8      	ldr	r0, [r7, #28]
 80012e6:	f001 f9f7 	bl	80026d8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80012ea:	2301      	movs	r3, #1
 80012ec:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80012ee:	2320      	movs	r3, #32
 80012f0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012f2:	f107 0210 	add.w	r2, r7, #16
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2302      	movs	r3, #2
 80012fe:	21c4      	movs	r1, #196	@ 0xc4
 8001300:	69f8      	ldr	r0, [r7, #28]
 8001302:	f001 f9e9 	bl	80026d8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001306:	2304      	movs	r3, #4
 8001308:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800130a:	23ff      	movs	r3, #255	@ 0xff
 800130c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800130e:	f107 020c 	add.w	r2, r7, #12
 8001312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2302      	movs	r3, #2
 800131a:	21c4      	movs	r1, #196	@ 0xc4
 800131c:	69f8      	ldr	r0, [r7, #28]
 800131e:	f001 f9db 	bl	80026d8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001322:	2303      	movs	r3, #3
 8001324:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001326:	23ff      	movs	r3, #255	@ 0xff
 8001328:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800132a:	f107 020c 	add.w	r2, r7, #12
 800132e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2302      	movs	r3, #2
 8001336:	21c4      	movs	r1, #196	@ 0xc4
 8001338:	69f8      	ldr	r0, [r7, #28]
 800133a:	f001 f9cd 	bl	80026d8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800133e:	2302      	movs	r3, #2
 8001340:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001342:	23ff      	movs	r3, #255	@ 0xff
 8001344:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2302      	movs	r3, #2
 8001352:	21c4      	movs	r1, #196	@ 0xc4
 8001354:	69f8      	ldr	r0, [r7, #28]
 8001356:	f001 f9bf 	bl	80026d8 <HAL_I2C_Master_Transmit>


}
 800135a:	bf00      	nop
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000055c 	.word	0x2000055c

08001368 <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <clearlcd+0x2c>)
 8001372:	f000 f83c 	bl	80013ee <lcd_position>
	lcd_print(&hi2c1,"                ");
 8001376:	4908      	ldr	r1, [pc, #32]	@ (8001398 <clearlcd+0x30>)
 8001378:	4806      	ldr	r0, [pc, #24]	@ (8001394 <clearlcd+0x2c>)
 800137a:	f000 f80f 	bl	800139c <lcd_print>
	lcd_position(&hi2c1,0,1);
 800137e:	2201      	movs	r2, #1
 8001380:	2100      	movs	r1, #0
 8001382:	4804      	ldr	r0, [pc, #16]	@ (8001394 <clearlcd+0x2c>)
 8001384:	f000 f833 	bl	80013ee <lcd_position>
	lcd_print(&hi2c1,"                ");
 8001388:	4903      	ldr	r1, [pc, #12]	@ (8001398 <clearlcd+0x30>)
 800138a:	4802      	ldr	r0, [pc, #8]	@ (8001394 <clearlcd+0x2c>)
 800138c:	f000 f806 	bl	800139c <lcd_print>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001f0 	.word	0x200001f0
 8001398:	080081a0 	.word	0x080081a0

0800139c <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80013aa:	2340      	movs	r3, #64	@ 0x40
 80013ac:	733b      	strb	r3, [r7, #12]
    int i=0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80013b2:	e011      	b.n	80013d8 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80013be:	f107 020c 	add.w	r2, r7, #12
 80013c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2302      	movs	r3, #2
 80013ca:	217c      	movs	r1, #124	@ 0x7c
 80013cc:	6938      	ldr	r0, [r7, #16]
 80013ce:	f001 f983 	bl	80026d8 <HAL_I2C_Master_Transmit>
            i++;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e7      	bne.n	80013b4 <lcd_print+0x18>
   }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af02      	add	r7, sp, #8
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	70fb      	strb	r3, [r7, #3]
 80013fa:	4613      	mov	r3, r2
 80013fc:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001402:	78bb      	ldrb	r3, [r7, #2]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d104      	bne.n	8001412 <lcd_position+0x24>
    {
        col = col | 0x80;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800140e:	70fb      	strb	r3, [r7, #3]
 8001410:	e003      	b.n	800141a <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001418:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001422:	f107 0208 	add.w	r2, r7, #8
 8001426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2302      	movs	r3, #2
 800142e:	217c      	movs	r1, #124	@ 0x7c
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f001 f951 	bl	80026d8 <HAL_I2C_Master_Transmit>
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001446:	f000 fd63 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144a:	f000 fab1 	bl	80019b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  initializePeripherals();
 800144e:	f000 f83b 	bl	80014c8 <initializePeripherals>

  // Send initial LoRa commands
  sendLoRaCommand("AT\r\n");
 8001452:	4816      	ldr	r0, [pc, #88]	@ (80014ac <main+0x6c>)
 8001454:	f000 f84e 	bl	80014f4 <sendLoRaCommand>
  sendLoRaCommand("AT+MODE=TEST\r\n");
 8001458:	4815      	ldr	r0, [pc, #84]	@ (80014b0 <main+0x70>)
 800145a:	f000 f84b 	bl	80014f4 <sendLoRaCommand>

  // Set LoRa module to receive mode
  sendLoRaCommand("AT+TEST=RXLRPKT\r\n");
 800145e:	4815      	ldr	r0, [pc, #84]	@ (80014b4 <main+0x74>)
 8001460:	f000 f848 	bl	80014f4 <sendLoRaCommand>
  while (1)
  {
    /* USER CODE END WHILE */

    // Wait and retrieve the message
    HAL_UART_Receive(&huart1, (uint8_t*)loraRetMsg, sizeof(loraRetMsg), 1000);
 8001464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001468:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146c:	4912      	ldr	r1, [pc, #72]	@ (80014b8 <main+0x78>)
 800146e:	4813      	ldr	r0, [pc, #76]	@ (80014bc <main+0x7c>)
 8001470:	f003 f9df 	bl	8004832 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart2, (uint8_t*)loraRetMsg, strlen(loraRetMsg), 1000);
 8001474:	4810      	ldr	r0, [pc, #64]	@ (80014b8 <main+0x78>)
 8001476:	f7fe fefb 	bl	8000270 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <main+0x78>)
 8001484:	480e      	ldr	r0, [pc, #56]	@ (80014c0 <main+0x80>)
 8001486:	f003 f94b 	bl	8004720 <HAL_UART_Transmit>

    // Check if the received message contains "+TEST: RX "
    char *start = strstr(loraRetMsg, "+TEST: RX \"");
 800148a:	490e      	ldr	r1, [pc, #56]	@ (80014c4 <main+0x84>)
 800148c:	480a      	ldr	r0, [pc, #40]	@ (80014b8 <main+0x78>)
 800148e:	f004 fda0 	bl	8005fd2 <strstr>
 8001492:	6078      	str	r0, [r7, #4]
    if (start != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <main+0x66>
    {
        start += 11; // Move past "+TEST: RX \""
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	330b      	adds	r3, #11
 800149e:	607b      	str	r3, [r7, #4]
        displayData(start);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f865 	bl	8001570 <displayData>
    }

    // Clear buffers to avoid stale data
    clearBuffers();
 80014a6:	f000 f84f 	bl	8001548 <clearBuffers>
  {
 80014aa:	e7db      	b.n	8001464 <main+0x24>
 80014ac:	080081b4 	.word	0x080081b4
 80014b0:	080081bc 	.word	0x080081bc
 80014b4:	080081cc 	.word	0x080081cc
 80014b8:	200003d0 	.word	0x200003d0
 80014bc:	200004d4 	.word	0x200004d4
 80014c0:	2000055c 	.word	0x2000055c
 80014c4:	080081e0 	.word	0x080081e0

080014c8 <initializePeripherals>:

/**
  * @brief Initialize peripherals and LCD.
  */
void initializePeripherals(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  MX_GPIO_Init();
 80014cc:	f7ff fd52 	bl	8000f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d0:	f000 fc22 	bl	8001d18 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80014d4:	f000 fbf0 	bl	8001cb8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80014d8:	f7ff fdb2 	bl	8001040 <MX_I2C1_Init>

  lcd_init(&hi2c1, &lcd);
 80014dc:	4903      	ldr	r1, [pc, #12]	@ (80014ec <initializePeripherals+0x24>)
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <initializePeripherals+0x28>)
 80014e0:	f7ff fe4c 	bl	800117c <lcd_init>
  clearlcd();
 80014e4:	f7ff ff40 	bl	8001368 <clearlcd>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000244 	.word	0x20000244
 80014f0:	200001f0 	.word	0x200001f0

080014f4 <sendLoRaCommand>:

/**
  * @brief Send a command to the LoRa module.
  */
void sendLoRaCommand(const char* cmd)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  snprintf(loraCmd, sizeof(loraCmd), "%s", cmd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <sendLoRaCommand+0x44>)
 8001500:	2140      	movs	r1, #64	@ 0x40
 8001502:	480e      	ldr	r0, [pc, #56]	@ (800153c <sendLoRaCommand+0x48>)
 8001504:	f004 fcd2 	bl	8005eac <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)loraCmd, strlen(loraCmd), 1000);
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <sendLoRaCommand+0x48>)
 800150a:	f7fe feb1 	bl	8000270 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b29a      	uxth	r2, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001516:	4909      	ldr	r1, [pc, #36]	@ (800153c <sendLoRaCommand+0x48>)
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <sendLoRaCommand+0x4c>)
 800151a:	f003 f901 	bl	8004720 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, (uint8_t*)loraResp, sizeof(loraResp), 1000);
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001526:	4907      	ldr	r1, [pc, #28]	@ (8001544 <sendLoRaCommand+0x50>)
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <sendLoRaCommand+0x4c>)
 800152a:	f003 f982 	bl	8004832 <HAL_UART_Receive>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	080081ec 	.word	0x080081ec
 800153c:	20000250 	.word	0x20000250
 8001540:	200004d4 	.word	0x200004d4
 8001544:	20000290 	.word	0x20000290

08001548 <clearBuffers>:

/**
  * @brief Clear the command and response buffers.
  */
void clearBuffers(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  memset(loraMsg, 0, sizeof(loraMsg));
 800154c:	2240      	movs	r2, #64	@ 0x40
 800154e:	2100      	movs	r1, #0
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <clearBuffers+0x20>)
 8001552:	f004 fd24 	bl	8005f9e <memset>
  memset(loraRetMsg, 0, sizeof(loraRetMsg));
 8001556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155a:	2100      	movs	r1, #0
 800155c:	4803      	ldr	r0, [pc, #12]	@ (800156c <clearBuffers+0x24>)
 800155e:	f004 fd1e 	bl	8005f9e <memset>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000390 	.word	0x20000390
 800156c:	200003d0 	.word	0x200003d0

08001570 <displayData>:

/**
  * @brief Display data on the LCD based on the message ID.
  */
void displayData(char *message) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b08d      	sub	sp, #52	@ 0x34
 8001574:	af04      	add	r7, sp, #16
 8001576:	6078      	str	r0, [r7, #4]
    char buff[20];

    // Check if the message is from the external temperature and humidity sensor (ID "01")
    if (strncmp(message, "01", 2) == 0) {
 8001578:	2202      	movs	r2, #2
 800157a:	49a4      	ldr	r1, [pc, #656]	@ (800180c <displayData+0x29c>)
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f004 fd16 	bl	8005fae <strncmp>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d170      	bne.n	800166a <displayData+0xfa>
        clearlcd();
 8001588:	f7ff feee 	bl	8001368 <clearlcd>
        lcd_position(&hi2c1, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	489f      	ldr	r0, [pc, #636]	@ (8001810 <displayData+0x2a0>)
 8001592:	f7ff ff2c 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "Temp & Humidity");
 8001596:	499f      	ldr	r1, [pc, #636]	@ (8001814 <displayData+0x2a4>)
 8001598:	489d      	ldr	r0, [pc, #628]	@ (8001810 <displayData+0x2a0>)
 800159a:	f7ff feff 	bl	800139c <lcd_print>
        lcd_position(&hi2c1, 0, 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	2100      	movs	r1, #0
 80015a2:	489b      	ldr	r0, [pc, #620]	@ (8001810 <displayData+0x2a0>)
 80015a4:	f7ff ff23 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "Outside");
 80015a8:	499b      	ldr	r1, [pc, #620]	@ (8001818 <displayData+0x2a8>)
 80015aa:	4899      	ldr	r0, [pc, #612]	@ (8001810 <displayData+0x2a0>)
 80015ac:	f7ff fef6 	bl	800139c <lcd_print>
        HAL_Delay(2000);
 80015b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015b4:	f000 fd28 	bl	8002008 <HAL_Delay>
        clearlcd();
 80015b8:	f7ff fed6 	bl	8001368 <clearlcd>

        // Extract and display temperature
        snprintf(buff, sizeof(buff), "Temp: %c%c.%c%c C", message[2], message[3], message[4], message[5]);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3302      	adds	r3, #2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461c      	mov	r4, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3303      	adds	r3, #3
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3304      	adds	r3, #4
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3305      	adds	r3, #5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	f107 000c 	add.w	r0, r7, #12
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	9101      	str	r1, [sp, #4]
 80015e2:	9200      	str	r2, [sp, #0]
 80015e4:	4623      	mov	r3, r4
 80015e6:	4a8d      	ldr	r2, [pc, #564]	@ (800181c <displayData+0x2ac>)
 80015e8:	2114      	movs	r1, #20
 80015ea:	f004 fc5f 	bl	8005eac <sniprintf>
        lcd_position(&hi2c1, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	4887      	ldr	r0, [pc, #540]	@ (8001810 <displayData+0x2a0>)
 80015f4:	f7ff fefb 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, buff);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4619      	mov	r1, r3
 80015fe:	4884      	ldr	r0, [pc, #528]	@ (8001810 <displayData+0x2a0>)
 8001600:	f7ff fecc 	bl	800139c <lcd_print>
        memset(buff, 0, sizeof(buff));
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2214      	movs	r2, #20
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f004 fcc6 	bl	8005f9e <memset>

        // Extract and display humidity
        snprintf(buff, sizeof(buff), "Hum: %c%c.%c%c %%", message[6], message[7], message[8], message[9]);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3306      	adds	r3, #6
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461c      	mov	r4, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3307      	adds	r3, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3308      	adds	r3, #8
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3309      	adds	r3, #9
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	f107 000c 	add.w	r0, r7, #12
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	9101      	str	r1, [sp, #4]
 8001638:	9200      	str	r2, [sp, #0]
 800163a:	4623      	mov	r3, r4
 800163c:	4a78      	ldr	r2, [pc, #480]	@ (8001820 <displayData+0x2b0>)
 800163e:	2114      	movs	r1, #20
 8001640:	f004 fc34 	bl	8005eac <sniprintf>
        lcd_position(&hi2c1, 0, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	2100      	movs	r1, #0
 8001648:	4871      	ldr	r0, [pc, #452]	@ (8001810 <displayData+0x2a0>)
 800164a:	f7ff fed0 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, buff);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	486e      	ldr	r0, [pc, #440]	@ (8001810 <displayData+0x2a0>)
 8001656:	f7ff fea1 	bl	800139c <lcd_print>
        memset(buff, 0, sizeof(buff));
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2214      	movs	r2, #20
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f004 fc9b 	bl	8005f9e <memset>
        lcd_position(&hi2c1, 2, 0);
        lcd_print(&hi2c1, "PRESENCE");
        lcd_position(&hi2c1, 1, 1);
        lcd_print(&hi2c1, "DETECTED");
    }
}
 8001668:	e179      	b.n	800195e <displayData+0x3ee>
    else if (strncmp(message, "02", 2) == 0) {
 800166a:	2202      	movs	r2, #2
 800166c:	496d      	ldr	r1, [pc, #436]	@ (8001824 <displayData+0x2b4>)
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f004 fc9d 	bl	8005fae <strncmp>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d15f      	bne.n	800173a <displayData+0x1ca>
        weightMg = atoi(&message[2]); // Convert string to integer (mg)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3302      	adds	r3, #2
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fe73 	bl	800536a <atoi>
 8001684:	4603      	mov	r3, r0
 8001686:	4a68      	ldr	r2, [pc, #416]	@ (8001828 <displayData+0x2b8>)
 8001688:	6013      	str	r3, [r2, #0]
        weightG = weightMg / 1000.0; // Convert to grams
 800168a:	4b67      	ldr	r3, [pc, #412]	@ (8001828 <displayData+0x2b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff48 	bl	8000524 <__aeabi_i2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b64      	ldr	r3, [pc, #400]	@ (800182c <displayData+0x2bc>)
 800169a:	f7ff f8d7 	bl	800084c <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa7f 	bl	8000ba8 <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a60      	ldr	r2, [pc, #384]	@ (8001830 <displayData+0x2c0>)
 80016ae:	6013      	str	r3, [r2, #0]
        clearlcd();
 80016b0:	f7ff fe5a 	bl	8001368 <clearlcd>
        lcd_position(&hi2c1, 2, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2102      	movs	r1, #2
 80016b8:	4855      	ldr	r0, [pc, #340]	@ (8001810 <displayData+0x2a0>)
 80016ba:	f7ff fe98 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "Current Weight");
 80016be:	495d      	ldr	r1, [pc, #372]	@ (8001834 <displayData+0x2c4>)
 80016c0:	4853      	ldr	r0, [pc, #332]	@ (8001810 <displayData+0x2a0>)
 80016c2:	f7ff fe6b 	bl	800139c <lcd_print>
        lcd_position(&hi2c1, 2, 1);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2102      	movs	r1, #2
 80016ca:	4851      	ldr	r0, [pc, #324]	@ (8001810 <displayData+0x2a0>)
 80016cc:	f7ff fe8f 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "in Hive");
 80016d0:	4959      	ldr	r1, [pc, #356]	@ (8001838 <displayData+0x2c8>)
 80016d2:	484f      	ldr	r0, [pc, #316]	@ (8001810 <displayData+0x2a0>)
 80016d4:	f7ff fe62 	bl	800139c <lcd_print>
        HAL_Delay(2000);
 80016d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016dc:	f000 fc94 	bl	8002008 <HAL_Delay>
        clearlcd();
 80016e0:	f7ff fe42 	bl	8001368 <clearlcd>
        lcd_position(&hi2c1, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	4849      	ldr	r0, [pc, #292]	@ (8001810 <displayData+0x2a0>)
 80016ea:	f7ff fe80 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "Hive Weight:");
 80016ee:	4953      	ldr	r1, [pc, #332]	@ (800183c <displayData+0x2cc>)
 80016f0:	4847      	ldr	r0, [pc, #284]	@ (8001810 <displayData+0x2a0>)
 80016f2:	f7ff fe53 	bl	800139c <lcd_print>
        snprintf(buff, sizeof(buff), "%.2f g", weightG);
 80016f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001830 <displayData+0x2c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff24 	bl	8000548 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	f107 000c 	add.w	r0, r7, #12
 8001708:	e9cd 2300 	strd	r2, r3, [sp]
 800170c:	4a4c      	ldr	r2, [pc, #304]	@ (8001840 <displayData+0x2d0>)
 800170e:	2114      	movs	r1, #20
 8001710:	f004 fbcc 	bl	8005eac <sniprintf>
        lcd_position(&hi2c1, 0, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	2100      	movs	r1, #0
 8001718:	483d      	ldr	r0, [pc, #244]	@ (8001810 <displayData+0x2a0>)
 800171a:	f7ff fe68 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, buff);
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	4619      	mov	r1, r3
 8001724:	483a      	ldr	r0, [pc, #232]	@ (8001810 <displayData+0x2a0>)
 8001726:	f7ff fe39 	bl	800139c <lcd_print>
        memset(buff, 0, sizeof(buff));
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2214      	movs	r2, #20
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f004 fc33 	bl	8005f9e <memset>
}
 8001738:	e111      	b.n	800195e <displayData+0x3ee>
    else if (strncmp(message, "002", 3) == 0) {
 800173a:	2203      	movs	r2, #3
 800173c:	4941      	ldr	r1, [pc, #260]	@ (8001844 <displayData+0x2d4>)
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f004 fc35 	bl	8005fae <strncmp>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d17e      	bne.n	8001848 <displayData+0x2d8>
        weightMg = atoi(&message[3]);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3303      	adds	r3, #3
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fe0b 	bl	800536a <atoi>
 8001754:	4603      	mov	r3, r0
 8001756:	4a34      	ldr	r2, [pc, #208]	@ (8001828 <displayData+0x2b8>)
 8001758:	6013      	str	r3, [r2, #0]
        weightG = weightMg / 1000.0;
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <displayData+0x2b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fee0 	bl	8000524 <__aeabi_i2d>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b30      	ldr	r3, [pc, #192]	@ (800182c <displayData+0x2bc>)
 800176a:	f7ff f86f 	bl	800084c <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa17 	bl	8000ba8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	4a2c      	ldr	r2, [pc, #176]	@ (8001830 <displayData+0x2c0>)
 800177e:	6013      	str	r3, [r2, #0]
        clearlcd();
 8001780:	f7ff fdf2 	bl	8001368 <clearlcd>
        lcd_position(&hi2c1, 2, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2102      	movs	r1, #2
 8001788:	4821      	ldr	r0, [pc, #132]	@ (8001810 <displayData+0x2a0>)
 800178a:	f7ff fe30 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "Current Weight");
 800178e:	4929      	ldr	r1, [pc, #164]	@ (8001834 <displayData+0x2c4>)
 8001790:	481f      	ldr	r0, [pc, #124]	@ (8001810 <displayData+0x2a0>)
 8001792:	f7ff fe03 	bl	800139c <lcd_print>
        lcd_position(&hi2c1, 2, 1);
 8001796:	2201      	movs	r2, #1
 8001798:	2102      	movs	r1, #2
 800179a:	481d      	ldr	r0, [pc, #116]	@ (8001810 <displayData+0x2a0>)
 800179c:	f7ff fe27 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "in Hive");
 80017a0:	4925      	ldr	r1, [pc, #148]	@ (8001838 <displayData+0x2c8>)
 80017a2:	481b      	ldr	r0, [pc, #108]	@ (8001810 <displayData+0x2a0>)
 80017a4:	f7ff fdfa 	bl	800139c <lcd_print>
        HAL_Delay(2000);
 80017a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017ac:	f000 fc2c 	bl	8002008 <HAL_Delay>
        clearlcd();
 80017b0:	f7ff fdda 	bl	8001368 <clearlcd>
        lcd_position(&hi2c1, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	4815      	ldr	r0, [pc, #84]	@ (8001810 <displayData+0x2a0>)
 80017ba:	f7ff fe18 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "Hive Weight:");
 80017be:	491f      	ldr	r1, [pc, #124]	@ (800183c <displayData+0x2cc>)
 80017c0:	4813      	ldr	r0, [pc, #76]	@ (8001810 <displayData+0x2a0>)
 80017c2:	f7ff fdeb 	bl	800139c <lcd_print>
        snprintf(buff, sizeof(buff), "%.2f g", weightG);
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <displayData+0x2c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe febc 	bl	8000548 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	f107 000c 	add.w	r0, r7, #12
 80017d8:	e9cd 2300 	strd	r2, r3, [sp]
 80017dc:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <displayData+0x2d0>)
 80017de:	2114      	movs	r1, #20
 80017e0:	f004 fb64 	bl	8005eac <sniprintf>
        lcd_position(&hi2c1, 0, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2100      	movs	r1, #0
 80017e8:	4809      	ldr	r0, [pc, #36]	@ (8001810 <displayData+0x2a0>)
 80017ea:	f7ff fe00 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, buff);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	4806      	ldr	r0, [pc, #24]	@ (8001810 <displayData+0x2a0>)
 80017f6:	f7ff fdd1 	bl	800139c <lcd_print>
        memset(buff, 0, sizeof(buff));
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	2214      	movs	r2, #20
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fbcb 	bl	8005f9e <memset>
}
 8001808:	e0a9      	b.n	800195e <displayData+0x3ee>
 800180a:	bf00      	nop
 800180c:	080081f0 	.word	0x080081f0
 8001810:	200001f0 	.word	0x200001f0
 8001814:	080081f4 	.word	0x080081f4
 8001818:	08008204 	.word	0x08008204
 800181c:	0800820c 	.word	0x0800820c
 8001820:	08008220 	.word	0x08008220
 8001824:	08008234 	.word	0x08008234
 8001828:	20000248 	.word	0x20000248
 800182c:	408f4000 	.word	0x408f4000
 8001830:	2000024c 	.word	0x2000024c
 8001834:	08008238 	.word	0x08008238
 8001838:	08008248 	.word	0x08008248
 800183c:	08008250 	.word	0x08008250
 8001840:	08008260 	.word	0x08008260
 8001844:	08008268 	.word	0x08008268
    else if (strncmp(message, "03", 2) == 0) {
 8001848:	2202      	movs	r2, #2
 800184a:	4947      	ldr	r1, [pc, #284]	@ (8001968 <displayData+0x3f8>)
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f004 fbae 	bl	8005fae <strncmp>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d166      	bne.n	8001926 <displayData+0x3b6>
        clearlcd();
 8001858:	f7ff fd86 	bl	8001368 <clearlcd>
        lcd_position(&hi2c1, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	4842      	ldr	r0, [pc, #264]	@ (800196c <displayData+0x3fc>)
 8001862:	f7ff fdc4 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "Temp & Humidity");
 8001866:	4942      	ldr	r1, [pc, #264]	@ (8001970 <displayData+0x400>)
 8001868:	4840      	ldr	r0, [pc, #256]	@ (800196c <displayData+0x3fc>)
 800186a:	f7ff fd97 	bl	800139c <lcd_print>
        lcd_position(&hi2c1, 0, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	2100      	movs	r1, #0
 8001872:	483e      	ldr	r0, [pc, #248]	@ (800196c <displayData+0x3fc>)
 8001874:	f7ff fdbb 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "Inside");
 8001878:	493e      	ldr	r1, [pc, #248]	@ (8001974 <displayData+0x404>)
 800187a:	483c      	ldr	r0, [pc, #240]	@ (800196c <displayData+0x3fc>)
 800187c:	f7ff fd8e 	bl	800139c <lcd_print>
        HAL_Delay(2000);
 8001880:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001884:	f000 fbc0 	bl	8002008 <HAL_Delay>
        clearlcd();
 8001888:	f7ff fd6e 	bl	8001368 <clearlcd>
        snprintf(buff, sizeof(buff), "Temp: %c%c.%c C", message[2], message[3], message[4]);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3302      	adds	r3, #2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3303      	adds	r3, #3
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	f107 000c 	add.w	r0, r7, #12
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	9200      	str	r2, [sp, #0]
 80018aa:	460b      	mov	r3, r1
 80018ac:	4a32      	ldr	r2, [pc, #200]	@ (8001978 <displayData+0x408>)
 80018ae:	2114      	movs	r1, #20
 80018b0:	f004 fafc 	bl	8005eac <sniprintf>
        lcd_position(&hi2c1, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	482c      	ldr	r0, [pc, #176]	@ (800196c <displayData+0x3fc>)
 80018ba:	f7ff fd98 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, buff);
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	4829      	ldr	r0, [pc, #164]	@ (800196c <displayData+0x3fc>)
 80018c6:	f7ff fd69 	bl	800139c <lcd_print>
        memset(buff, 0, sizeof(buff));
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	2214      	movs	r2, #20
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fb63 	bl	8005f9e <memset>
        snprintf(buff, sizeof(buff), "Hum: %c%c.%c %%", message[5], message[6], message[7]);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3305      	adds	r3, #5
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4619      	mov	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3306      	adds	r3, #6
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3307      	adds	r3, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	f107 000c 	add.w	r0, r7, #12
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	9200      	str	r2, [sp, #0]
 80018f6:	460b      	mov	r3, r1
 80018f8:	4a20      	ldr	r2, [pc, #128]	@ (800197c <displayData+0x40c>)
 80018fa:	2114      	movs	r1, #20
 80018fc:	f004 fad6 	bl	8005eac <sniprintf>
        lcd_position(&hi2c1, 0, 1);
 8001900:	2201      	movs	r2, #1
 8001902:	2100      	movs	r1, #0
 8001904:	4819      	ldr	r0, [pc, #100]	@ (800196c <displayData+0x3fc>)
 8001906:	f7ff fd72 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, buff);
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4619      	mov	r1, r3
 8001910:	4816      	ldr	r0, [pc, #88]	@ (800196c <displayData+0x3fc>)
 8001912:	f7ff fd43 	bl	800139c <lcd_print>
        memset(buff, 0, sizeof(buff));
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2214      	movs	r2, #20
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fb3d 	bl	8005f9e <memset>
}
 8001924:	e01b      	b.n	800195e <displayData+0x3ee>
    else if (strncmp(message, "04", 2) == 0) {
 8001926:	2202      	movs	r2, #2
 8001928:	4915      	ldr	r1, [pc, #84]	@ (8001980 <displayData+0x410>)
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f004 fb3f 	bl	8005fae <strncmp>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d113      	bne.n	800195e <displayData+0x3ee>
        clearlcd();
 8001936:	f7ff fd17 	bl	8001368 <clearlcd>
        lcd_position(&hi2c1, 2, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2102      	movs	r1, #2
 800193e:	480b      	ldr	r0, [pc, #44]	@ (800196c <displayData+0x3fc>)
 8001940:	f7ff fd55 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "PRESENCE");
 8001944:	490f      	ldr	r1, [pc, #60]	@ (8001984 <displayData+0x414>)
 8001946:	4809      	ldr	r0, [pc, #36]	@ (800196c <displayData+0x3fc>)
 8001948:	f7ff fd28 	bl	800139c <lcd_print>
        lcd_position(&hi2c1, 1, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	2101      	movs	r1, #1
 8001950:	4806      	ldr	r0, [pc, #24]	@ (800196c <displayData+0x3fc>)
 8001952:	f7ff fd4c 	bl	80013ee <lcd_position>
        lcd_print(&hi2c1, "DETECTED");
 8001956:	490c      	ldr	r1, [pc, #48]	@ (8001988 <displayData+0x418>)
 8001958:	4804      	ldr	r0, [pc, #16]	@ (800196c <displayData+0x3fc>)
 800195a:	f7ff fd1f 	bl	800139c <lcd_print>
}
 800195e:	bf00      	nop
 8001960:	3724      	adds	r7, #36	@ 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	bf00      	nop
 8001968:	0800826c 	.word	0x0800826c
 800196c:	200001f0 	.word	0x200001f0
 8001970:	080081f4 	.word	0x080081f4
 8001974:	08008270 	.word	0x08008270
 8001978:	08008278 	.word	0x08008278
 800197c:	08008288 	.word	0x08008288
 8001980:	08008298 	.word	0x08008298
 8001984:	0800829c 	.word	0x0800829c
 8001988:	080082a8 	.word	0x080082a8

0800198c <__io_putchar>:

PUTCHAR_PROTOTYPE // Display printf in terminal
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001994:	1d39      	adds	r1, r7, #4
 8001996:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800199a:	2201      	movs	r2, #1
 800199c:	4803      	ldr	r0, [pc, #12]	@ (80019ac <__io_putchar+0x20>)
 800199e:	f002 febf 	bl	8004720 <HAL_UART_Transmit>
  return ch;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000055c 	.word	0x2000055c

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b096      	sub	sp, #88	@ 0x58
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	2244      	movs	r2, #68	@ 0x44
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 faed 	bl	8005f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019d6:	f001 fb43 	bl	8003060 <HAL_PWREx_ControlVoltageScaling>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019e0:	f000 f837 	bl	8001a52 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e4:	2302      	movs	r3, #2
 80019e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ee:	2310      	movs	r3, #16
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f2:	2302      	movs	r3, #2
 80019f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f6:	2302      	movs	r3, #2
 80019f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019fe:	230a      	movs	r3, #10
 8001a00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a02:	2307      	movs	r3, #7
 8001a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fb7a 	bl	800310c <HAL_RCC_OscConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a1e:	f000 f818 	bl	8001a52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a22:	230f      	movs	r3, #15
 8001a24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a26:	2303      	movs	r3, #3
 8001a28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	2104      	movs	r1, #4
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 ff42 	bl	80038c4 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a46:	f000 f804 	bl	8001a52 <Error_Handler>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3758      	adds	r7, #88	@ 0x58
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a56:	b672      	cpsid	i
}
 8001a58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5a:	bf00      	nop
 8001a5c:	e7fd      	b.n	8001a5a <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_MspInit+0x44>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <NMI_Handler+0x4>

08001ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <MemManage_Handler+0x4>

08001ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <UsageFault_Handler+0x4>

08001ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afe:	f000 fa63 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_kill>:

int _kill(int pid, int sig)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b20:	f004 fab8 	bl	8006094 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2216      	movs	r2, #22
 8001b28:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_exit>:

void _exit (int status)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffe7 	bl	8001b16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <_exit+0x12>

08001b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e00a      	b.n	8001b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5e:	f3af 8000 	nop.w
 8001b62:	4601      	mov	r1, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf0      	blt.n	8001b5e <_read+0x12>
  }

  return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e009      	b.n	8001bac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fef3 	bl	800198c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf1      	blt.n	8001b98 <_write+0x12>
  }
  return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_close>:

int _close(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be6:	605a      	str	r2, [r3, #4]
  return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_isatty>:

int _isatty(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f004 fa1c 	bl	8006094 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20018000 	.word	0x20018000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	200004d0 	.word	0x200004d0
 8001c90:	20000738 	.word	0x20000738

08001c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <MX_USART1_UART_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cc4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_USART1_UART_Init+0x58>)
 8001cfc:	f002 fcc2 	bl	8004684 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d06:	f7ff fea4 	bl	8001a52 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200004d4 	.word	0x200004d4
 8001d14:	40013800 	.word	0x40013800

08001d18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d1e:	4a15      	ldr	r2, [pc, #84]	@ (8001d74 <MX_USART2_UART_Init+0x5c>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_USART2_UART_Init+0x58>)
 8001d5c:	f002 fc92 	bl	8004684 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d66:	f7ff fe74 	bl	8001a52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000055c 	.word	0x2000055c
 8001d74:	40004400 	.word	0x40004400

08001d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0ae      	sub	sp, #184	@ 0xb8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	2288      	movs	r2, #136	@ 0x88
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f004 f900 	bl	8005f9e <memset>
  if(uartHandle->Instance==USART1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a43      	ldr	r2, [pc, #268]	@ (8001eb0 <HAL_UART_MspInit+0x138>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d13d      	bne.n	8001e24 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dac:	2300      	movs	r3, #0
 8001dae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 ffa9 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dc0:	f7ff fe47 	bl	8001a52 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001dca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dce:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dd0:	4b38      	ldr	r3, [pc, #224]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	4a34      	ldr	r2, [pc, #208]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de8:	4b32      	ldr	r3, [pc, #200]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001df4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001df8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e0e:	2307      	movs	r3, #7
 8001e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1e:	f000 f9fd 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e22:	e040      	b.n	8001ea6 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <HAL_UART_MspInit+0x140>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d13b      	bne.n	8001ea6 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 ff66 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001e46:	f7ff fe04 	bl	8001a52 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	4a19      	ldr	r2, [pc, #100]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e56:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	4a13      	ldr	r2, [pc, #76]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_UART_MspInit+0x13c>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e7a:	230c      	movs	r3, #12
 8001e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e92:	2307      	movs	r3, #7
 8001e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea2:	f000 f9bb 	bl	800221c <HAL_GPIO_Init>
}
 8001ea6:	bf00      	nop
 8001ea8:	37b8      	adds	r7, #184	@ 0xb8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40004400 	.word	0x40004400

08001ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ef4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec0:	f7ff fee8 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ec6:	490d      	ldr	r1, [pc, #52]	@ (8001efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <LoopForever+0xe>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001edc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f08 <LoopForever+0x16>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eea:	f004 f8d9 	bl	80060a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eee:	f7ff faa7 	bl	8001440 <main>

08001ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ef2:	e7fe      	b.n	8001ef2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f00:	08008680 	.word	0x08008680
  ldr r2, =_sbss
 8001f04:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f08:	20000734 	.word	0x20000734

08001f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC1_2_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <HAL_Init+0x3c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_Init+0x3c>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f944 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 f80f 	bl	8001f50 <HAL_InitTick>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	e001      	b.n	8001f42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f3e:	f7ff fd8f 	bl	8001a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f42:	79fb      	ldrb	r3, [r7, #7]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40022000 	.word	0x40022000

08001f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f5c:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <HAL_InitTick+0x6c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d023      	beq.n	8001fac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f64:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <HAL_InitTick+0x70>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <HAL_InitTick+0x6c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f941 	bl	8002202 <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10f      	bne.n	8001fa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d809      	bhi.n	8001fa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f000 f919 	bl	80021ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f98:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <HAL_InitTick+0x74>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e004      	b.n	8001fb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	e001      	b.n	8001fb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	200005e4 	.word	0x200005e4

08001ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <HAL_GetTick+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	200005e4 	.word	0x200005e4

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff ffee 	bl	8001ff0 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_Delay+0x44>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000008 	.word	0x20000008

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff8e 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff47 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff5c 	bl	8002098 <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff8e 	bl	8002108 <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5d 	bl	80020b4 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffb0 	bl	8002170 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222a:	e17f      	b.n	800252c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8171 	beq.w	8002526 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d005      	beq.n	800225c <HAL_GPIO_Init+0x40>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d130      	bne.n	80022be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002292:	2201      	movs	r2, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 0201 	and.w	r2, r3, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d118      	bne.n	80022fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022d0:	2201      	movs	r2, #1
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b03      	cmp	r3, #3
 8002306:	d017      	beq.n	8002338 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d123      	bne.n	800238c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	6939      	ldr	r1, [r7, #16]
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80ac 	beq.w	8002526 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	4b5f      	ldr	r3, [pc, #380]	@ (800254c <HAL_GPIO_Init+0x330>)
 80023d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d2:	4a5e      	ldr	r2, [pc, #376]	@ (800254c <HAL_GPIO_Init+0x330>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80023da:	4b5c      	ldr	r3, [pc, #368]	@ (800254c <HAL_GPIO_Init+0x330>)
 80023dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002550 <HAL_GPIO_Init+0x334>)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3302      	adds	r3, #2
 80023ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002410:	d025      	beq.n	800245e <HAL_GPIO_Init+0x242>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4f      	ldr	r2, [pc, #316]	@ (8002554 <HAL_GPIO_Init+0x338>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <HAL_GPIO_Init+0x23e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4e      	ldr	r2, [pc, #312]	@ (8002558 <HAL_GPIO_Init+0x33c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x23a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4d      	ldr	r2, [pc, #308]	@ (800255c <HAL_GPIO_Init+0x340>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x236>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4c      	ldr	r2, [pc, #304]	@ (8002560 <HAL_GPIO_Init+0x344>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x232>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4b      	ldr	r2, [pc, #300]	@ (8002564 <HAL_GPIO_Init+0x348>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x22e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4a      	ldr	r2, [pc, #296]	@ (8002568 <HAL_GPIO_Init+0x34c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x22a>
 8002442:	2306      	movs	r3, #6
 8002444:	e00c      	b.n	8002460 <HAL_GPIO_Init+0x244>
 8002446:	2307      	movs	r3, #7
 8002448:	e00a      	b.n	8002460 <HAL_GPIO_Init+0x244>
 800244a:	2305      	movs	r3, #5
 800244c:	e008      	b.n	8002460 <HAL_GPIO_Init+0x244>
 800244e:	2304      	movs	r3, #4
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x244>
 8002452:	2303      	movs	r3, #3
 8002454:	e004      	b.n	8002460 <HAL_GPIO_Init+0x244>
 8002456:	2302      	movs	r3, #2
 8002458:	e002      	b.n	8002460 <HAL_GPIO_Init+0x244>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_GPIO_Init+0x244>
 800245e:	2300      	movs	r3, #0
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	f002 0203 	and.w	r2, r2, #3
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	4093      	lsls	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002470:	4937      	ldr	r1, [pc, #220]	@ (8002550 <HAL_GPIO_Init+0x334>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_GPIO_Init+0x350>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a2:	4a32      	ldr	r2, [pc, #200]	@ (800256c <HAL_GPIO_Init+0x350>)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024a8:	4b30      	ldr	r3, [pc, #192]	@ (800256c <HAL_GPIO_Init+0x350>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024cc:	4a27      	ldr	r2, [pc, #156]	@ (800256c <HAL_GPIO_Init+0x350>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024d2:	4b26      	ldr	r3, [pc, #152]	@ (800256c <HAL_GPIO_Init+0x350>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024f6:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_GPIO_Init+0x350>)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <HAL_GPIO_Init+0x350>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002520:	4a12      	ldr	r2, [pc, #72]	@ (800256c <HAL_GPIO_Init+0x350>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	f47f ae78 	bne.w	800222c <HAL_GPIO_Init+0x10>
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	40010000 	.word	0x40010000
 8002554:	48000400 	.word	0x48000400
 8002558:	48000800 	.word	0x48000800
 800255c:	48000c00 	.word	0x48000c00
 8002560:	48001000 	.word	0x48001000
 8002564:	48001400 	.word	0x48001400
 8002568:	48001800 	.word	0x48001800
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800258c:	e002      	b.n	8002594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e08d      	b.n	80026ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fd7a 	bl	80010c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	@ 0x24
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	e006      	b.n	8002628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d108      	bne.n	8002642 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	e007      	b.n	8002652 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002650:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002664:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69d9      	ldr	r1, [r3, #28]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	461a      	mov	r2, r3
 80026e4:	460b      	mov	r3, r1
 80026e6:	817b      	strh	r3, [r7, #10]
 80026e8:	4613      	mov	r3, r2
 80026ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	f040 80fd 	bne.w	80028f4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_I2C_Master_Transmit+0x30>
 8002704:	2302      	movs	r3, #2
 8002706:	e0f6      	b.n	80028f6 <HAL_I2C_Master_Transmit+0x21e>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002710:	f7ff fc6e 	bl	8001ff0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2319      	movs	r3, #25
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fa00 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0e1      	b.n	80028f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2221      	movs	r2, #33	@ 0x21
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2210      	movs	r2, #16
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	2bff      	cmp	r3, #255	@ 0xff
 8002762:	d906      	bls.n	8002772 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	22ff      	movs	r2, #255	@ 0xff
 8002768:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800276a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	e007      	b.n	8002782 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800277c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002780:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d024      	beq.n	80027d4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	8979      	ldrh	r1, [r7, #10]
 80027c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002900 <HAL_I2C_Master_Transmit+0x228>)
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fb6f 	bl	8002eb0 <I2C_TransferConfig>
 80027d2:	e066      	b.n	80028a2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	4b48      	ldr	r3, [pc, #288]	@ (8002900 <HAL_I2C_Master_Transmit+0x228>)
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fb64 	bl	8002eb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027e8:	e05b      	b.n	80028a2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	6a39      	ldr	r1, [r7, #32]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f9f3 	bl	8002bda <I2C_WaitOnTXISFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07b      	b.n	80028f6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d034      	beq.n	80028a2 <HAL_I2C_Master_Transmit+0x1ca>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d130      	bne.n	80028a2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	2200      	movs	r2, #0
 8002848:	2180      	movs	r1, #128	@ 0x80
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f96c 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e04d      	b.n	80028f6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	2bff      	cmp	r3, #255	@ 0xff
 8002862:	d90e      	bls.n	8002882 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	22ff      	movs	r2, #255	@ 0xff
 8002868:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	b2da      	uxtb	r2, r3
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	2300      	movs	r3, #0
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fb18 	bl	8002eb0 <I2C_TransferConfig>
 8002880:	e00f      	b.n	80028a2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	b2da      	uxtb	r2, r3
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	2300      	movs	r3, #0
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fb07 	bl	8002eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d19e      	bne.n	80027ea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	6a39      	ldr	r1, [r7, #32]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f9d9 	bl	8002c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e01a      	b.n	80028f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2220      	movs	r2, #32
 80028c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <HAL_I2C_Master_Transmit+0x22c>)
 80028d4:	400b      	ands	r3, r1
 80028d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	80002000 	.word	0x80002000
 8002904:	fe00e800 	.word	0xfe00e800

08002908 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	@ 0x28
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	460b      	mov	r3, r1
 8002916:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b20      	cmp	r3, #32
 8002926:	f040 80d6 	bne.w	8002ad6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002938:	d101      	bne.n	800293e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
 800293c:	e0cc      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_I2C_IsDeviceReady+0x44>
 8002948:	2302      	movs	r3, #2
 800294a:	e0c5      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x1d0>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2224      	movs	r2, #36	@ 0x24
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_I2C_IsDeviceReady+0x72>
 800296a:	897b      	ldrh	r3, [r7, #10]
 800296c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002970:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002974:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002978:	e006      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x80>
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002984:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800298e:	f7ff fb2f 	bl	8001ff0 <HAL_GetTick>
 8002992:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b20      	cmp	r3, #32
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029c0:	e034      	b.n	8002a2c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d01a      	beq.n	8002a00 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029ca:	f7ff fb11 	bl	8001ff0 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d302      	bcc.n	80029e0 <HAL_I2C_IsDeviceReady+0xd8>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10f      	bne.n	8002a00 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e06b      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a2c:	7ffb      	ldrb	r3, [r7, #31]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <HAL_I2C_IsDeviceReady+0x130>
 8002a32:	7fbb      	ldrb	r3, [r7, #30]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0c4      	beq.n	80029c2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d01a      	beq.n	8002a7c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2120      	movs	r1, #32
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f869 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e03b      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e02d      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	2120      	movs	r1, #32
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f84e 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e020      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	f63f af56 	bhi.w	8002962 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d103      	bne.n	8002afe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d007      	beq.n	8002b1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	619a      	str	r2, [r3, #24]
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b38:	e03b      	b.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8d6 	bl	8002cf0 <I2C_IsErrorOccurred>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e041      	b.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d02d      	beq.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7ff fa4b 	bl	8001ff0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d122      	bne.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d113      	bne.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0b4      	beq.n	8002b3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002be6:	e033      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f87f 	bl	8002cf0 <I2C_IsErrorOccurred>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e031      	b.n	8002c60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c02:	d025      	beq.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7ff f9f4 	bl	8001ff0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11a      	bne.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d013      	beq.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e007      	b.n	8002c60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d1c4      	bne.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c74:	e02f      	b.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f838 	bl	8002cf0 <I2C_IsErrorOccurred>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e02d      	b.n	8002ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7ff f9b1 	bl	8001ff0 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11a      	bne.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d013      	beq.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e007      	b.n	8002ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d1c8      	bne.n	8002c76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d068      	beq.n	8002dee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d24:	e049      	b.n	8002dba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d045      	beq.n	8002dba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7ff f95f 	bl	8001ff0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_IsErrorOccurred+0x54>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d13a      	bne.n	8002dba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d66:	d121      	bne.n	8002dac <I2C_IsErrorOccurred+0xbc>
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d6e:	d01d      	beq.n	8002dac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d01a      	beq.n	8002dac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d86:	f7ff f933 	bl	8001ff0 <HAL_GetTick>
 8002d8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d8c:	e00e      	b.n	8002dac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d8e:	f7ff f92f 	bl	8001ff0 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b19      	cmp	r3, #25
 8002d9a:	d907      	bls.n	8002dac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f043 0320 	orr.w	r3, r3, #32
 8002da2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002daa:	e006      	b.n	8002dba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d1e9      	bne.n	8002d8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d003      	beq.n	8002dd0 <I2C_IsErrorOccurred+0xe0>
 8002dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0aa      	beq.n	8002d26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	f043 0308 	orr.w	r3, r3, #8
 8002e28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01c      	beq.n	8002e9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff fe3b 	bl	8002ae0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <I2C_IsErrorOccurred+0x1bc>)
 8002e76:	400b      	ands	r3, r1
 8002e78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3728      	adds	r7, #40	@ 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	fe00e800 	.word	0xfe00e800

08002eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	817b      	strh	r3, [r7, #10]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ec8:	7a7b      	ldrb	r3, [r7, #9]
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ed0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ede:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	0d5b      	lsrs	r3, r3, #21
 8002eea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002eee:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <I2C_TransferConfig+0x60>)
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	ea02 0103 	and.w	r1, r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	03ff63ff 	.word	0x03ff63ff

08002f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d138      	bne.n	8002f9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e032      	b.n	8002f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	@ 0x24
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d139      	bne.n	8003034 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e033      	b.n	8003036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2224      	movs	r2, #36	@ 0x24
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ffc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003034:	2302      	movs	r3, #2
  }
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <HAL_PWREx_GetVoltageRange+0x18>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40007000 	.word	0x40007000

08003060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800306e:	d130      	bne.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003070:	4b23      	ldr	r3, [pc, #140]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307c:	d038      	beq.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800307e:	4b20      	ldr	r3, [pc, #128]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003086:	4a1e      	ldr	r2, [pc, #120]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003088:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800308e:	4b1d      	ldr	r3, [pc, #116]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2232      	movs	r2, #50	@ 0x32
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	4a1b      	ldr	r2, [pc, #108]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	3301      	adds	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a4:	e002      	b.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ac:	4b14      	ldr	r3, [pc, #80]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b8:	d102      	bne.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f2      	bne.n	80030a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030cc:	d110      	bne.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e00f      	b.n	80030f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030de:	d007      	beq.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030e0:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030e8:	4a05      	ldr	r2, [pc, #20]	@ (8003100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40007000 	.word	0x40007000
 8003104:	20000000 	.word	0x20000000
 8003108:	431bde83 	.word	0x431bde83

0800310c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e3ca      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311e:	4b97      	ldr	r3, [pc, #604]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003128:	4b94      	ldr	r3, [pc, #592]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80e4 	beq.w	8003308 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_RCC_OscConfig+0x4a>
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	f040 808b 	bne.w	8003264 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b01      	cmp	r3, #1
 8003152:	f040 8087 	bne.w	8003264 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003156:	4b89      	ldr	r3, [pc, #548]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x62>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e3a2      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	4b82      	ldr	r3, [pc, #520]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_RCC_OscConfig+0x7c>
 800317e:	4b7f      	ldr	r3, [pc, #508]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003186:	e005      	b.n	8003194 <HAL_RCC_OscConfig+0x88>
 8003188:	4b7c      	ldr	r3, [pc, #496]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003194:	4293      	cmp	r3, r2
 8003196:	d223      	bcs.n	80031e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fd55 	bl	8003c4c <RCC_SetFlashLatencyFromMSIRange>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e383      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ac:	4b73      	ldr	r3, [pc, #460]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a72      	ldr	r2, [pc, #456]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031b2:	f043 0308 	orr.w	r3, r3, #8
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b70      	ldr	r3, [pc, #448]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	496d      	ldr	r1, [pc, #436]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ca:	4b6c      	ldr	r3, [pc, #432]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	4968      	ldr	r1, [pc, #416]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
 80031de:	e025      	b.n	800322c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e0:	4b66      	ldr	r3, [pc, #408]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a65      	ldr	r2, [pc, #404]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031e6:	f043 0308 	orr.w	r3, r3, #8
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b63      	ldr	r3, [pc, #396]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4960      	ldr	r1, [pc, #384]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031fe:	4b5f      	ldr	r3, [pc, #380]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	495b      	ldr	r1, [pc, #364]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fd15 	bl	8003c4c <RCC_SetFlashLatencyFromMSIRange>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e343      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800322c:	f000 fc4a 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b52      	ldr	r3, [pc, #328]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	4950      	ldr	r1, [pc, #320]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	4a4e      	ldr	r2, [pc, #312]	@ (8003384 <HAL_RCC_OscConfig+0x278>)
 800324a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800324c:	4b4e      	ldr	r3, [pc, #312]	@ (8003388 <HAL_RCC_OscConfig+0x27c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fe7d 	bl	8001f50 <HAL_InitTick>
 8003256:	4603      	mov	r3, r0
 8003258:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d052      	beq.n	8003306 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	e327      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d032      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800326c:	4b43      	ldr	r3, [pc, #268]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a42      	ldr	r2, [pc, #264]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003278:	f7fe feba 	bl	8001ff0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003280:	f7fe feb6 	bl	8001ff0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e310      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003292:	4b3a      	ldr	r3, [pc, #232]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329e:	4b37      	ldr	r3, [pc, #220]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a36      	ldr	r2, [pc, #216]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b34      	ldr	r3, [pc, #208]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4931      	ldr	r1, [pc, #196]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032bc:	4b2f      	ldr	r3, [pc, #188]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	492c      	ldr	r1, [pc, #176]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e01a      	b.n	8003308 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032d2:	4b2a      	ldr	r3, [pc, #168]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a29      	ldr	r2, [pc, #164]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032de:	f7fe fe87 	bl	8001ff0 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e6:	f7fe fe83 	bl	8001ff0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e2dd      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f8:	4b20      	ldr	r3, [pc, #128]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x1da>
 8003304:	e000      	b.n	8003308 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003306:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d074      	beq.n	80033fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x21a>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d10e      	bne.n	800333e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d10b      	bne.n	800333e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d064      	beq.n	80033fc <HAL_RCC_OscConfig+0x2f0>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d160      	bne.n	80033fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e2ba      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x24a>
 8003348:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0b      	ldr	r2, [pc, #44]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e026      	b.n	80033a4 <HAL_RCC_OscConfig+0x298>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800335e:	d115      	bne.n	800338c <HAL_RCC_OscConfig+0x280>
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a05      	ldr	r2, [pc, #20]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003366:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a02      	ldr	r2, [pc, #8]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e014      	b.n	80033a4 <HAL_RCC_OscConfig+0x298>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	080082b4 	.word	0x080082b4
 8003384:	20000000 	.word	0x20000000
 8003388:	20000004 	.word	0x20000004
 800338c:	4ba0      	ldr	r3, [pc, #640]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a9f      	ldr	r2, [pc, #636]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b9d      	ldr	r3, [pc, #628]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a9c      	ldr	r2, [pc, #624]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fe20 	bl	8001ff0 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe fe1c 	bl	8001ff0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e276      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c6:	4b92      	ldr	r3, [pc, #584]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2a8>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe fe0c 	bl	8001ff0 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe fe08 	bl	8001ff0 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e262      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ee:	4b88      	ldr	r3, [pc, #544]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x2d0>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d060      	beq.n	80034cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d005      	beq.n	800341c <HAL_RCC_OscConfig+0x310>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d119      	bne.n	800344a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d116      	bne.n	800344a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341c:	4b7c      	ldr	r3, [pc, #496]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_OscConfig+0x328>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e23f      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b76      	ldr	r3, [pc, #472]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	4973      	ldr	r1, [pc, #460]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003448:	e040      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d023      	beq.n	800349a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003452:	4b6f      	ldr	r3, [pc, #444]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6e      	ldr	r2, [pc, #440]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fdc7 	bl	8001ff0 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003466:	f7fe fdc3 	bl	8001ff0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e21d      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003478:	4b65      	ldr	r3, [pc, #404]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b62      	ldr	r3, [pc, #392]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	495f      	ldr	r1, [pc, #380]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
 8003498:	e018      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b5d      	ldr	r3, [pc, #372]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a5c      	ldr	r2, [pc, #368]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80034a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fe fda3 	bl	8001ff0 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fe fd9f 	bl	8001ff0 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e1f9      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c0:	4b53      	ldr	r3, [pc, #332]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d03c      	beq.n	8003552 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01c      	beq.n	800351a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fd7e 	bl	8001ff0 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fe fd7a 	bl	8001ff0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1d4      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350a:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ef      	beq.n	80034f8 <HAL_RCC_OscConfig+0x3ec>
 8003518:	e01b      	b.n	8003552 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b3d      	ldr	r3, [pc, #244]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800351c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003520:	4a3b      	ldr	r2, [pc, #236]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fe fd61 	bl	8001ff0 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003532:	f7fe fd5d 	bl	8001ff0 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1b7      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003544:	4b32      	ldr	r3, [pc, #200]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ef      	bne.n	8003532 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80a6 	beq.w	80036ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003564:	4b2a      	ldr	r3, [pc, #168]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10d      	bne.n	800358c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	4a26      	ldr	r2, [pc, #152]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357a:	6593      	str	r3, [r2, #88]	@ 0x58
 800357c:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003588:	2301      	movs	r3, #1
 800358a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358c:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_RCC_OscConfig+0x508>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d118      	bne.n	80035ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003598:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <HAL_RCC_OscConfig+0x508>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1d      	ldr	r2, [pc, #116]	@ (8003614 <HAL_RCC_OscConfig+0x508>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a4:	f7fe fd24 	bl	8001ff0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ac:	f7fe fd20 	bl	8001ff0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e17a      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <HAL_RCC_OscConfig+0x508>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4d8>
 80035d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e2:	e029      	b.n	8003638 <HAL_RCC_OscConfig+0x52c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d115      	bne.n	8003618 <HAL_RCC_OscConfig+0x50c>
 80035ec:	4b08      	ldr	r3, [pc, #32]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	4a07      	ldr	r2, [pc, #28]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035fc:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003602:	4a03      	ldr	r2, [pc, #12]	@ (8003610 <HAL_RCC_OscConfig+0x504>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800360c:	e014      	b.n	8003638 <HAL_RCC_OscConfig+0x52c>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	40007000 	.word	0x40007000
 8003618:	4b9c      	ldr	r3, [pc, #624]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	4a9b      	ldr	r2, [pc, #620]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003628:	4b98      	ldr	r3, [pc, #608]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362e:	4a97      	ldr	r2, [pc, #604]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d016      	beq.n	800366e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fe fcd6 	bl	8001ff0 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003646:	e00a      	b.n	800365e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7fe fcd2 	bl	8001ff0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e12a      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365e:	4b8b      	ldr	r3, [pc, #556]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ed      	beq.n	8003648 <HAL_RCC_OscConfig+0x53c>
 800366c:	e015      	b.n	800369a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fe fcbf 	bl	8001ff0 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fe fcbb 	bl	8001ff0 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e113      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800368c:	4b7f      	ldr	r3, [pc, #508]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1ed      	bne.n	8003676 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369a:	7ffb      	ldrb	r3, [r7, #31]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a0:	4b7a      	ldr	r3, [pc, #488]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a4:	4a79      	ldr	r2, [pc, #484]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80fe 	beq.w	80038b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	f040 80d0 	bne.w	8003860 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036c0:	4b72      	ldr	r3, [pc, #456]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0203 	and.w	r2, r3, #3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d130      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	3b01      	subs	r3, #1
 80036e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d127      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d11f      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003700:	2a07      	cmp	r2, #7
 8003702:	bf14      	ite	ne
 8003704:	2201      	movne	r2, #1
 8003706:	2200      	moveq	r2, #0
 8003708:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800370a:	4293      	cmp	r3, r2
 800370c:	d113      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d109      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	3b01      	subs	r3, #1
 8003730:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d06e      	beq.n	8003814 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d069      	beq.n	8003810 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800373c:	4b53      	ldr	r3, [pc, #332]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003748:	4b50      	ldr	r3, [pc, #320]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0ad      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003758:	4b4c      	ldr	r3, [pc, #304]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a4b      	ldr	r2, [pc, #300]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800375e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003764:	f7fe fc44 	bl	8001ff0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fc40 	bl	8001ff0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e09a      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377e:	4b43      	ldr	r3, [pc, #268]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800378a:	4b40      	ldr	r3, [pc, #256]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	4b40      	ldr	r3, [pc, #256]	@ (8003890 <HAL_RCC_OscConfig+0x784>)
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800379a:	3a01      	subs	r2, #1
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037a4:	0212      	lsls	r2, r2, #8
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037ac:	0852      	lsrs	r2, r2, #1
 80037ae:	3a01      	subs	r2, #1
 80037b0:	0552      	lsls	r2, r2, #21
 80037b2:	4311      	orrs	r1, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037b8:	0852      	lsrs	r2, r2, #1
 80037ba:	3a01      	subs	r2, #1
 80037bc:	0652      	lsls	r2, r2, #25
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037c4:	0912      	lsrs	r2, r2, #4
 80037c6:	0452      	lsls	r2, r2, #17
 80037c8:	430a      	orrs	r2, r1
 80037ca:	4930      	ldr	r1, [pc, #192]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037d0:	4b2e      	ldr	r3, [pc, #184]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2d      	ldr	r2, [pc, #180]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037dc:	4b2b      	ldr	r3, [pc, #172]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a2a      	ldr	r2, [pc, #168]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e8:	f7fe fc02 	bl	8001ff0 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe fbfe 	bl	8001ff0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e058      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	4b22      	ldr	r3, [pc, #136]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800380e:	e050      	b.n	80038b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e04f      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003814:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d148      	bne.n	80038b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003820:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a19      	ldr	r2, [pc, #100]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800382c:	4b17      	ldr	r3, [pc, #92]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a16      	ldr	r2, [pc, #88]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003836:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003838:	f7fe fbda 	bl	8001ff0 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fbd6 	bl	8001ff0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e030      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x734>
 800385e:	e028      	b.n	80038b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d023      	beq.n	80038ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a08      	ldr	r2, [pc, #32]	@ (800388c <HAL_RCC_OscConfig+0x780>)
 800386c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fe fbbd 	bl	8001ff0 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003878:	e00c      	b.n	8003894 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387a:	f7fe fbb9 	bl	8001ff0 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d905      	bls.n	8003894 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e013      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
 800388c:	40021000 	.word	0x40021000
 8003890:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003894:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <HAL_RCC_OscConfig+0x7b0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ec      	bne.n	800387a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038a0:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_RCC_OscConfig+0x7b0>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	4905      	ldr	r1, [pc, #20]	@ (80038bc <HAL_RCC_OscConfig+0x7b0>)
 80038a6:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <HAL_RCC_OscConfig+0x7b4>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	60cb      	str	r3, [r1, #12]
 80038ac:	e001      	b.n	80038b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	feeefffc 	.word	0xfeeefffc

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0e7      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b75      	ldr	r3, [pc, #468]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d910      	bls.n	8003908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b72      	ldr	r3, [pc, #456]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 0207 	bic.w	r2, r3, #7
 80038ee:	4970      	ldr	r1, [pc, #448]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0cf      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d010      	beq.n	8003936 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	4b66      	ldr	r3, [pc, #408]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003920:	429a      	cmp	r2, r3
 8003922:	d908      	bls.n	8003936 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b63      	ldr	r3, [pc, #396]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4960      	ldr	r1, [pc, #384]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04c      	beq.n	80039dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d121      	bne.n	800399a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0a6      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003962:	4b54      	ldr	r3, [pc, #336]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d115      	bne.n	800399a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e09a      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800397a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e08e      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800398a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e086      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800399a:	4b46      	ldr	r3, [pc, #280]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0203 	bic.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4943      	ldr	r1, [pc, #268]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fe fb20 	bl	8001ff0 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fe fb1c 	bl	8001ff0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e06e      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 020c 	and.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1eb      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d010      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	4b31      	ldr	r3, [pc, #196]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d208      	bcs.n	8003a0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	492b      	ldr	r1, [pc, #172]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0a:	4b29      	ldr	r3, [pc, #164]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d210      	bcs.n	8003a3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a18:	4b25      	ldr	r3, [pc, #148]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 0207 	bic.w	r2, r3, #7
 8003a20:	4923      	ldr	r1, [pc, #140]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a28:	4b21      	ldr	r3, [pc, #132]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e036      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a46:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	4918      	ldr	r1, [pc, #96]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a64:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4910      	ldr	r1, [pc, #64]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a78:	f000 f824 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	490b      	ldr	r1, [pc, #44]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f4>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	4a09      	ldr	r2, [pc, #36]	@ (8003abc <HAL_RCC_ClockConfig+0x1f8>)
 8003a96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a98:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1fc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fa57 	bl	8001f50 <HAL_InitTick>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003aa6:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40022000 	.word	0x40022000
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	080082b4 	.word	0x080082b4
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	20000004 	.word	0x20000004

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003adc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x34>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d121      	bne.n	8003b36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11e      	bne.n	8003b36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af8:	4b34      	ldr	r3, [pc, #208]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b04:	4b31      	ldr	r3, [pc, #196]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e005      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b14:	4b2d      	ldr	r3, [pc, #180]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b20:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10d      	bne.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3c:	4b25      	ldr	r3, [pc, #148]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e004      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b48:	4b23      	ldr	r3, [pc, #140]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d134      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b52:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d003      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0xac>
 8003b68:	e005      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b6c:	617b      	str	r3, [r7, #20]
      break;
 8003b6e:	e005      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b72:	617b      	str	r3, [r7, #20]
      break;
 8003b74:	e002      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	617b      	str	r3, [r7, #20]
      break;
 8003b7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b7c:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	3301      	adds	r3, #1
 8003b88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b8a:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	fb03 f202 	mul.w	r2, r3, r2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	0e5b      	lsrs	r3, r3, #25
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	3301      	adds	r3, #1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3724      	adds	r7, #36	@ 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	080082cc 	.word	0x080082cc
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	007a1200 	.word	0x007a1200

08003bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be0:	4b03      	ldr	r3, [pc, #12]	@ (8003bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bf8:	f7ff fff0 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4904      	ldr	r1, [pc, #16]	@ (8003c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	080082c4 	.word	0x080082c4

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c24:	f7ff ffda 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0adb      	lsrs	r3, r3, #11
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	@ (8003c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	080082c4 	.word	0x080082c4

08003c4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c58:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c64:	f7ff f9ee 	bl	8003044 <HAL_PWREx_GetVoltageRange>
 8003c68:	6178      	str	r0, [r7, #20]
 8003c6a:	e014      	b.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b25      	ldr	r3, [pc, #148]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	4a24      	ldr	r2, [pc, #144]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c78:	4b22      	ldr	r3, [pc, #136]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c84:	f7ff f9de 	bl	8003044 <HAL_PWREx_GetVoltageRange>
 8003c88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c9c:	d10b      	bne.n	8003cb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b80      	cmp	r3, #128	@ 0x80
 8003ca2:	d919      	bls.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ca8:	d902      	bls.n	8003cb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003caa:	2302      	movs	r3, #2
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	e013      	b.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	e010      	b.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b80      	cmp	r3, #128	@ 0x80
 8003cba:	d902      	bls.n	8003cc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	e00a      	b.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b80      	cmp	r3, #128	@ 0x80
 8003cc6:	d102      	bne.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc8:	2302      	movs	r3, #2
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	e004      	b.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b70      	cmp	r3, #112	@ 0x70
 8003cd2:	d101      	bne.n	8003cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 0207 	bic.w	r2, r3, #7
 8003ce0:	4909      	ldr	r1, [pc, #36]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ce8:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d001      	beq.n	8003cfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40022000 	.word	0x40022000

08003d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d14:	2300      	movs	r3, #0
 8003d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d041      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d30:	d02a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d36:	d824      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d42:	d81e      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4c:	d010      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d4e:	e018      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d50:	4b86      	ldr	r3, [pc, #536]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a85      	ldr	r2, [pc, #532]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d5c:	e015      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fabb 	bl	80042e0 <RCCEx_PLLSAI1_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d6e:	e00c      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3320      	adds	r3, #32
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fba6 	bl	80044c8 <RCCEx_PLLSAI2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	74fb      	strb	r3, [r7, #19]
      break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d90:	4b76      	ldr	r3, [pc, #472]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d9e:	4973      	ldr	r1, [pc, #460]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003da6:	e001      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d041      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dc0:	d02a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003dc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dc6:	d824      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dcc:	d008      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dd2:	d81e      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ddc:	d010      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dde:	e018      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003de0:	4b62      	ldr	r3, [pc, #392]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a61      	ldr	r2, [pc, #388]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dec:	e015      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fa73 	bl	80042e0 <RCCEx_PLLSAI1_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dfe:	e00c      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3320      	adds	r3, #32
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fb5e 	bl	80044c8 <RCCEx_PLLSAI2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e10:	e003      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	74fb      	strb	r3, [r7, #19]
      break;
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e20:	4b52      	ldr	r3, [pc, #328]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e2e:	494f      	ldr	r1, [pc, #316]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e36:	e001      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80a0 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e4e:	4b47      	ldr	r3, [pc, #284]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b41      	ldr	r3, [pc, #260]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e68:	4a40      	ldr	r2, [pc, #256]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e70:	4b3e      	ldr	r3, [pc, #248]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e80:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a3a      	ldr	r2, [pc, #232]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e8c:	f7fe f8b0 	bl	8001ff0 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e92:	e009      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e94:	f7fe f8ac 	bl	8001ff0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d902      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ea8:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ef      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d15c      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eba:	4b2c      	ldr	r3, [pc, #176]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d019      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ed8:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	4a20      	ldr	r2, [pc, #128]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efa:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f04:	4a19      	ldr	r2, [pc, #100]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d016      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fe f86b 	bl	8001ff0 <HAL_GetTick>
 8003f1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1c:	e00b      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fe f867 	bl	8001ff0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d902      	bls.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	74fb      	strb	r3, [r7, #19]
            break;
 8003f34:	e006      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ec      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4a:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f5a:	4904      	ldr	r1, [pc, #16]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f62:	e009      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f64:	7cfb      	ldrb	r3, [r7, #19]
 8003f66:	74bb      	strb	r3, [r7, #18]
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	7cfb      	ldrb	r3, [r7, #19]
 8003f76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f78:	7c7b      	ldrb	r3, [r7, #17]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7e:	4b9e      	ldr	r3, [pc, #632]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f82:	4a9d      	ldr	r2, [pc, #628]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f96:	4b98      	ldr	r3, [pc, #608]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	f023 0203 	bic.w	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	4994      	ldr	r1, [pc, #592]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	f023 020c 	bic.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	498c      	ldr	r1, [pc, #560]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fda:	4b87      	ldr	r3, [pc, #540]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	4983      	ldr	r1, [pc, #524]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004002:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	497b      	ldr	r1, [pc, #492]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800401e:	4b76      	ldr	r3, [pc, #472]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402c:	4972      	ldr	r1, [pc, #456]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004040:	4b6d      	ldr	r3, [pc, #436]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404e:	496a      	ldr	r1, [pc, #424]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004062:	4b65      	ldr	r3, [pc, #404]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	4961      	ldr	r1, [pc, #388]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004084:	4b5c      	ldr	r3, [pc, #368]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004092:	4959      	ldr	r1, [pc, #356]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040a6:	4b54      	ldr	r3, [pc, #336]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b4:	4950      	ldr	r1, [pc, #320]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040c8:	4b4b      	ldr	r3, [pc, #300]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	4948      	ldr	r1, [pc, #288]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ea:	4b43      	ldr	r3, [pc, #268]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f8:	493f      	ldr	r1, [pc, #252]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d028      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800410c:	4b3a      	ldr	r3, [pc, #232]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411a:	4937      	ldr	r1, [pc, #220]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412a:	d106      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412c:	4b32      	ldr	r3, [pc, #200]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a31      	ldr	r2, [pc, #196]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004136:	60d3      	str	r3, [r2, #12]
 8004138:	e011      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004142:	d10c      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	2101      	movs	r1, #1
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f8c8 	bl	80042e0 <RCCEx_PLLSAI1_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d028      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800416a:	4b23      	ldr	r3, [pc, #140]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004170:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004178:	491f      	ldr	r1, [pc, #124]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004188:	d106      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800418a:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a1a      	ldr	r2, [pc, #104]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004194:	60d3      	str	r3, [r2, #12]
 8004196:	e011      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 f899 	bl	80042e0 <RCCEx_PLLSAI1_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d02b      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c8:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d6:	4908      	ldr	r1, [pc, #32]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041e6:	d109      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a02      	ldr	r2, [pc, #8]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f2:	60d3      	str	r3, [r2, #12]
 80041f4:	e014      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004204:	d10c      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3304      	adds	r3, #4
 800420a:	2101      	movs	r1, #1
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f867 	bl	80042e0 <RCCEx_PLLSAI1_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02f      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800422c:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004232:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800423a:	4928      	ldr	r1, [pc, #160]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800424a:	d10d      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f844 	bl	80042e0 <RCCEx_PLLSAI1_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d014      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	74bb      	strb	r3, [r7, #18]
 8004266:	e011      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800426c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004270:	d10c      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3320      	adds	r3, #32
 8004276:	2102      	movs	r1, #2
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f925 	bl	80044c8 <RCCEx_PLLSAI2_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004298:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042a6:	490d      	ldr	r1, [pc, #52]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ba:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ca:	4904      	ldr	r1, [pc, #16]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000

080042e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ee:	4b75      	ldr	r3, [pc, #468]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d018      	beq.n	800432c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042fa:	4b72      	ldr	r3, [pc, #456]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0203 	and.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d10d      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
       ||
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004312:	4b6c      	ldr	r3, [pc, #432]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
       ||
 8004322:	429a      	cmp	r2, r3
 8004324:	d047      	beq.n	80043b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
 800432a:	e044      	b.n	80043b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d018      	beq.n	8004366 <RCCEx_PLLSAI1_Config+0x86>
 8004334:	2b03      	cmp	r3, #3
 8004336:	d825      	bhi.n	8004384 <RCCEx_PLLSAI1_Config+0xa4>
 8004338:	2b01      	cmp	r3, #1
 800433a:	d002      	beq.n	8004342 <RCCEx_PLLSAI1_Config+0x62>
 800433c:	2b02      	cmp	r3, #2
 800433e:	d009      	beq.n	8004354 <RCCEx_PLLSAI1_Config+0x74>
 8004340:	e020      	b.n	8004384 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004342:	4b60      	ldr	r3, [pc, #384]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d11d      	bne.n	800438a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004352:	e01a      	b.n	800438a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004354:	4b5b      	ldr	r3, [pc, #364]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d116      	bne.n	800438e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004364:	e013      	b.n	800438e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004366:	4b57      	ldr	r3, [pc, #348]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004372:	4b54      	ldr	r3, [pc, #336]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004382:	e006      	b.n	8004392 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	e004      	b.n	8004394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800438a:	bf00      	nop
 800438c:	e002      	b.n	8004394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800438e:	bf00      	nop
 8004390:	e000      	b.n	8004394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004392:	bf00      	nop
    }

    if(status == HAL_OK)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10d      	bne.n	80043b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800439a:	4b4a      	ldr	r3, [pc, #296]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	430b      	orrs	r3, r1
 80043b0:	4944      	ldr	r1, [pc, #272]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d17d      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043bc:	4b41      	ldr	r3, [pc, #260]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a40      	ldr	r2, [pc, #256]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c8:	f7fd fe12 	bl	8001ff0 <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ce:	e009      	b.n	80043e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d0:	f7fd fe0e 	bl	8001ff0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	73fb      	strb	r3, [r7, #15]
        break;
 80043e2:	e005      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043e4:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ef      	bne.n	80043d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d160      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043fc:	4b31      	ldr	r3, [pc, #196]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6892      	ldr	r2, [r2, #8]
 800440c:	0211      	lsls	r1, r2, #8
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68d2      	ldr	r2, [r2, #12]
 8004412:	0912      	lsrs	r2, r2, #4
 8004414:	0452      	lsls	r2, r2, #17
 8004416:	430a      	orrs	r2, r1
 8004418:	492a      	ldr	r1, [pc, #168]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	610b      	str	r3, [r1, #16]
 800441e:	e027      	b.n	8004470 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d112      	bne.n	800444c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004426:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800442e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6892      	ldr	r2, [r2, #8]
 8004436:	0211      	lsls	r1, r2, #8
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6912      	ldr	r2, [r2, #16]
 800443c:	0852      	lsrs	r2, r2, #1
 800443e:	3a01      	subs	r2, #1
 8004440:	0552      	lsls	r2, r2, #21
 8004442:	430a      	orrs	r2, r1
 8004444:	491f      	ldr	r1, [pc, #124]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004446:	4313      	orrs	r3, r2
 8004448:	610b      	str	r3, [r1, #16]
 800444a:	e011      	b.n	8004470 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800444c:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004454:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6892      	ldr	r2, [r2, #8]
 800445c:	0211      	lsls	r1, r2, #8
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6952      	ldr	r2, [r2, #20]
 8004462:	0852      	lsrs	r2, r2, #1
 8004464:	3a01      	subs	r2, #1
 8004466:	0652      	lsls	r2, r2, #25
 8004468:	430a      	orrs	r2, r1
 800446a:	4916      	ldr	r1, [pc, #88]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446c:	4313      	orrs	r3, r2
 800446e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004470:	4b14      	ldr	r3, [pc, #80]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a13      	ldr	r2, [pc, #76]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004476:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800447a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd fdb8 	bl	8001ff0 <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004482:	e009      	b.n	8004498 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004484:	f7fd fdb4 	bl	8001ff0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d902      	bls.n	8004498 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	73fb      	strb	r3, [r7, #15]
          break;
 8004496:	e005      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004498:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ef      	beq.n	8004484 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	4904      	ldr	r1, [pc, #16]	@ (80044c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000

080044c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d018      	beq.n	8004514 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044e2:	4b67      	ldr	r3, [pc, #412]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0203 	and.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d10d      	bne.n	800450e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
       ||
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044fa:	4b61      	ldr	r3, [pc, #388]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
       ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d047      	beq.n	800459e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
 8004512:	e044      	b.n	800459e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d018      	beq.n	800454e <RCCEx_PLLSAI2_Config+0x86>
 800451c:	2b03      	cmp	r3, #3
 800451e:	d825      	bhi.n	800456c <RCCEx_PLLSAI2_Config+0xa4>
 8004520:	2b01      	cmp	r3, #1
 8004522:	d002      	beq.n	800452a <RCCEx_PLLSAI2_Config+0x62>
 8004524:	2b02      	cmp	r3, #2
 8004526:	d009      	beq.n	800453c <RCCEx_PLLSAI2_Config+0x74>
 8004528:	e020      	b.n	800456c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800452a:	4b55      	ldr	r3, [pc, #340]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11d      	bne.n	8004572 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453a:	e01a      	b.n	8004572 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800453c:	4b50      	ldr	r3, [pc, #320]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d116      	bne.n	8004576 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800454c:	e013      	b.n	8004576 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800454e:	4b4c      	ldr	r3, [pc, #304]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10f      	bne.n	800457a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800455a:	4b49      	ldr	r3, [pc, #292]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800456a:	e006      	b.n	800457a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      break;
 8004570:	e004      	b.n	800457c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004572:	bf00      	nop
 8004574:	e002      	b.n	800457c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800457a:	bf00      	nop
    }

    if(status == HAL_OK)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10d      	bne.n	800459e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004582:	4b3f      	ldr	r3, [pc, #252]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	3b01      	subs	r3, #1
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	430b      	orrs	r3, r1
 8004598:	4939      	ldr	r1, [pc, #228]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459a:	4313      	orrs	r3, r2
 800459c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d167      	bne.n	8004674 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045a4:	4b36      	ldr	r3, [pc, #216]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a35      	ldr	r2, [pc, #212]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b0:	f7fd fd1e 	bl	8001ff0 <HAL_GetTick>
 80045b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045b6:	e009      	b.n	80045cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045b8:	f7fd fd1a 	bl	8001ff0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d902      	bls.n	80045cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	73fb      	strb	r3, [r7, #15]
        break;
 80045ca:	e005      	b.n	80045d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ef      	bne.n	80045b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d14a      	bne.n	8004674 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d111      	bne.n	8004608 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e4:	4b26      	ldr	r3, [pc, #152]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6892      	ldr	r2, [r2, #8]
 80045f4:	0211      	lsls	r1, r2, #8
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68d2      	ldr	r2, [r2, #12]
 80045fa:	0912      	lsrs	r2, r2, #4
 80045fc:	0452      	lsls	r2, r2, #17
 80045fe:	430a      	orrs	r2, r1
 8004600:	491f      	ldr	r1, [pc, #124]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004602:	4313      	orrs	r3, r2
 8004604:	614b      	str	r3, [r1, #20]
 8004606:	e011      	b.n	800462c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004610:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6892      	ldr	r2, [r2, #8]
 8004618:	0211      	lsls	r1, r2, #8
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6912      	ldr	r2, [r2, #16]
 800461e:	0852      	lsrs	r2, r2, #1
 8004620:	3a01      	subs	r2, #1
 8004622:	0652      	lsls	r2, r2, #25
 8004624:	430a      	orrs	r2, r1
 8004626:	4916      	ldr	r1, [pc, #88]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800462c:	4b14      	ldr	r3, [pc, #80]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a13      	ldr	r2, [pc, #76]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd fcda 	bl	8001ff0 <HAL_GetTick>
 800463c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800463e:	e009      	b.n	8004654 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004640:	f7fd fcd6 	bl	8001ff0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d902      	bls.n	8004654 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	73fb      	strb	r3, [r7, #15]
          break;
 8004652:	e005      	b.n	8004660 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004654:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ef      	beq.n	8004640 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004666:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	4904      	ldr	r1, [pc, #16]	@ (8004680 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000

08004684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e040      	b.n	8004718 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd fb66 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	@ 0x24
 80046b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0201 	bic.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fc32 	bl	8004f34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f977 	bl	80049c4 <UART_SetConfig>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e01b      	b.n	8004718 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fcb1 	bl	8005078 <UART_CheckIdleState>
 8004716:	4603      	mov	r3, r0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004734:	2b20      	cmp	r3, #32
 8004736:	d177      	bne.n	8004828 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_UART_Transmit+0x24>
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e070      	b.n	800482a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2221      	movs	r2, #33	@ 0x21
 8004754:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004756:	f7fd fc4b 	bl	8001ff0 <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004774:	d108      	bne.n	8004788 <HAL_UART_Transmit+0x68>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	e003      	b.n	8004790 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004790:	e02f      	b.n	80047f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2200      	movs	r2, #0
 800479a:	2180      	movs	r1, #128	@ 0x80
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fd13 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e03b      	b.n	800482a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	881a      	ldrh	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c4:	b292      	uxth	r2, r2
 80047c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	3302      	adds	r3, #2
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e007      	b.n	80047e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3301      	adds	r3, #1
 80047de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1c9      	bne.n	8004792 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2200      	movs	r2, #0
 8004806:	2140      	movs	r1, #64	@ 0x40
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fcdd 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e005      	b.n	800482a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b08a      	sub	sp, #40	@ 0x28
 8004836:	af02      	add	r7, sp, #8
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004848:	2b20      	cmp	r3, #32
 800484a:	f040 80b6 	bne.w	80049ba <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_UART_Receive+0x28>
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e0ae      	b.n	80049bc <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2222      	movs	r2, #34	@ 0x22
 800486a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004874:	f7fd fbbc 	bl	8001ff0 <HAL_GetTick>
 8004878:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004892:	d10e      	bne.n	80048b2 <HAL_UART_Receive+0x80>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <HAL_UART_Receive+0x76>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80048a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048a6:	e02d      	b.n	8004904 <HAL_UART_Receive+0xd2>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	22ff      	movs	r2, #255	@ 0xff
 80048ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048b0:	e028      	b.n	8004904 <HAL_UART_Receive+0xd2>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10d      	bne.n	80048d6 <HAL_UART_Receive+0xa4>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <HAL_UART_Receive+0x9a>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	22ff      	movs	r2, #255	@ 0xff
 80048c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048ca:	e01b      	b.n	8004904 <HAL_UART_Receive+0xd2>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	227f      	movs	r2, #127	@ 0x7f
 80048d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048d4:	e016      	b.n	8004904 <HAL_UART_Receive+0xd2>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048de:	d10d      	bne.n	80048fc <HAL_UART_Receive+0xca>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_UART_Receive+0xc0>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	227f      	movs	r2, #127	@ 0x7f
 80048ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048f0:	e008      	b.n	8004904 <HAL_UART_Receive+0xd2>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	223f      	movs	r2, #63	@ 0x3f
 80048f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048fa:	e003      	b.n	8004904 <HAL_UART_Receive+0xd2>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800490a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004914:	d108      	bne.n	8004928 <HAL_UART_Receive+0xf6>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e003      	b.n	8004930 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004930:	e037      	b.n	80049a2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	2120      	movs	r1, #32
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fc43 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e033      	b.n	80049bc <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10c      	bne.n	8004974 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004960:	b29a      	uxth	r2, r3
 8004962:	8a7b      	ldrh	r3, [r7, #18]
 8004964:	4013      	ands	r3, r2
 8004966:	b29a      	uxth	r2, r3
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	3302      	adds	r3, #2
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e00d      	b.n	8004990 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800497a:	b29b      	uxth	r3, r3
 800497c:	b2da      	uxtb	r2, r3
 800497e:	8a7b      	ldrh	r3, [r7, #18]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	4013      	ands	r3, r2
 8004984:	b2da      	uxtb	r2, r3
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3301      	adds	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1c1      	bne.n	8004932 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e000      	b.n	80049bc <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80049ba:	2302      	movs	r3, #2
  }
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b08a      	sub	sp, #40	@ 0x28
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4ba4      	ldr	r3, [pc, #656]	@ (8004c84 <UART_SetConfig+0x2c0>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a99      	ldr	r2, [pc, #612]	@ (8004c88 <UART_SetConfig+0x2c4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a90      	ldr	r2, [pc, #576]	@ (8004c8c <UART_SetConfig+0x2c8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d126      	bne.n	8004a9c <UART_SetConfig+0xd8>
 8004a4e:	4b90      	ldr	r3, [pc, #576]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d81b      	bhi.n	8004a94 <UART_SetConfig+0xd0>
 8004a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <UART_SetConfig+0xa0>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a75 	.word	0x08004a75
 8004a68:	08004a85 	.word	0x08004a85
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e116      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e112      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8a:	e10e      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a92:	e10a      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9a:	e106      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a7c      	ldr	r2, [pc, #496]	@ (8004c94 <UART_SetConfig+0x2d0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d138      	bne.n	8004b18 <UART_SetConfig+0x154>
 8004aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d82d      	bhi.n	8004b10 <UART_SetConfig+0x14c>
 8004ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <UART_SetConfig+0xf8>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004b11 	.word	0x08004b11
 8004ac4:	08004b11 	.word	0x08004b11
 8004ac8:	08004b11 	.word	0x08004b11
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004b11 	.word	0x08004b11
 8004ad4:	08004b11 	.word	0x08004b11
 8004ad8:	08004b11 	.word	0x08004b11
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	08004b11 	.word	0x08004b11
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b09 	.word	0x08004b09
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af6:	e0d8      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afe:	e0d4      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b06:	e0d0      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0e:	e0cc      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b16:	e0c8      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d125      	bne.n	8004b6e <UART_SetConfig+0x1aa>
 8004b22:	4b5b      	ldr	r3, [pc, #364]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b2c:	2b30      	cmp	r3, #48	@ 0x30
 8004b2e:	d016      	beq.n	8004b5e <UART_SetConfig+0x19a>
 8004b30:	2b30      	cmp	r3, #48	@ 0x30
 8004b32:	d818      	bhi.n	8004b66 <UART_SetConfig+0x1a2>
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d00a      	beq.n	8004b4e <UART_SetConfig+0x18a>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d814      	bhi.n	8004b66 <UART_SetConfig+0x1a2>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <UART_SetConfig+0x182>
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d008      	beq.n	8004b56 <UART_SetConfig+0x192>
 8004b44:	e00f      	b.n	8004b66 <UART_SetConfig+0x1a2>
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4c:	e0ad      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b54:	e0a9      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b56:	2304      	movs	r3, #4
 8004b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5c:	e0a5      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b5e:	2308      	movs	r3, #8
 8004b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b64:	e0a1      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b66:	2310      	movs	r3, #16
 8004b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6c:	e09d      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a4a      	ldr	r2, [pc, #296]	@ (8004c9c <UART_SetConfig+0x2d8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d125      	bne.n	8004bc4 <UART_SetConfig+0x200>
 8004b78:	4b45      	ldr	r3, [pc, #276]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b84:	d016      	beq.n	8004bb4 <UART_SetConfig+0x1f0>
 8004b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b88:	d818      	bhi.n	8004bbc <UART_SetConfig+0x1f8>
 8004b8a:	2b80      	cmp	r3, #128	@ 0x80
 8004b8c:	d00a      	beq.n	8004ba4 <UART_SetConfig+0x1e0>
 8004b8e:	2b80      	cmp	r3, #128	@ 0x80
 8004b90:	d814      	bhi.n	8004bbc <UART_SetConfig+0x1f8>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <UART_SetConfig+0x1d8>
 8004b96:	2b40      	cmp	r3, #64	@ 0x40
 8004b98:	d008      	beq.n	8004bac <UART_SetConfig+0x1e8>
 8004b9a:	e00f      	b.n	8004bbc <UART_SetConfig+0x1f8>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba2:	e082      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004baa:	e07e      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb2:	e07a      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bba:	e076      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc2:	e072      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a35      	ldr	r2, [pc, #212]	@ (8004ca0 <UART_SetConfig+0x2dc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d12a      	bne.n	8004c24 <UART_SetConfig+0x260>
 8004bce:	4b30      	ldr	r3, [pc, #192]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bdc:	d01a      	beq.n	8004c14 <UART_SetConfig+0x250>
 8004bde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004be2:	d81b      	bhi.n	8004c1c <UART_SetConfig+0x258>
 8004be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be8:	d00c      	beq.n	8004c04 <UART_SetConfig+0x240>
 8004bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bee:	d815      	bhi.n	8004c1c <UART_SetConfig+0x258>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <UART_SetConfig+0x238>
 8004bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf8:	d008      	beq.n	8004c0c <UART_SetConfig+0x248>
 8004bfa:	e00f      	b.n	8004c1c <UART_SetConfig+0x258>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c02:	e052      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c04:	2302      	movs	r3, #2
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e04e      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e04a      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c14:	2308      	movs	r3, #8
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e046      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c22:	e042      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a17      	ldr	r2, [pc, #92]	@ (8004c88 <UART_SetConfig+0x2c4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d13a      	bne.n	8004ca4 <UART_SetConfig+0x2e0>
 8004c2e:	4b18      	ldr	r3, [pc, #96]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c3c:	d01a      	beq.n	8004c74 <UART_SetConfig+0x2b0>
 8004c3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c42:	d81b      	bhi.n	8004c7c <UART_SetConfig+0x2b8>
 8004c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c48:	d00c      	beq.n	8004c64 <UART_SetConfig+0x2a0>
 8004c4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4e:	d815      	bhi.n	8004c7c <UART_SetConfig+0x2b8>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <UART_SetConfig+0x298>
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c58:	d008      	beq.n	8004c6c <UART_SetConfig+0x2a8>
 8004c5a:	e00f      	b.n	8004c7c <UART_SetConfig+0x2b8>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c62:	e022      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c64:	2302      	movs	r3, #2
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	e01e      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c72:	e01a      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c74:	2308      	movs	r3, #8
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	e016      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e012      	b.n	8004caa <UART_SetConfig+0x2e6>
 8004c84:	efff69f3 	.word	0xefff69f3
 8004c88:	40008000 	.word	0x40008000
 8004c8c:	40013800 	.word	0x40013800
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40004400 	.word	0x40004400
 8004c98:	40004800 	.word	0x40004800
 8004c9c:	40004c00 	.word	0x40004c00
 8004ca0:	40005000 	.word	0x40005000
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a9f      	ldr	r2, [pc, #636]	@ (8004f2c <UART_SetConfig+0x568>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d17a      	bne.n	8004daa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d824      	bhi.n	8004d06 <UART_SetConfig+0x342>
 8004cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <UART_SetConfig+0x300>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004d07 	.word	0x08004d07
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004d07 	.word	0x08004d07
 8004cd4:	08004cf7 	.word	0x08004cf7
 8004cd8:	08004d07 	.word	0x08004d07
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d07 	.word	0x08004d07
 8004ce4:	08004cff 	.word	0x08004cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7fe ff84 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004cec:	61f8      	str	r0, [r7, #28]
        break;
 8004cee:	e010      	b.n	8004d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8004f30 <UART_SetConfig+0x56c>)
 8004cf2:	61fb      	str	r3, [r7, #28]
        break;
 8004cf4:	e00d      	b.n	8004d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf6:	f7fe fee5 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004cfa:	61f8      	str	r0, [r7, #28]
        break;
 8004cfc:	e009      	b.n	8004d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d02:	61fb      	str	r3, [r7, #28]
        break;
 8004d04:	e005      	b.n	8004d12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80fb 	beq.w	8004f10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d305      	bcc.n	8004d36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d903      	bls.n	8004d3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d3c:	e0e8      	b.n	8004f10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2200      	movs	r2, #0
 8004d42:	461c      	mov	r4, r3
 8004d44:	4615      	mov	r5, r2
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	022b      	lsls	r3, r5, #8
 8004d50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d54:	0222      	lsls	r2, r4, #8
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6849      	ldr	r1, [r1, #4]
 8004d5a:	0849      	lsrs	r1, r1, #1
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	4688      	mov	r8, r1
 8004d60:	4681      	mov	r9, r0
 8004d62:	eb12 0a08 	adds.w	sl, r2, r8
 8004d66:	eb43 0b09 	adc.w	fp, r3, r9
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d78:	4650      	mov	r0, sl
 8004d7a:	4659      	mov	r1, fp
 8004d7c:	f7fb ff64 	bl	8000c48 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d8e:	d308      	bcc.n	8004da2 <UART_SetConfig+0x3de>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d96:	d204      	bcs.n	8004da2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	60da      	str	r2, [r3, #12]
 8004da0:	e0b6      	b.n	8004f10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004da8:	e0b2      	b.n	8004f10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db2:	d15e      	bne.n	8004e72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004db4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d828      	bhi.n	8004e0e <UART_SetConfig+0x44a>
 8004dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <UART_SetConfig+0x400>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	08004e0f 	.word	0x08004e0f
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004e0f 	.word	0x08004e0f
 8004ddc:	08004e0f 	.word	0x08004e0f
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e07 	.word	0x08004e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de8:	f7fe ff04 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004dec:	61f8      	str	r0, [r7, #28]
        break;
 8004dee:	e014      	b.n	8004e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df0:	f7fe ff16 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8004df4:	61f8      	str	r0, [r7, #28]
        break;
 8004df6:	e010      	b.n	8004e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f30 <UART_SetConfig+0x56c>)
 8004dfa:	61fb      	str	r3, [r7, #28]
        break;
 8004dfc:	e00d      	b.n	8004e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfe:	f7fe fe61 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004e02:	61f8      	str	r0, [r7, #28]
        break;
 8004e04:	e009      	b.n	8004e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e0a:	61fb      	str	r3, [r7, #28]
        break;
 8004e0c:	e005      	b.n	8004e1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d077      	beq.n	8004f10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	005a      	lsls	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d916      	bls.n	8004e6a <UART_SetConfig+0x4a6>
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e42:	d212      	bcs.n	8004e6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f023 030f 	bic.w	r3, r3, #15
 8004e4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	8afb      	ldrh	r3, [r7, #22]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	8afa      	ldrh	r2, [r7, #22]
 8004e66:	60da      	str	r2, [r3, #12]
 8004e68:	e052      	b.n	8004f10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e70:	e04e      	b.n	8004f10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d827      	bhi.n	8004eca <UART_SetConfig+0x506>
 8004e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <UART_SetConfig+0x4bc>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ead 	.word	0x08004ead
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	08004ecb 	.word	0x08004ecb
 8004e90:	08004ebb 	.word	0x08004ebb
 8004e94:	08004ecb 	.word	0x08004ecb
 8004e98:	08004ecb 	.word	0x08004ecb
 8004e9c:	08004ecb 	.word	0x08004ecb
 8004ea0:	08004ec3 	.word	0x08004ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe fea6 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	61f8      	str	r0, [r7, #28]
        break;
 8004eaa:	e014      	b.n	8004ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eac:	f7fe feb8 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8004eb0:	61f8      	str	r0, [r7, #28]
        break;
 8004eb2:	e010      	b.n	8004ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <UART_SetConfig+0x56c>)
 8004eb6:	61fb      	str	r3, [r7, #28]
        break;
 8004eb8:	e00d      	b.n	8004ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eba:	f7fe fe03 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8004ebe:	61f8      	str	r0, [r7, #28]
        break;
 8004ec0:	e009      	b.n	8004ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec6:	61fb      	str	r3, [r7, #28]
        break;
 8004ec8:	e005      	b.n	8004ed6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d019      	beq.n	8004f10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	085a      	lsrs	r2, r3, #1
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d909      	bls.n	8004f0a <UART_SetConfig+0x546>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004efc:	d205      	bcs.n	8004f0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	e002      	b.n	8004f10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3728      	adds	r7, #40	@ 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40008000 	.word	0x40008000
 8004f30:	00f42400 	.word	0x00f42400

08004f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01a      	beq.n	800504a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005032:	d10a      	bne.n	800504a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b098      	sub	sp, #96	@ 0x60
 800507c:	af02      	add	r7, sp, #8
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005088:	f7fc ffb2 	bl	8001ff0 <HAL_GetTick>
 800508c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b08      	cmp	r3, #8
 800509a:	d12e      	bne.n	80050fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a4:	2200      	movs	r2, #0
 80050a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f88c 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d021      	beq.n	80050fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e062      	b.n	80051c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d149      	bne.n	800519c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005108:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005110:	2200      	movs	r2, #0
 8005112:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f856 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d03c      	beq.n	800519c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	623b      	str	r3, [r7, #32]
   return(result);
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005140:	633b      	str	r3, [r7, #48]	@ 0x30
 8005142:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60fb      	str	r3, [r7, #12]
   return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005174:	61fa      	str	r2, [r7, #28]
 8005176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	617b      	str	r3, [r7, #20]
   return(result);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e011      	b.n	80051c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3758      	adds	r7, #88	@ 0x58
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d8:	e04f      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d04b      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fc ff05 	bl	8001ff0 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e04e      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d037      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b80      	cmp	r3, #128	@ 0x80
 800520e:	d034      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d031      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b08      	cmp	r3, #8
 8005222:	d110      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2208      	movs	r2, #8
 800522a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f838 	bl	80052a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2208      	movs	r2, #8
 8005236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e029      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005254:	d111      	bne.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800525e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f81e 	bl	80052a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e00f      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4013      	ands	r3, r2
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	429a      	cmp	r2, r3
 8005296:	d0a0      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b095      	sub	sp, #84	@ 0x54
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005314:	2b01      	cmp	r3, #1
 8005316:	d118      	bne.n	800534a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800535e:	bf00      	nop
 8005360:	3754      	adds	r7, #84	@ 0x54
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <atoi>:
 800536a:	220a      	movs	r2, #10
 800536c:	2100      	movs	r1, #0
 800536e:	f000 b87b 	b.w	8005468 <strtol>
	...

08005374 <_strtol_l.isra.0>:
 8005374:	2b24      	cmp	r3, #36	@ 0x24
 8005376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800537a:	4686      	mov	lr, r0
 800537c:	4690      	mov	r8, r2
 800537e:	d801      	bhi.n	8005384 <_strtol_l.isra.0+0x10>
 8005380:	2b01      	cmp	r3, #1
 8005382:	d106      	bne.n	8005392 <_strtol_l.isra.0+0x1e>
 8005384:	f000 fe86 	bl	8006094 <__errno>
 8005388:	2316      	movs	r3, #22
 800538a:	6003      	str	r3, [r0, #0]
 800538c:	2000      	movs	r0, #0
 800538e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005392:	4834      	ldr	r0, [pc, #208]	@ (8005464 <_strtol_l.isra.0+0xf0>)
 8005394:	460d      	mov	r5, r1
 8005396:	462a      	mov	r2, r5
 8005398:	f815 4b01 	ldrb.w	r4, [r5], #1
 800539c:	5d06      	ldrb	r6, [r0, r4]
 800539e:	f016 0608 	ands.w	r6, r6, #8
 80053a2:	d1f8      	bne.n	8005396 <_strtol_l.isra.0+0x22>
 80053a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80053a6:	d110      	bne.n	80053ca <_strtol_l.isra.0+0x56>
 80053a8:	782c      	ldrb	r4, [r5, #0]
 80053aa:	2601      	movs	r6, #1
 80053ac:	1c95      	adds	r5, r2, #2
 80053ae:	f033 0210 	bics.w	r2, r3, #16
 80053b2:	d115      	bne.n	80053e0 <_strtol_l.isra.0+0x6c>
 80053b4:	2c30      	cmp	r4, #48	@ 0x30
 80053b6:	d10d      	bne.n	80053d4 <_strtol_l.isra.0+0x60>
 80053b8:	782a      	ldrb	r2, [r5, #0]
 80053ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80053be:	2a58      	cmp	r2, #88	@ 0x58
 80053c0:	d108      	bne.n	80053d4 <_strtol_l.isra.0+0x60>
 80053c2:	786c      	ldrb	r4, [r5, #1]
 80053c4:	3502      	adds	r5, #2
 80053c6:	2310      	movs	r3, #16
 80053c8:	e00a      	b.n	80053e0 <_strtol_l.isra.0+0x6c>
 80053ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80053cc:	bf04      	itt	eq
 80053ce:	782c      	ldrbeq	r4, [r5, #0]
 80053d0:	1c95      	addeq	r5, r2, #2
 80053d2:	e7ec      	b.n	80053ae <_strtol_l.isra.0+0x3a>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f6      	bne.n	80053c6 <_strtol_l.isra.0+0x52>
 80053d8:	2c30      	cmp	r4, #48	@ 0x30
 80053da:	bf14      	ite	ne
 80053dc:	230a      	movne	r3, #10
 80053de:	2308      	moveq	r3, #8
 80053e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80053e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053e8:	2200      	movs	r2, #0
 80053ea:	fbbc f9f3 	udiv	r9, ip, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80053f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80053f8:	2f09      	cmp	r7, #9
 80053fa:	d80f      	bhi.n	800541c <_strtol_l.isra.0+0xa8>
 80053fc:	463c      	mov	r4, r7
 80053fe:	42a3      	cmp	r3, r4
 8005400:	dd1b      	ble.n	800543a <_strtol_l.isra.0+0xc6>
 8005402:	1c57      	adds	r7, r2, #1
 8005404:	d007      	beq.n	8005416 <_strtol_l.isra.0+0xa2>
 8005406:	4581      	cmp	r9, r0
 8005408:	d314      	bcc.n	8005434 <_strtol_l.isra.0+0xc0>
 800540a:	d101      	bne.n	8005410 <_strtol_l.isra.0+0x9c>
 800540c:	45a2      	cmp	sl, r4
 800540e:	db11      	blt.n	8005434 <_strtol_l.isra.0+0xc0>
 8005410:	fb00 4003 	mla	r0, r0, r3, r4
 8005414:	2201      	movs	r2, #1
 8005416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800541a:	e7eb      	b.n	80053f4 <_strtol_l.isra.0+0x80>
 800541c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005420:	2f19      	cmp	r7, #25
 8005422:	d801      	bhi.n	8005428 <_strtol_l.isra.0+0xb4>
 8005424:	3c37      	subs	r4, #55	@ 0x37
 8005426:	e7ea      	b.n	80053fe <_strtol_l.isra.0+0x8a>
 8005428:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800542c:	2f19      	cmp	r7, #25
 800542e:	d804      	bhi.n	800543a <_strtol_l.isra.0+0xc6>
 8005430:	3c57      	subs	r4, #87	@ 0x57
 8005432:	e7e4      	b.n	80053fe <_strtol_l.isra.0+0x8a>
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	e7ed      	b.n	8005416 <_strtol_l.isra.0+0xa2>
 800543a:	1c53      	adds	r3, r2, #1
 800543c:	d108      	bne.n	8005450 <_strtol_l.isra.0+0xdc>
 800543e:	2322      	movs	r3, #34	@ 0x22
 8005440:	f8ce 3000 	str.w	r3, [lr]
 8005444:	4660      	mov	r0, ip
 8005446:	f1b8 0f00 	cmp.w	r8, #0
 800544a:	d0a0      	beq.n	800538e <_strtol_l.isra.0+0x1a>
 800544c:	1e69      	subs	r1, r5, #1
 800544e:	e006      	b.n	800545e <_strtol_l.isra.0+0xea>
 8005450:	b106      	cbz	r6, 8005454 <_strtol_l.isra.0+0xe0>
 8005452:	4240      	negs	r0, r0
 8005454:	f1b8 0f00 	cmp.w	r8, #0
 8005458:	d099      	beq.n	800538e <_strtol_l.isra.0+0x1a>
 800545a:	2a00      	cmp	r2, #0
 800545c:	d1f6      	bne.n	800544c <_strtol_l.isra.0+0xd8>
 800545e:	f8c8 1000 	str.w	r1, [r8]
 8005462:	e794      	b.n	800538e <_strtol_l.isra.0+0x1a>
 8005464:	080082fd 	.word	0x080082fd

08005468 <strtol>:
 8005468:	4613      	mov	r3, r2
 800546a:	460a      	mov	r2, r1
 800546c:	4601      	mov	r1, r0
 800546e:	4802      	ldr	r0, [pc, #8]	@ (8005478 <strtol+0x10>)
 8005470:	6800      	ldr	r0, [r0, #0]
 8005472:	f7ff bf7f 	b.w	8005374 <_strtol_l.isra.0>
 8005476:	bf00      	nop
 8005478:	20000018 	.word	0x20000018

0800547c <__cvt>:
 800547c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005480:	ec57 6b10 	vmov	r6, r7, d0
 8005484:	2f00      	cmp	r7, #0
 8005486:	460c      	mov	r4, r1
 8005488:	4619      	mov	r1, r3
 800548a:	463b      	mov	r3, r7
 800548c:	bfbb      	ittet	lt
 800548e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005492:	461f      	movlt	r7, r3
 8005494:	2300      	movge	r3, #0
 8005496:	232d      	movlt	r3, #45	@ 0x2d
 8005498:	700b      	strb	r3, [r1, #0]
 800549a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800549c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80054a0:	4691      	mov	r9, r2
 80054a2:	f023 0820 	bic.w	r8, r3, #32
 80054a6:	bfbc      	itt	lt
 80054a8:	4632      	movlt	r2, r6
 80054aa:	4616      	movlt	r6, r2
 80054ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054b0:	d005      	beq.n	80054be <__cvt+0x42>
 80054b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054b6:	d100      	bne.n	80054ba <__cvt+0x3e>
 80054b8:	3401      	adds	r4, #1
 80054ba:	2102      	movs	r1, #2
 80054bc:	e000      	b.n	80054c0 <__cvt+0x44>
 80054be:	2103      	movs	r1, #3
 80054c0:	ab03      	add	r3, sp, #12
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	ab02      	add	r3, sp, #8
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	ec47 6b10 	vmov	d0, r6, r7
 80054cc:	4653      	mov	r3, sl
 80054ce:	4622      	mov	r2, r4
 80054d0:	f000 fe96 	bl	8006200 <_dtoa_r>
 80054d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80054d8:	4605      	mov	r5, r0
 80054da:	d119      	bne.n	8005510 <__cvt+0x94>
 80054dc:	f019 0f01 	tst.w	r9, #1
 80054e0:	d00e      	beq.n	8005500 <__cvt+0x84>
 80054e2:	eb00 0904 	add.w	r9, r0, r4
 80054e6:	2200      	movs	r2, #0
 80054e8:	2300      	movs	r3, #0
 80054ea:	4630      	mov	r0, r6
 80054ec:	4639      	mov	r1, r7
 80054ee:	f7fb faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80054f2:	b108      	cbz	r0, 80054f8 <__cvt+0x7c>
 80054f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80054f8:	2230      	movs	r2, #48	@ 0x30
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	454b      	cmp	r3, r9
 80054fe:	d31e      	bcc.n	800553e <__cvt+0xc2>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005504:	1b5b      	subs	r3, r3, r5
 8005506:	4628      	mov	r0, r5
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	b004      	add	sp, #16
 800550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005510:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005514:	eb00 0904 	add.w	r9, r0, r4
 8005518:	d1e5      	bne.n	80054e6 <__cvt+0x6a>
 800551a:	7803      	ldrb	r3, [r0, #0]
 800551c:	2b30      	cmp	r3, #48	@ 0x30
 800551e:	d10a      	bne.n	8005536 <__cvt+0xba>
 8005520:	2200      	movs	r2, #0
 8005522:	2300      	movs	r3, #0
 8005524:	4630      	mov	r0, r6
 8005526:	4639      	mov	r1, r7
 8005528:	f7fb face 	bl	8000ac8 <__aeabi_dcmpeq>
 800552c:	b918      	cbnz	r0, 8005536 <__cvt+0xba>
 800552e:	f1c4 0401 	rsb	r4, r4, #1
 8005532:	f8ca 4000 	str.w	r4, [sl]
 8005536:	f8da 3000 	ldr.w	r3, [sl]
 800553a:	4499      	add	r9, r3
 800553c:	e7d3      	b.n	80054e6 <__cvt+0x6a>
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	9103      	str	r1, [sp, #12]
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	e7d9      	b.n	80054fa <__cvt+0x7e>

08005546 <__exponent>:
 8005546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005548:	2900      	cmp	r1, #0
 800554a:	bfba      	itte	lt
 800554c:	4249      	neglt	r1, r1
 800554e:	232d      	movlt	r3, #45	@ 0x2d
 8005550:	232b      	movge	r3, #43	@ 0x2b
 8005552:	2909      	cmp	r1, #9
 8005554:	7002      	strb	r2, [r0, #0]
 8005556:	7043      	strb	r3, [r0, #1]
 8005558:	dd29      	ble.n	80055ae <__exponent+0x68>
 800555a:	f10d 0307 	add.w	r3, sp, #7
 800555e:	461d      	mov	r5, r3
 8005560:	270a      	movs	r7, #10
 8005562:	461a      	mov	r2, r3
 8005564:	fbb1 f6f7 	udiv	r6, r1, r7
 8005568:	fb07 1416 	mls	r4, r7, r6, r1
 800556c:	3430      	adds	r4, #48	@ 0x30
 800556e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005572:	460c      	mov	r4, r1
 8005574:	2c63      	cmp	r4, #99	@ 0x63
 8005576:	f103 33ff 	add.w	r3, r3, #4294967295
 800557a:	4631      	mov	r1, r6
 800557c:	dcf1      	bgt.n	8005562 <__exponent+0x1c>
 800557e:	3130      	adds	r1, #48	@ 0x30
 8005580:	1e94      	subs	r4, r2, #2
 8005582:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005586:	1c41      	adds	r1, r0, #1
 8005588:	4623      	mov	r3, r4
 800558a:	42ab      	cmp	r3, r5
 800558c:	d30a      	bcc.n	80055a4 <__exponent+0x5e>
 800558e:	f10d 0309 	add.w	r3, sp, #9
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	42ac      	cmp	r4, r5
 8005596:	bf88      	it	hi
 8005598:	2300      	movhi	r3, #0
 800559a:	3302      	adds	r3, #2
 800559c:	4403      	add	r3, r0
 800559e:	1a18      	subs	r0, r3, r0
 80055a0:	b003      	add	sp, #12
 80055a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055ac:	e7ed      	b.n	800558a <__exponent+0x44>
 80055ae:	2330      	movs	r3, #48	@ 0x30
 80055b0:	3130      	adds	r1, #48	@ 0x30
 80055b2:	7083      	strb	r3, [r0, #2]
 80055b4:	70c1      	strb	r1, [r0, #3]
 80055b6:	1d03      	adds	r3, r0, #4
 80055b8:	e7f1      	b.n	800559e <__exponent+0x58>
	...

080055bc <_printf_float>:
 80055bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	b08d      	sub	sp, #52	@ 0x34
 80055c2:	460c      	mov	r4, r1
 80055c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80055c8:	4616      	mov	r6, r2
 80055ca:	461f      	mov	r7, r3
 80055cc:	4605      	mov	r5, r0
 80055ce:	f000 fd17 	bl	8006000 <_localeconv_r>
 80055d2:	6803      	ldr	r3, [r0, #0]
 80055d4:	9304      	str	r3, [sp, #16]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fa fe4a 	bl	8000270 <strlen>
 80055dc:	2300      	movs	r3, #0
 80055de:	930a      	str	r3, [sp, #40]	@ 0x28
 80055e0:	f8d8 3000 	ldr.w	r3, [r8]
 80055e4:	9005      	str	r0, [sp, #20]
 80055e6:	3307      	adds	r3, #7
 80055e8:	f023 0307 	bic.w	r3, r3, #7
 80055ec:	f103 0208 	add.w	r2, r3, #8
 80055f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80055f4:	f8d4 b000 	ldr.w	fp, [r4]
 80055f8:	f8c8 2000 	str.w	r2, [r8]
 80055fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005600:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005604:	9307      	str	r3, [sp, #28]
 8005606:	f8cd 8018 	str.w	r8, [sp, #24]
 800560a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800560e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005612:	4b9c      	ldr	r3, [pc, #624]	@ (8005884 <_printf_float+0x2c8>)
 8005614:	f04f 32ff 	mov.w	r2, #4294967295
 8005618:	f7fb fa88 	bl	8000b2c <__aeabi_dcmpun>
 800561c:	bb70      	cbnz	r0, 800567c <_printf_float+0xc0>
 800561e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005622:	4b98      	ldr	r3, [pc, #608]	@ (8005884 <_printf_float+0x2c8>)
 8005624:	f04f 32ff 	mov.w	r2, #4294967295
 8005628:	f7fb fa62 	bl	8000af0 <__aeabi_dcmple>
 800562c:	bb30      	cbnz	r0, 800567c <_printf_float+0xc0>
 800562e:	2200      	movs	r2, #0
 8005630:	2300      	movs	r3, #0
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f7fb fa51 	bl	8000adc <__aeabi_dcmplt>
 800563a:	b110      	cbz	r0, 8005642 <_printf_float+0x86>
 800563c:	232d      	movs	r3, #45	@ 0x2d
 800563e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005642:	4a91      	ldr	r2, [pc, #580]	@ (8005888 <_printf_float+0x2cc>)
 8005644:	4b91      	ldr	r3, [pc, #580]	@ (800588c <_printf_float+0x2d0>)
 8005646:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800564a:	bf8c      	ite	hi
 800564c:	4690      	movhi	r8, r2
 800564e:	4698      	movls	r8, r3
 8005650:	2303      	movs	r3, #3
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	f02b 0304 	bic.w	r3, fp, #4
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	f04f 0900 	mov.w	r9, #0
 800565e:	9700      	str	r7, [sp, #0]
 8005660:	4633      	mov	r3, r6
 8005662:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f9d2 	bl	8005a10 <_printf_common>
 800566c:	3001      	adds	r0, #1
 800566e:	f040 808d 	bne.w	800578c <_printf_float+0x1d0>
 8005672:	f04f 30ff 	mov.w	r0, #4294967295
 8005676:	b00d      	add	sp, #52	@ 0x34
 8005678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	4640      	mov	r0, r8
 8005682:	4649      	mov	r1, r9
 8005684:	f7fb fa52 	bl	8000b2c <__aeabi_dcmpun>
 8005688:	b140      	cbz	r0, 800569c <_printf_float+0xe0>
 800568a:	464b      	mov	r3, r9
 800568c:	2b00      	cmp	r3, #0
 800568e:	bfbc      	itt	lt
 8005690:	232d      	movlt	r3, #45	@ 0x2d
 8005692:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005696:	4a7e      	ldr	r2, [pc, #504]	@ (8005890 <_printf_float+0x2d4>)
 8005698:	4b7e      	ldr	r3, [pc, #504]	@ (8005894 <_printf_float+0x2d8>)
 800569a:	e7d4      	b.n	8005646 <_printf_float+0x8a>
 800569c:	6863      	ldr	r3, [r4, #4]
 800569e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80056a2:	9206      	str	r2, [sp, #24]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	d13b      	bne.n	8005720 <_printf_float+0x164>
 80056a8:	2306      	movs	r3, #6
 80056aa:	6063      	str	r3, [r4, #4]
 80056ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80056b0:	2300      	movs	r3, #0
 80056b2:	6022      	str	r2, [r4, #0]
 80056b4:	9303      	str	r3, [sp, #12]
 80056b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80056b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80056bc:	ab09      	add	r3, sp, #36	@ 0x24
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	6861      	ldr	r1, [r4, #4]
 80056c2:	ec49 8b10 	vmov	d0, r8, r9
 80056c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80056ca:	4628      	mov	r0, r5
 80056cc:	f7ff fed6 	bl	800547c <__cvt>
 80056d0:	9b06      	ldr	r3, [sp, #24]
 80056d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056d4:	2b47      	cmp	r3, #71	@ 0x47
 80056d6:	4680      	mov	r8, r0
 80056d8:	d129      	bne.n	800572e <_printf_float+0x172>
 80056da:	1cc8      	adds	r0, r1, #3
 80056dc:	db02      	blt.n	80056e4 <_printf_float+0x128>
 80056de:	6863      	ldr	r3, [r4, #4]
 80056e0:	4299      	cmp	r1, r3
 80056e2:	dd41      	ble.n	8005768 <_printf_float+0x1ac>
 80056e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80056e8:	fa5f fa8a 	uxtb.w	sl, sl
 80056ec:	3901      	subs	r1, #1
 80056ee:	4652      	mov	r2, sl
 80056f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80056f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80056f6:	f7ff ff26 	bl	8005546 <__exponent>
 80056fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056fc:	1813      	adds	r3, r2, r0
 80056fe:	2a01      	cmp	r2, #1
 8005700:	4681      	mov	r9, r0
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	dc02      	bgt.n	800570c <_printf_float+0x150>
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	07d2      	lsls	r2, r2, #31
 800570a:	d501      	bpl.n	8005710 <_printf_float+0x154>
 800570c:	3301      	adds	r3, #1
 800570e:	6123      	str	r3, [r4, #16]
 8005710:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0a2      	beq.n	800565e <_printf_float+0xa2>
 8005718:	232d      	movs	r3, #45	@ 0x2d
 800571a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800571e:	e79e      	b.n	800565e <_printf_float+0xa2>
 8005720:	9a06      	ldr	r2, [sp, #24]
 8005722:	2a47      	cmp	r2, #71	@ 0x47
 8005724:	d1c2      	bne.n	80056ac <_printf_float+0xf0>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1c0      	bne.n	80056ac <_printf_float+0xf0>
 800572a:	2301      	movs	r3, #1
 800572c:	e7bd      	b.n	80056aa <_printf_float+0xee>
 800572e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005732:	d9db      	bls.n	80056ec <_printf_float+0x130>
 8005734:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005738:	d118      	bne.n	800576c <_printf_float+0x1b0>
 800573a:	2900      	cmp	r1, #0
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	dd0b      	ble.n	8005758 <_printf_float+0x19c>
 8005740:	6121      	str	r1, [r4, #16]
 8005742:	b913      	cbnz	r3, 800574a <_printf_float+0x18e>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	07d0      	lsls	r0, r2, #31
 8005748:	d502      	bpl.n	8005750 <_printf_float+0x194>
 800574a:	3301      	adds	r3, #1
 800574c:	440b      	add	r3, r1
 800574e:	6123      	str	r3, [r4, #16]
 8005750:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005752:	f04f 0900 	mov.w	r9, #0
 8005756:	e7db      	b.n	8005710 <_printf_float+0x154>
 8005758:	b913      	cbnz	r3, 8005760 <_printf_float+0x1a4>
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	07d2      	lsls	r2, r2, #31
 800575e:	d501      	bpl.n	8005764 <_printf_float+0x1a8>
 8005760:	3302      	adds	r3, #2
 8005762:	e7f4      	b.n	800574e <_printf_float+0x192>
 8005764:	2301      	movs	r3, #1
 8005766:	e7f2      	b.n	800574e <_printf_float+0x192>
 8005768:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800576c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800576e:	4299      	cmp	r1, r3
 8005770:	db05      	blt.n	800577e <_printf_float+0x1c2>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	6121      	str	r1, [r4, #16]
 8005776:	07d8      	lsls	r0, r3, #31
 8005778:	d5ea      	bpl.n	8005750 <_printf_float+0x194>
 800577a:	1c4b      	adds	r3, r1, #1
 800577c:	e7e7      	b.n	800574e <_printf_float+0x192>
 800577e:	2900      	cmp	r1, #0
 8005780:	bfd4      	ite	le
 8005782:	f1c1 0202 	rsble	r2, r1, #2
 8005786:	2201      	movgt	r2, #1
 8005788:	4413      	add	r3, r2
 800578a:	e7e0      	b.n	800574e <_printf_float+0x192>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	055a      	lsls	r2, r3, #21
 8005790:	d407      	bmi.n	80057a2 <_printf_float+0x1e6>
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	4642      	mov	r2, r8
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	d12b      	bne.n	80057f8 <_printf_float+0x23c>
 80057a0:	e767      	b.n	8005672 <_printf_float+0xb6>
 80057a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057a6:	f240 80dd 	bls.w	8005964 <_printf_float+0x3a8>
 80057aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057ae:	2200      	movs	r2, #0
 80057b0:	2300      	movs	r3, #0
 80057b2:	f7fb f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d033      	beq.n	8005822 <_printf_float+0x266>
 80057ba:	4a37      	ldr	r2, [pc, #220]	@ (8005898 <_printf_float+0x2dc>)
 80057bc:	2301      	movs	r3, #1
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	f43f af54 	beq.w	8005672 <_printf_float+0xb6>
 80057ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80057ce:	4543      	cmp	r3, r8
 80057d0:	db02      	blt.n	80057d8 <_printf_float+0x21c>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	07d8      	lsls	r0, r3, #31
 80057d6:	d50f      	bpl.n	80057f8 <_printf_float+0x23c>
 80057d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	47b8      	blx	r7
 80057e2:	3001      	adds	r0, #1
 80057e4:	f43f af45 	beq.w	8005672 <_printf_float+0xb6>
 80057e8:	f04f 0900 	mov.w	r9, #0
 80057ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80057f0:	f104 0a1a 	add.w	sl, r4, #26
 80057f4:	45c8      	cmp	r8, r9
 80057f6:	dc09      	bgt.n	800580c <_printf_float+0x250>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	079b      	lsls	r3, r3, #30
 80057fc:	f100 8103 	bmi.w	8005a06 <_printf_float+0x44a>
 8005800:	68e0      	ldr	r0, [r4, #12]
 8005802:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005804:	4298      	cmp	r0, r3
 8005806:	bfb8      	it	lt
 8005808:	4618      	movlt	r0, r3
 800580a:	e734      	b.n	8005676 <_printf_float+0xba>
 800580c:	2301      	movs	r3, #1
 800580e:	4652      	mov	r2, sl
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	47b8      	blx	r7
 8005816:	3001      	adds	r0, #1
 8005818:	f43f af2b 	beq.w	8005672 <_printf_float+0xb6>
 800581c:	f109 0901 	add.w	r9, r9, #1
 8005820:	e7e8      	b.n	80057f4 <_printf_float+0x238>
 8005822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	dc39      	bgt.n	800589c <_printf_float+0x2e0>
 8005828:	4a1b      	ldr	r2, [pc, #108]	@ (8005898 <_printf_float+0x2dc>)
 800582a:	2301      	movs	r3, #1
 800582c:	4631      	mov	r1, r6
 800582e:	4628      	mov	r0, r5
 8005830:	47b8      	blx	r7
 8005832:	3001      	adds	r0, #1
 8005834:	f43f af1d 	beq.w	8005672 <_printf_float+0xb6>
 8005838:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800583c:	ea59 0303 	orrs.w	r3, r9, r3
 8005840:	d102      	bne.n	8005848 <_printf_float+0x28c>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	07d9      	lsls	r1, r3, #31
 8005846:	d5d7      	bpl.n	80057f8 <_printf_float+0x23c>
 8005848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	f43f af0d 	beq.w	8005672 <_printf_float+0xb6>
 8005858:	f04f 0a00 	mov.w	sl, #0
 800585c:	f104 0b1a 	add.w	fp, r4, #26
 8005860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005862:	425b      	negs	r3, r3
 8005864:	4553      	cmp	r3, sl
 8005866:	dc01      	bgt.n	800586c <_printf_float+0x2b0>
 8005868:	464b      	mov	r3, r9
 800586a:	e793      	b.n	8005794 <_printf_float+0x1d8>
 800586c:	2301      	movs	r3, #1
 800586e:	465a      	mov	r2, fp
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f aefb 	beq.w	8005672 <_printf_float+0xb6>
 800587c:	f10a 0a01 	add.w	sl, sl, #1
 8005880:	e7ee      	b.n	8005860 <_printf_float+0x2a4>
 8005882:	bf00      	nop
 8005884:	7fefffff 	.word	0x7fefffff
 8005888:	08008401 	.word	0x08008401
 800588c:	080083fd 	.word	0x080083fd
 8005890:	08008409 	.word	0x08008409
 8005894:	08008405 	.word	0x08008405
 8005898:	0800840d 	.word	0x0800840d
 800589c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800589e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058a2:	4553      	cmp	r3, sl
 80058a4:	bfa8      	it	ge
 80058a6:	4653      	movge	r3, sl
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	4699      	mov	r9, r3
 80058ac:	dc36      	bgt.n	800591c <_printf_float+0x360>
 80058ae:	f04f 0b00 	mov.w	fp, #0
 80058b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058b6:	f104 021a 	add.w	r2, r4, #26
 80058ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058bc:	9306      	str	r3, [sp, #24]
 80058be:	eba3 0309 	sub.w	r3, r3, r9
 80058c2:	455b      	cmp	r3, fp
 80058c4:	dc31      	bgt.n	800592a <_printf_float+0x36e>
 80058c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c8:	459a      	cmp	sl, r3
 80058ca:	dc3a      	bgt.n	8005942 <_printf_float+0x386>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	07da      	lsls	r2, r3, #31
 80058d0:	d437      	bmi.n	8005942 <_printf_float+0x386>
 80058d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d4:	ebaa 0903 	sub.w	r9, sl, r3
 80058d8:	9b06      	ldr	r3, [sp, #24]
 80058da:	ebaa 0303 	sub.w	r3, sl, r3
 80058de:	4599      	cmp	r9, r3
 80058e0:	bfa8      	it	ge
 80058e2:	4699      	movge	r9, r3
 80058e4:	f1b9 0f00 	cmp.w	r9, #0
 80058e8:	dc33      	bgt.n	8005952 <_printf_float+0x396>
 80058ea:	f04f 0800 	mov.w	r8, #0
 80058ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058f2:	f104 0b1a 	add.w	fp, r4, #26
 80058f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f8:	ebaa 0303 	sub.w	r3, sl, r3
 80058fc:	eba3 0309 	sub.w	r3, r3, r9
 8005900:	4543      	cmp	r3, r8
 8005902:	f77f af79 	ble.w	80057f8 <_printf_float+0x23c>
 8005906:	2301      	movs	r3, #1
 8005908:	465a      	mov	r2, fp
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f aeae 	beq.w	8005672 <_printf_float+0xb6>
 8005916:	f108 0801 	add.w	r8, r8, #1
 800591a:	e7ec      	b.n	80058f6 <_printf_float+0x33a>
 800591c:	4642      	mov	r2, r8
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	d1c2      	bne.n	80058ae <_printf_float+0x2f2>
 8005928:	e6a3      	b.n	8005672 <_printf_float+0xb6>
 800592a:	2301      	movs	r3, #1
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	9206      	str	r2, [sp, #24]
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f ae9c 	beq.w	8005672 <_printf_float+0xb6>
 800593a:	9a06      	ldr	r2, [sp, #24]
 800593c:	f10b 0b01 	add.w	fp, fp, #1
 8005940:	e7bb      	b.n	80058ba <_printf_float+0x2fe>
 8005942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	d1c0      	bne.n	80058d2 <_printf_float+0x316>
 8005950:	e68f      	b.n	8005672 <_printf_float+0xb6>
 8005952:	9a06      	ldr	r2, [sp, #24]
 8005954:	464b      	mov	r3, r9
 8005956:	4442      	add	r2, r8
 8005958:	4631      	mov	r1, r6
 800595a:	4628      	mov	r0, r5
 800595c:	47b8      	blx	r7
 800595e:	3001      	adds	r0, #1
 8005960:	d1c3      	bne.n	80058ea <_printf_float+0x32e>
 8005962:	e686      	b.n	8005672 <_printf_float+0xb6>
 8005964:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005968:	f1ba 0f01 	cmp.w	sl, #1
 800596c:	dc01      	bgt.n	8005972 <_printf_float+0x3b6>
 800596e:	07db      	lsls	r3, r3, #31
 8005970:	d536      	bpl.n	80059e0 <_printf_float+0x424>
 8005972:	2301      	movs	r3, #1
 8005974:	4642      	mov	r2, r8
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	f43f ae78 	beq.w	8005672 <_printf_float+0xb6>
 8005982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	f43f ae70 	beq.w	8005672 <_printf_float+0xb6>
 8005992:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005996:	2200      	movs	r2, #0
 8005998:	2300      	movs	r3, #0
 800599a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800599e:	f7fb f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80059a2:	b9c0      	cbnz	r0, 80059d6 <_printf_float+0x41a>
 80059a4:	4653      	mov	r3, sl
 80059a6:	f108 0201 	add.w	r2, r8, #1
 80059aa:	4631      	mov	r1, r6
 80059ac:	4628      	mov	r0, r5
 80059ae:	47b8      	blx	r7
 80059b0:	3001      	adds	r0, #1
 80059b2:	d10c      	bne.n	80059ce <_printf_float+0x412>
 80059b4:	e65d      	b.n	8005672 <_printf_float+0xb6>
 80059b6:	2301      	movs	r3, #1
 80059b8:	465a      	mov	r2, fp
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f ae56 	beq.w	8005672 <_printf_float+0xb6>
 80059c6:	f108 0801 	add.w	r8, r8, #1
 80059ca:	45d0      	cmp	r8, sl
 80059cc:	dbf3      	blt.n	80059b6 <_printf_float+0x3fa>
 80059ce:	464b      	mov	r3, r9
 80059d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059d4:	e6df      	b.n	8005796 <_printf_float+0x1da>
 80059d6:	f04f 0800 	mov.w	r8, #0
 80059da:	f104 0b1a 	add.w	fp, r4, #26
 80059de:	e7f4      	b.n	80059ca <_printf_float+0x40e>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4642      	mov	r2, r8
 80059e4:	e7e1      	b.n	80059aa <_printf_float+0x3ee>
 80059e6:	2301      	movs	r3, #1
 80059e8:	464a      	mov	r2, r9
 80059ea:	4631      	mov	r1, r6
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b8      	blx	r7
 80059f0:	3001      	adds	r0, #1
 80059f2:	f43f ae3e 	beq.w	8005672 <_printf_float+0xb6>
 80059f6:	f108 0801 	add.w	r8, r8, #1
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80059fe:	1a5b      	subs	r3, r3, r1
 8005a00:	4543      	cmp	r3, r8
 8005a02:	dcf0      	bgt.n	80059e6 <_printf_float+0x42a>
 8005a04:	e6fc      	b.n	8005800 <_printf_float+0x244>
 8005a06:	f04f 0800 	mov.w	r8, #0
 8005a0a:	f104 0919 	add.w	r9, r4, #25
 8005a0e:	e7f4      	b.n	80059fa <_printf_float+0x43e>

08005a10 <_printf_common>:
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	4616      	mov	r6, r2
 8005a16:	4698      	mov	r8, r3
 8005a18:	688a      	ldr	r2, [r1, #8]
 8005a1a:	690b      	ldr	r3, [r1, #16]
 8005a1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a20:	4293      	cmp	r3, r2
 8005a22:	bfb8      	it	lt
 8005a24:	4613      	movlt	r3, r2
 8005a26:	6033      	str	r3, [r6, #0]
 8005a28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	b10a      	cbz	r2, 8005a36 <_printf_common+0x26>
 8005a32:	3301      	adds	r3, #1
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	0699      	lsls	r1, r3, #26
 8005a3a:	bf42      	ittt	mi
 8005a3c:	6833      	ldrmi	r3, [r6, #0]
 8005a3e:	3302      	addmi	r3, #2
 8005a40:	6033      	strmi	r3, [r6, #0]
 8005a42:	6825      	ldr	r5, [r4, #0]
 8005a44:	f015 0506 	ands.w	r5, r5, #6
 8005a48:	d106      	bne.n	8005a58 <_printf_common+0x48>
 8005a4a:	f104 0a19 	add.w	sl, r4, #25
 8005a4e:	68e3      	ldr	r3, [r4, #12]
 8005a50:	6832      	ldr	r2, [r6, #0]
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	42ab      	cmp	r3, r5
 8005a56:	dc26      	bgt.n	8005aa6 <_printf_common+0x96>
 8005a58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a5c:	6822      	ldr	r2, [r4, #0]
 8005a5e:	3b00      	subs	r3, #0
 8005a60:	bf18      	it	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	0692      	lsls	r2, r2, #26
 8005a66:	d42b      	bmi.n	8005ac0 <_printf_common+0xb0>
 8005a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	4638      	mov	r0, r7
 8005a70:	47c8      	blx	r9
 8005a72:	3001      	adds	r0, #1
 8005a74:	d01e      	beq.n	8005ab4 <_printf_common+0xa4>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	6922      	ldr	r2, [r4, #16]
 8005a7a:	f003 0306 	and.w	r3, r3, #6
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	bf02      	ittt	eq
 8005a82:	68e5      	ldreq	r5, [r4, #12]
 8005a84:	6833      	ldreq	r3, [r6, #0]
 8005a86:	1aed      	subeq	r5, r5, r3
 8005a88:	68a3      	ldr	r3, [r4, #8]
 8005a8a:	bf0c      	ite	eq
 8005a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a90:	2500      	movne	r5, #0
 8005a92:	4293      	cmp	r3, r2
 8005a94:	bfc4      	itt	gt
 8005a96:	1a9b      	subgt	r3, r3, r2
 8005a98:	18ed      	addgt	r5, r5, r3
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	341a      	adds	r4, #26
 8005a9e:	42b5      	cmp	r5, r6
 8005aa0:	d11a      	bne.n	8005ad8 <_printf_common+0xc8>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e008      	b.n	8005ab8 <_printf_common+0xa8>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	4641      	mov	r1, r8
 8005aac:	4638      	mov	r0, r7
 8005aae:	47c8      	blx	r9
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d103      	bne.n	8005abc <_printf_common+0xac>
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abc:	3501      	adds	r5, #1
 8005abe:	e7c6      	b.n	8005a4e <_printf_common+0x3e>
 8005ac0:	18e1      	adds	r1, r4, r3
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	2030      	movs	r0, #48	@ 0x30
 8005ac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005aca:	4422      	add	r2, r4
 8005acc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	e7c7      	b.n	8005a68 <_printf_common+0x58>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	4622      	mov	r2, r4
 8005adc:	4641      	mov	r1, r8
 8005ade:	4638      	mov	r0, r7
 8005ae0:	47c8      	blx	r9
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d0e6      	beq.n	8005ab4 <_printf_common+0xa4>
 8005ae6:	3601      	adds	r6, #1
 8005ae8:	e7d9      	b.n	8005a9e <_printf_common+0x8e>
	...

08005aec <_printf_i>:
 8005aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	7e0f      	ldrb	r7, [r1, #24]
 8005af2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005af4:	2f78      	cmp	r7, #120	@ 0x78
 8005af6:	4691      	mov	r9, r2
 8005af8:	4680      	mov	r8, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	469a      	mov	sl, r3
 8005afe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b02:	d807      	bhi.n	8005b14 <_printf_i+0x28>
 8005b04:	2f62      	cmp	r7, #98	@ 0x62
 8005b06:	d80a      	bhi.n	8005b1e <_printf_i+0x32>
 8005b08:	2f00      	cmp	r7, #0
 8005b0a:	f000 80d1 	beq.w	8005cb0 <_printf_i+0x1c4>
 8005b0e:	2f58      	cmp	r7, #88	@ 0x58
 8005b10:	f000 80b8 	beq.w	8005c84 <_printf_i+0x198>
 8005b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b1c:	e03a      	b.n	8005b94 <_printf_i+0xa8>
 8005b1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b22:	2b15      	cmp	r3, #21
 8005b24:	d8f6      	bhi.n	8005b14 <_printf_i+0x28>
 8005b26:	a101      	add	r1, pc, #4	@ (adr r1, 8005b2c <_printf_i+0x40>)
 8005b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b2c:	08005b85 	.word	0x08005b85
 8005b30:	08005b99 	.word	0x08005b99
 8005b34:	08005b15 	.word	0x08005b15
 8005b38:	08005b15 	.word	0x08005b15
 8005b3c:	08005b15 	.word	0x08005b15
 8005b40:	08005b15 	.word	0x08005b15
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005b15 	.word	0x08005b15
 8005b4c:	08005b15 	.word	0x08005b15
 8005b50:	08005b15 	.word	0x08005b15
 8005b54:	08005b15 	.word	0x08005b15
 8005b58:	08005c97 	.word	0x08005c97
 8005b5c:	08005bc3 	.word	0x08005bc3
 8005b60:	08005c51 	.word	0x08005c51
 8005b64:	08005b15 	.word	0x08005b15
 8005b68:	08005b15 	.word	0x08005b15
 8005b6c:	08005cb9 	.word	0x08005cb9
 8005b70:	08005b15 	.word	0x08005b15
 8005b74:	08005bc3 	.word	0x08005bc3
 8005b78:	08005b15 	.word	0x08005b15
 8005b7c:	08005b15 	.word	0x08005b15
 8005b80:	08005c59 	.word	0x08005c59
 8005b84:	6833      	ldr	r3, [r6, #0]
 8005b86:	1d1a      	adds	r2, r3, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6032      	str	r2, [r6, #0]
 8005b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b94:	2301      	movs	r3, #1
 8005b96:	e09c      	b.n	8005cd2 <_printf_i+0x1e6>
 8005b98:	6833      	ldr	r3, [r6, #0]
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	1d19      	adds	r1, r3, #4
 8005b9e:	6031      	str	r1, [r6, #0]
 8005ba0:	0606      	lsls	r6, r0, #24
 8005ba2:	d501      	bpl.n	8005ba8 <_printf_i+0xbc>
 8005ba4:	681d      	ldr	r5, [r3, #0]
 8005ba6:	e003      	b.n	8005bb0 <_printf_i+0xc4>
 8005ba8:	0645      	lsls	r5, r0, #25
 8005baa:	d5fb      	bpl.n	8005ba4 <_printf_i+0xb8>
 8005bac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	da03      	bge.n	8005bbc <_printf_i+0xd0>
 8005bb4:	232d      	movs	r3, #45	@ 0x2d
 8005bb6:	426d      	negs	r5, r5
 8005bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bbc:	4858      	ldr	r0, [pc, #352]	@ (8005d20 <_printf_i+0x234>)
 8005bbe:	230a      	movs	r3, #10
 8005bc0:	e011      	b.n	8005be6 <_printf_i+0xfa>
 8005bc2:	6821      	ldr	r1, [r4, #0]
 8005bc4:	6833      	ldr	r3, [r6, #0]
 8005bc6:	0608      	lsls	r0, r1, #24
 8005bc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bcc:	d402      	bmi.n	8005bd4 <_printf_i+0xe8>
 8005bce:	0649      	lsls	r1, r1, #25
 8005bd0:	bf48      	it	mi
 8005bd2:	b2ad      	uxthmi	r5, r5
 8005bd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bd6:	4852      	ldr	r0, [pc, #328]	@ (8005d20 <_printf_i+0x234>)
 8005bd8:	6033      	str	r3, [r6, #0]
 8005bda:	bf14      	ite	ne
 8005bdc:	230a      	movne	r3, #10
 8005bde:	2308      	moveq	r3, #8
 8005be0:	2100      	movs	r1, #0
 8005be2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005be6:	6866      	ldr	r6, [r4, #4]
 8005be8:	60a6      	str	r6, [r4, #8]
 8005bea:	2e00      	cmp	r6, #0
 8005bec:	db05      	blt.n	8005bfa <_printf_i+0x10e>
 8005bee:	6821      	ldr	r1, [r4, #0]
 8005bf0:	432e      	orrs	r6, r5
 8005bf2:	f021 0104 	bic.w	r1, r1, #4
 8005bf6:	6021      	str	r1, [r4, #0]
 8005bf8:	d04b      	beq.n	8005c92 <_printf_i+0x1a6>
 8005bfa:	4616      	mov	r6, r2
 8005bfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c00:	fb03 5711 	mls	r7, r3, r1, r5
 8005c04:	5dc7      	ldrb	r7, [r0, r7]
 8005c06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c0a:	462f      	mov	r7, r5
 8005c0c:	42bb      	cmp	r3, r7
 8005c0e:	460d      	mov	r5, r1
 8005c10:	d9f4      	bls.n	8005bfc <_printf_i+0x110>
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d10b      	bne.n	8005c2e <_printf_i+0x142>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	07df      	lsls	r7, r3, #31
 8005c1a:	d508      	bpl.n	8005c2e <_printf_i+0x142>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	6861      	ldr	r1, [r4, #4]
 8005c20:	4299      	cmp	r1, r3
 8005c22:	bfde      	ittt	le
 8005c24:	2330      	movle	r3, #48	@ 0x30
 8005c26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c2e:	1b92      	subs	r2, r2, r6
 8005c30:	6122      	str	r2, [r4, #16]
 8005c32:	f8cd a000 	str.w	sl, [sp]
 8005c36:	464b      	mov	r3, r9
 8005c38:	aa03      	add	r2, sp, #12
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	f7ff fee7 	bl	8005a10 <_printf_common>
 8005c42:	3001      	adds	r0, #1
 8005c44:	d14a      	bne.n	8005cdc <_printf_i+0x1f0>
 8005c46:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4a:	b004      	add	sp, #16
 8005c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	f043 0320 	orr.w	r3, r3, #32
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	4832      	ldr	r0, [pc, #200]	@ (8005d24 <_printf_i+0x238>)
 8005c5a:	2778      	movs	r7, #120	@ 0x78
 8005c5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	061f      	lsls	r7, r3, #24
 8005c66:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c6a:	d402      	bmi.n	8005c72 <_printf_i+0x186>
 8005c6c:	065f      	lsls	r7, r3, #25
 8005c6e:	bf48      	it	mi
 8005c70:	b2ad      	uxthmi	r5, r5
 8005c72:	6031      	str	r1, [r6, #0]
 8005c74:	07d9      	lsls	r1, r3, #31
 8005c76:	bf44      	itt	mi
 8005c78:	f043 0320 	orrmi.w	r3, r3, #32
 8005c7c:	6023      	strmi	r3, [r4, #0]
 8005c7e:	b11d      	cbz	r5, 8005c88 <_printf_i+0x19c>
 8005c80:	2310      	movs	r3, #16
 8005c82:	e7ad      	b.n	8005be0 <_printf_i+0xf4>
 8005c84:	4826      	ldr	r0, [pc, #152]	@ (8005d20 <_printf_i+0x234>)
 8005c86:	e7e9      	b.n	8005c5c <_printf_i+0x170>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	f023 0320 	bic.w	r3, r3, #32
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	e7f6      	b.n	8005c80 <_printf_i+0x194>
 8005c92:	4616      	mov	r6, r2
 8005c94:	e7bd      	b.n	8005c12 <_printf_i+0x126>
 8005c96:	6833      	ldr	r3, [r6, #0]
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	6961      	ldr	r1, [r4, #20]
 8005c9c:	1d18      	adds	r0, r3, #4
 8005c9e:	6030      	str	r0, [r6, #0]
 8005ca0:	062e      	lsls	r6, r5, #24
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	d501      	bpl.n	8005caa <_printf_i+0x1be>
 8005ca6:	6019      	str	r1, [r3, #0]
 8005ca8:	e002      	b.n	8005cb0 <_printf_i+0x1c4>
 8005caa:	0668      	lsls	r0, r5, #25
 8005cac:	d5fb      	bpl.n	8005ca6 <_printf_i+0x1ba>
 8005cae:	8019      	strh	r1, [r3, #0]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	e7bc      	b.n	8005c32 <_printf_i+0x146>
 8005cb8:	6833      	ldr	r3, [r6, #0]
 8005cba:	1d1a      	adds	r2, r3, #4
 8005cbc:	6032      	str	r2, [r6, #0]
 8005cbe:	681e      	ldr	r6, [r3, #0]
 8005cc0:	6862      	ldr	r2, [r4, #4]
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f7fa fa83 	bl	80001d0 <memchr>
 8005cca:	b108      	cbz	r0, 8005cd0 <_printf_i+0x1e4>
 8005ccc:	1b80      	subs	r0, r0, r6
 8005cce:	6060      	str	r0, [r4, #4]
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	6123      	str	r3, [r4, #16]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cda:	e7aa      	b.n	8005c32 <_printf_i+0x146>
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	4632      	mov	r2, r6
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	47d0      	blx	sl
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d0ad      	beq.n	8005c46 <_printf_i+0x15a>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	079b      	lsls	r3, r3, #30
 8005cee:	d413      	bmi.n	8005d18 <_printf_i+0x22c>
 8005cf0:	68e0      	ldr	r0, [r4, #12]
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	4298      	cmp	r0, r3
 8005cf6:	bfb8      	it	lt
 8005cf8:	4618      	movlt	r0, r3
 8005cfa:	e7a6      	b.n	8005c4a <_printf_i+0x15e>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4632      	mov	r2, r6
 8005d00:	4649      	mov	r1, r9
 8005d02:	4640      	mov	r0, r8
 8005d04:	47d0      	blx	sl
 8005d06:	3001      	adds	r0, #1
 8005d08:	d09d      	beq.n	8005c46 <_printf_i+0x15a>
 8005d0a:	3501      	adds	r5, #1
 8005d0c:	68e3      	ldr	r3, [r4, #12]
 8005d0e:	9903      	ldr	r1, [sp, #12]
 8005d10:	1a5b      	subs	r3, r3, r1
 8005d12:	42ab      	cmp	r3, r5
 8005d14:	dcf2      	bgt.n	8005cfc <_printf_i+0x210>
 8005d16:	e7eb      	b.n	8005cf0 <_printf_i+0x204>
 8005d18:	2500      	movs	r5, #0
 8005d1a:	f104 0619 	add.w	r6, r4, #25
 8005d1e:	e7f5      	b.n	8005d0c <_printf_i+0x220>
 8005d20:	0800840f 	.word	0x0800840f
 8005d24:	08008420 	.word	0x08008420

08005d28 <std>:
 8005d28:	2300      	movs	r3, #0
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d36:	6083      	str	r3, [r0, #8]
 8005d38:	8181      	strh	r1, [r0, #12]
 8005d3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d3c:	81c2      	strh	r2, [r0, #14]
 8005d3e:	6183      	str	r3, [r0, #24]
 8005d40:	4619      	mov	r1, r3
 8005d42:	2208      	movs	r2, #8
 8005d44:	305c      	adds	r0, #92	@ 0x5c
 8005d46:	f000 f92a 	bl	8005f9e <memset>
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <std+0x58>)
 8005d4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <std+0x5c>)
 8005d50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d52:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <std+0x60>)
 8005d54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <std+0x64>)
 8005d58:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <std+0x68>)
 8005d5c:	6224      	str	r4, [r4, #32]
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	d006      	beq.n	8005d70 <std+0x48>
 8005d62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d66:	4294      	cmp	r4, r2
 8005d68:	d002      	beq.n	8005d70 <std+0x48>
 8005d6a:	33d0      	adds	r3, #208	@ 0xd0
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	d105      	bne.n	8005d7c <std+0x54>
 8005d70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d78:	f000 b9b6 	b.w	80060e8 <__retarget_lock_init_recursive>
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	bf00      	nop
 8005d80:	08005f19 	.word	0x08005f19
 8005d84:	08005f3b 	.word	0x08005f3b
 8005d88:	08005f73 	.word	0x08005f73
 8005d8c:	08005f97 	.word	0x08005f97
 8005d90:	200005e8 	.word	0x200005e8

08005d94 <stdio_exit_handler>:
 8005d94:	4a02      	ldr	r2, [pc, #8]	@ (8005da0 <stdio_exit_handler+0xc>)
 8005d96:	4903      	ldr	r1, [pc, #12]	@ (8005da4 <stdio_exit_handler+0x10>)
 8005d98:	4803      	ldr	r0, [pc, #12]	@ (8005da8 <stdio_exit_handler+0x14>)
 8005d9a:	f000 b869 	b.w	8005e70 <_fwalk_sglue>
 8005d9e:	bf00      	nop
 8005da0:	2000000c 	.word	0x2000000c
 8005da4:	08007a4d 	.word	0x08007a4d
 8005da8:	2000001c 	.word	0x2000001c

08005dac <cleanup_stdio>:
 8005dac:	6841      	ldr	r1, [r0, #4]
 8005dae:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <cleanup_stdio+0x34>)
 8005db0:	4299      	cmp	r1, r3
 8005db2:	b510      	push	{r4, lr}
 8005db4:	4604      	mov	r4, r0
 8005db6:	d001      	beq.n	8005dbc <cleanup_stdio+0x10>
 8005db8:	f001 fe48 	bl	8007a4c <_fflush_r>
 8005dbc:	68a1      	ldr	r1, [r4, #8]
 8005dbe:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <cleanup_stdio+0x38>)
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	d002      	beq.n	8005dca <cleanup_stdio+0x1e>
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f001 fe41 	bl	8007a4c <_fflush_r>
 8005dca:	68e1      	ldr	r1, [r4, #12]
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <cleanup_stdio+0x3c>)
 8005dce:	4299      	cmp	r1, r3
 8005dd0:	d004      	beq.n	8005ddc <cleanup_stdio+0x30>
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd8:	f001 be38 	b.w	8007a4c <_fflush_r>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	bf00      	nop
 8005de0:	200005e8 	.word	0x200005e8
 8005de4:	20000650 	.word	0x20000650
 8005de8:	200006b8 	.word	0x200006b8

08005dec <global_stdio_init.part.0>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <global_stdio_init.part.0+0x30>)
 8005df0:	4c0b      	ldr	r4, [pc, #44]	@ (8005e20 <global_stdio_init.part.0+0x34>)
 8005df2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <global_stdio_init.part.0+0x38>)
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	4620      	mov	r0, r4
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	f7ff ff94 	bl	8005d28 <std>
 8005e00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e04:	2201      	movs	r2, #1
 8005e06:	2109      	movs	r1, #9
 8005e08:	f7ff ff8e 	bl	8005d28 <std>
 8005e0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e10:	2202      	movs	r2, #2
 8005e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e16:	2112      	movs	r1, #18
 8005e18:	f7ff bf86 	b.w	8005d28 <std>
 8005e1c:	20000720 	.word	0x20000720
 8005e20:	200005e8 	.word	0x200005e8
 8005e24:	08005d95 	.word	0x08005d95

08005e28 <__sfp_lock_acquire>:
 8005e28:	4801      	ldr	r0, [pc, #4]	@ (8005e30 <__sfp_lock_acquire+0x8>)
 8005e2a:	f000 b95e 	b.w	80060ea <__retarget_lock_acquire_recursive>
 8005e2e:	bf00      	nop
 8005e30:	20000729 	.word	0x20000729

08005e34 <__sfp_lock_release>:
 8005e34:	4801      	ldr	r0, [pc, #4]	@ (8005e3c <__sfp_lock_release+0x8>)
 8005e36:	f000 b959 	b.w	80060ec <__retarget_lock_release_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	20000729 	.word	0x20000729

08005e40 <__sinit>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	4604      	mov	r4, r0
 8005e44:	f7ff fff0 	bl	8005e28 <__sfp_lock_acquire>
 8005e48:	6a23      	ldr	r3, [r4, #32]
 8005e4a:	b11b      	cbz	r3, 8005e54 <__sinit+0x14>
 8005e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e50:	f7ff bff0 	b.w	8005e34 <__sfp_lock_release>
 8005e54:	4b04      	ldr	r3, [pc, #16]	@ (8005e68 <__sinit+0x28>)
 8005e56:	6223      	str	r3, [r4, #32]
 8005e58:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <__sinit+0x2c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f5      	bne.n	8005e4c <__sinit+0xc>
 8005e60:	f7ff ffc4 	bl	8005dec <global_stdio_init.part.0>
 8005e64:	e7f2      	b.n	8005e4c <__sinit+0xc>
 8005e66:	bf00      	nop
 8005e68:	08005dad 	.word	0x08005dad
 8005e6c:	20000720 	.word	0x20000720

08005e70 <_fwalk_sglue>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	4607      	mov	r7, r0
 8005e76:	4688      	mov	r8, r1
 8005e78:	4614      	mov	r4, r2
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e80:	f1b9 0901 	subs.w	r9, r9, #1
 8005e84:	d505      	bpl.n	8005e92 <_fwalk_sglue+0x22>
 8005e86:	6824      	ldr	r4, [r4, #0]
 8005e88:	2c00      	cmp	r4, #0
 8005e8a:	d1f7      	bne.n	8005e7c <_fwalk_sglue+0xc>
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d907      	bls.n	8005ea8 <_fwalk_sglue+0x38>
 8005e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	d003      	beq.n	8005ea8 <_fwalk_sglue+0x38>
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	4306      	orrs	r6, r0
 8005ea8:	3568      	adds	r5, #104	@ 0x68
 8005eaa:	e7e9      	b.n	8005e80 <_fwalk_sglue+0x10>

08005eac <sniprintf>:
 8005eac:	b40c      	push	{r2, r3}
 8005eae:	b530      	push	{r4, r5, lr}
 8005eb0:	4b18      	ldr	r3, [pc, #96]	@ (8005f14 <sniprintf+0x68>)
 8005eb2:	1e0c      	subs	r4, r1, #0
 8005eb4:	681d      	ldr	r5, [r3, #0]
 8005eb6:	b09d      	sub	sp, #116	@ 0x74
 8005eb8:	da08      	bge.n	8005ecc <sniprintf+0x20>
 8005eba:	238b      	movs	r3, #139	@ 0x8b
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	b01d      	add	sp, #116	@ 0x74
 8005ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ec8:	b002      	add	sp, #8
 8005eca:	4770      	bx	lr
 8005ecc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ed0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005eda:	bf14      	ite	ne
 8005edc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ee0:	4623      	moveq	r3, r4
 8005ee2:	9304      	str	r3, [sp, #16]
 8005ee4:	9307      	str	r3, [sp, #28]
 8005ee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005eea:	9002      	str	r0, [sp, #8]
 8005eec:	9006      	str	r0, [sp, #24]
 8005eee:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ef2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ef4:	ab21      	add	r3, sp, #132	@ 0x84
 8005ef6:	a902      	add	r1, sp, #8
 8005ef8:	4628      	mov	r0, r5
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	f001 fc26 	bl	800774c <_svfiprintf_r>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	bfbc      	itt	lt
 8005f04:	238b      	movlt	r3, #139	@ 0x8b
 8005f06:	602b      	strlt	r3, [r5, #0]
 8005f08:	2c00      	cmp	r4, #0
 8005f0a:	d0da      	beq.n	8005ec2 <sniprintf+0x16>
 8005f0c:	9b02      	ldr	r3, [sp, #8]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e7d6      	b.n	8005ec2 <sniprintf+0x16>
 8005f14:	20000018 	.word	0x20000018

08005f18 <__sread>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f20:	f000 f894 	bl	800604c <_read_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	bfab      	itete	ge
 8005f28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f2c:	181b      	addge	r3, r3, r0
 8005f2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f32:	bfac      	ite	ge
 8005f34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f36:	81a3      	strhlt	r3, [r4, #12]
 8005f38:	bd10      	pop	{r4, pc}

08005f3a <__swrite>:
 8005f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3e:	461f      	mov	r7, r3
 8005f40:	898b      	ldrh	r3, [r1, #12]
 8005f42:	05db      	lsls	r3, r3, #23
 8005f44:	4605      	mov	r5, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	4616      	mov	r6, r2
 8005f4a:	d505      	bpl.n	8005f58 <__swrite+0x1e>
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	2302      	movs	r3, #2
 8005f52:	2200      	movs	r2, #0
 8005f54:	f000 f868 	bl	8006028 <_lseek_r>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	4632      	mov	r2, r6
 8005f66:	463b      	mov	r3, r7
 8005f68:	4628      	mov	r0, r5
 8005f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	f000 b87f 	b.w	8006070 <_write_r>

08005f72 <__sseek>:
 8005f72:	b510      	push	{r4, lr}
 8005f74:	460c      	mov	r4, r1
 8005f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7a:	f000 f855 	bl	8006028 <_lseek_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	bf15      	itete	ne
 8005f84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f8e:	81a3      	strheq	r3, [r4, #12]
 8005f90:	bf18      	it	ne
 8005f92:	81a3      	strhne	r3, [r4, #12]
 8005f94:	bd10      	pop	{r4, pc}

08005f96 <__sclose>:
 8005f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9a:	f000 b835 	b.w	8006008 <_close_r>

08005f9e <memset>:
 8005f9e:	4402      	add	r2, r0
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d100      	bne.n	8005fa8 <memset+0xa>
 8005fa6:	4770      	bx	lr
 8005fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fac:	e7f9      	b.n	8005fa2 <memset+0x4>

08005fae <strncmp>:
 8005fae:	b510      	push	{r4, lr}
 8005fb0:	b16a      	cbz	r2, 8005fce <strncmp+0x20>
 8005fb2:	3901      	subs	r1, #1
 8005fb4:	1884      	adds	r4, r0, r2
 8005fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d103      	bne.n	8005fca <strncmp+0x1c>
 8005fc2:	42a0      	cmp	r0, r4
 8005fc4:	d001      	beq.n	8005fca <strncmp+0x1c>
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	d1f5      	bne.n	8005fb6 <strncmp+0x8>
 8005fca:	1ad0      	subs	r0, r2, r3
 8005fcc:	bd10      	pop	{r4, pc}
 8005fce:	4610      	mov	r0, r2
 8005fd0:	e7fc      	b.n	8005fcc <strncmp+0x1e>

08005fd2 <strstr>:
 8005fd2:	780a      	ldrb	r2, [r1, #0]
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	b96a      	cbnz	r2, 8005ff4 <strstr+0x22>
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d109      	bne.n	8005ff2 <strstr+0x20>
 8005fde:	460c      	mov	r4, r1
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f6      	beq.n	8005fd8 <strstr+0x6>
 8005fea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005fee:	429e      	cmp	r6, r3
 8005ff0:	d0f7      	beq.n	8005fe2 <strstr+0x10>
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	7803      	ldrb	r3, [r0, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ef      	bne.n	8005fda <strstr+0x8>
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	e7ec      	b.n	8005fd8 <strstr+0x6>
	...

08006000 <_localeconv_r>:
 8006000:	4800      	ldr	r0, [pc, #0]	@ (8006004 <_localeconv_r+0x4>)
 8006002:	4770      	bx	lr
 8006004:	20000158 	.word	0x20000158

08006008 <_close_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	@ (8006024 <_close_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fb fdd3 	bl	8001bbe <_close>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_close_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_close_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20000724 	.word	0x20000724

08006028 <_lseek_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d07      	ldr	r5, [pc, #28]	@ (8006048 <_lseek_r+0x20>)
 800602c:	4604      	mov	r4, r0
 800602e:	4608      	mov	r0, r1
 8006030:	4611      	mov	r1, r2
 8006032:	2200      	movs	r2, #0
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fb fde8 	bl	8001c0c <_lseek>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_lseek_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_lseek_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000724 	.word	0x20000724

0800604c <_read_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	@ (800606c <_read_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fb fd76 	bl	8001b4c <_read>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_read_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_read_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	20000724 	.word	0x20000724

08006070 <_write_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	@ (8006090 <_write_r+0x20>)
 8006074:	4604      	mov	r4, r0
 8006076:	4608      	mov	r0, r1
 8006078:	4611      	mov	r1, r2
 800607a:	2200      	movs	r2, #0
 800607c:	602a      	str	r2, [r5, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f7fb fd81 	bl	8001b86 <_write>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_write_r+0x1e>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_write_r+0x1e>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	20000724 	.word	0x20000724

08006094 <__errno>:
 8006094:	4b01      	ldr	r3, [pc, #4]	@ (800609c <__errno+0x8>)
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000018 	.word	0x20000018

080060a0 <__libc_init_array>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	4d0d      	ldr	r5, [pc, #52]	@ (80060d8 <__libc_init_array+0x38>)
 80060a4:	4c0d      	ldr	r4, [pc, #52]	@ (80060dc <__libc_init_array+0x3c>)
 80060a6:	1b64      	subs	r4, r4, r5
 80060a8:	10a4      	asrs	r4, r4, #2
 80060aa:	2600      	movs	r6, #0
 80060ac:	42a6      	cmp	r6, r4
 80060ae:	d109      	bne.n	80060c4 <__libc_init_array+0x24>
 80060b0:	4d0b      	ldr	r5, [pc, #44]	@ (80060e0 <__libc_init_array+0x40>)
 80060b2:	4c0c      	ldr	r4, [pc, #48]	@ (80060e4 <__libc_init_array+0x44>)
 80060b4:	f002 f868 	bl	8008188 <_init>
 80060b8:	1b64      	subs	r4, r4, r5
 80060ba:	10a4      	asrs	r4, r4, #2
 80060bc:	2600      	movs	r6, #0
 80060be:	42a6      	cmp	r6, r4
 80060c0:	d105      	bne.n	80060ce <__libc_init_array+0x2e>
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c8:	4798      	blx	r3
 80060ca:	3601      	adds	r6, #1
 80060cc:	e7ee      	b.n	80060ac <__libc_init_array+0xc>
 80060ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d2:	4798      	blx	r3
 80060d4:	3601      	adds	r6, #1
 80060d6:	e7f2      	b.n	80060be <__libc_init_array+0x1e>
 80060d8:	08008678 	.word	0x08008678
 80060dc:	08008678 	.word	0x08008678
 80060e0:	08008678 	.word	0x08008678
 80060e4:	0800867c 	.word	0x0800867c

080060e8 <__retarget_lock_init_recursive>:
 80060e8:	4770      	bx	lr

080060ea <__retarget_lock_acquire_recursive>:
 80060ea:	4770      	bx	lr

080060ec <__retarget_lock_release_recursive>:
 80060ec:	4770      	bx	lr

080060ee <quorem>:
 80060ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f2:	6903      	ldr	r3, [r0, #16]
 80060f4:	690c      	ldr	r4, [r1, #16]
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	4607      	mov	r7, r0
 80060fa:	db7e      	blt.n	80061fa <quorem+0x10c>
 80060fc:	3c01      	subs	r4, #1
 80060fe:	f101 0814 	add.w	r8, r1, #20
 8006102:	00a3      	lsls	r3, r4, #2
 8006104:	f100 0514 	add.w	r5, r0, #20
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006118:	3301      	adds	r3, #1
 800611a:	429a      	cmp	r2, r3
 800611c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006120:	fbb2 f6f3 	udiv	r6, r2, r3
 8006124:	d32e      	bcc.n	8006184 <quorem+0x96>
 8006126:	f04f 0a00 	mov.w	sl, #0
 800612a:	46c4      	mov	ip, r8
 800612c:	46ae      	mov	lr, r5
 800612e:	46d3      	mov	fp, sl
 8006130:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006134:	b298      	uxth	r0, r3
 8006136:	fb06 a000 	mla	r0, r6, r0, sl
 800613a:	0c02      	lsrs	r2, r0, #16
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	fb06 2303 	mla	r3, r6, r3, r2
 8006142:	f8de 2000 	ldr.w	r2, [lr]
 8006146:	b280      	uxth	r0, r0
 8006148:	b292      	uxth	r2, r2
 800614a:	1a12      	subs	r2, r2, r0
 800614c:	445a      	add	r2, fp
 800614e:	f8de 0000 	ldr.w	r0, [lr]
 8006152:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006156:	b29b      	uxth	r3, r3
 8006158:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800615c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006160:	b292      	uxth	r2, r2
 8006162:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006166:	45e1      	cmp	r9, ip
 8006168:	f84e 2b04 	str.w	r2, [lr], #4
 800616c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006170:	d2de      	bcs.n	8006130 <quorem+0x42>
 8006172:	9b00      	ldr	r3, [sp, #0]
 8006174:	58eb      	ldr	r3, [r5, r3]
 8006176:	b92b      	cbnz	r3, 8006184 <quorem+0x96>
 8006178:	9b01      	ldr	r3, [sp, #4]
 800617a:	3b04      	subs	r3, #4
 800617c:	429d      	cmp	r5, r3
 800617e:	461a      	mov	r2, r3
 8006180:	d32f      	bcc.n	80061e2 <quorem+0xf4>
 8006182:	613c      	str	r4, [r7, #16]
 8006184:	4638      	mov	r0, r7
 8006186:	f001 f97d 	bl	8007484 <__mcmp>
 800618a:	2800      	cmp	r0, #0
 800618c:	db25      	blt.n	80061da <quorem+0xec>
 800618e:	4629      	mov	r1, r5
 8006190:	2000      	movs	r0, #0
 8006192:	f858 2b04 	ldr.w	r2, [r8], #4
 8006196:	f8d1 c000 	ldr.w	ip, [r1]
 800619a:	fa1f fe82 	uxth.w	lr, r2
 800619e:	fa1f f38c 	uxth.w	r3, ip
 80061a2:	eba3 030e 	sub.w	r3, r3, lr
 80061a6:	4403      	add	r3, r0
 80061a8:	0c12      	lsrs	r2, r2, #16
 80061aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80061ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061b8:	45c1      	cmp	r9, r8
 80061ba:	f841 3b04 	str.w	r3, [r1], #4
 80061be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061c2:	d2e6      	bcs.n	8006192 <quorem+0xa4>
 80061c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061cc:	b922      	cbnz	r2, 80061d8 <quorem+0xea>
 80061ce:	3b04      	subs	r3, #4
 80061d0:	429d      	cmp	r5, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	d30b      	bcc.n	80061ee <quorem+0x100>
 80061d6:	613c      	str	r4, [r7, #16]
 80061d8:	3601      	adds	r6, #1
 80061da:	4630      	mov	r0, r6
 80061dc:	b003      	add	sp, #12
 80061de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	3b04      	subs	r3, #4
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d1cb      	bne.n	8006182 <quorem+0x94>
 80061ea:	3c01      	subs	r4, #1
 80061ec:	e7c6      	b.n	800617c <quorem+0x8e>
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	d1ef      	bne.n	80061d6 <quorem+0xe8>
 80061f6:	3c01      	subs	r4, #1
 80061f8:	e7ea      	b.n	80061d0 <quorem+0xe2>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e7ee      	b.n	80061dc <quorem+0xee>
	...

08006200 <_dtoa_r>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	69c7      	ldr	r7, [r0, #28]
 8006206:	b097      	sub	sp, #92	@ 0x5c
 8006208:	ed8d 0b04 	vstr	d0, [sp, #16]
 800620c:	ec55 4b10 	vmov	r4, r5, d0
 8006210:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006212:	9107      	str	r1, [sp, #28]
 8006214:	4681      	mov	r9, r0
 8006216:	920c      	str	r2, [sp, #48]	@ 0x30
 8006218:	9311      	str	r3, [sp, #68]	@ 0x44
 800621a:	b97f      	cbnz	r7, 800623c <_dtoa_r+0x3c>
 800621c:	2010      	movs	r0, #16
 800621e:	f000 fe09 	bl	8006e34 <malloc>
 8006222:	4602      	mov	r2, r0
 8006224:	f8c9 001c 	str.w	r0, [r9, #28]
 8006228:	b920      	cbnz	r0, 8006234 <_dtoa_r+0x34>
 800622a:	4ba9      	ldr	r3, [pc, #676]	@ (80064d0 <_dtoa_r+0x2d0>)
 800622c:	21ef      	movs	r1, #239	@ 0xef
 800622e:	48a9      	ldr	r0, [pc, #676]	@ (80064d4 <_dtoa_r+0x2d4>)
 8006230:	f001 fc6c 	bl	8007b0c <__assert_func>
 8006234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006238:	6007      	str	r7, [r0, #0]
 800623a:	60c7      	str	r7, [r0, #12]
 800623c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	b159      	cbz	r1, 800625c <_dtoa_r+0x5c>
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	604a      	str	r2, [r1, #4]
 8006248:	2301      	movs	r3, #1
 800624a:	4093      	lsls	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
 800624e:	4648      	mov	r0, r9
 8006250:	f000 fee6 	bl	8007020 <_Bfree>
 8006254:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	1e2b      	subs	r3, r5, #0
 800625e:	bfb9      	ittee	lt
 8006260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006264:	9305      	strlt	r3, [sp, #20]
 8006266:	2300      	movge	r3, #0
 8006268:	6033      	strge	r3, [r6, #0]
 800626a:	9f05      	ldr	r7, [sp, #20]
 800626c:	4b9a      	ldr	r3, [pc, #616]	@ (80064d8 <_dtoa_r+0x2d8>)
 800626e:	bfbc      	itt	lt
 8006270:	2201      	movlt	r2, #1
 8006272:	6032      	strlt	r2, [r6, #0]
 8006274:	43bb      	bics	r3, r7
 8006276:	d112      	bne.n	800629e <_dtoa_r+0x9e>
 8006278:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800627a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006284:	4323      	orrs	r3, r4
 8006286:	f000 855a 	beq.w	8006d3e <_dtoa_r+0xb3e>
 800628a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800628c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80064ec <_dtoa_r+0x2ec>
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 855c 	beq.w	8006d4e <_dtoa_r+0xb4e>
 8006296:	f10a 0303 	add.w	r3, sl, #3
 800629a:	f000 bd56 	b.w	8006d4a <_dtoa_r+0xb4a>
 800629e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80062a2:	2200      	movs	r2, #0
 80062a4:	ec51 0b17 	vmov	r0, r1, d7
 80062a8:	2300      	movs	r3, #0
 80062aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80062ae:	f7fa fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80062b2:	4680      	mov	r8, r0
 80062b4:	b158      	cbz	r0, 80062ce <_dtoa_r+0xce>
 80062b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80062b8:	2301      	movs	r3, #1
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062be:	b113      	cbz	r3, 80062c6 <_dtoa_r+0xc6>
 80062c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80062c2:	4b86      	ldr	r3, [pc, #536]	@ (80064dc <_dtoa_r+0x2dc>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80064f0 <_dtoa_r+0x2f0>
 80062ca:	f000 bd40 	b.w	8006d4e <_dtoa_r+0xb4e>
 80062ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80062d2:	aa14      	add	r2, sp, #80	@ 0x50
 80062d4:	a915      	add	r1, sp, #84	@ 0x54
 80062d6:	4648      	mov	r0, r9
 80062d8:	f001 f984 	bl	80075e4 <__d2b>
 80062dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80062e0:	9002      	str	r0, [sp, #8]
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d078      	beq.n	80063d8 <_dtoa_r+0x1d8>
 80062e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80062ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006300:	4619      	mov	r1, r3
 8006302:	2200      	movs	r2, #0
 8006304:	4b76      	ldr	r3, [pc, #472]	@ (80064e0 <_dtoa_r+0x2e0>)
 8006306:	f7f9 ffbf 	bl	8000288 <__aeabi_dsub>
 800630a:	a36b      	add	r3, pc, #428	@ (adr r3, 80064b8 <_dtoa_r+0x2b8>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7fa f972 	bl	80005f8 <__aeabi_dmul>
 8006314:	a36a      	add	r3, pc, #424	@ (adr r3, 80064c0 <_dtoa_r+0x2c0>)
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	f7f9 ffb7 	bl	800028c <__adddf3>
 800631e:	4604      	mov	r4, r0
 8006320:	4630      	mov	r0, r6
 8006322:	460d      	mov	r5, r1
 8006324:	f7fa f8fe 	bl	8000524 <__aeabi_i2d>
 8006328:	a367      	add	r3, pc, #412	@ (adr r3, 80064c8 <_dtoa_r+0x2c8>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f7fa f963 	bl	80005f8 <__aeabi_dmul>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7f9 ffa7 	bl	800028c <__adddf3>
 800633e:	4604      	mov	r4, r0
 8006340:	460d      	mov	r5, r1
 8006342:	f7fa fc09 	bl	8000b58 <__aeabi_d2iz>
 8006346:	2200      	movs	r2, #0
 8006348:	4607      	mov	r7, r0
 800634a:	2300      	movs	r3, #0
 800634c:	4620      	mov	r0, r4
 800634e:	4629      	mov	r1, r5
 8006350:	f7fa fbc4 	bl	8000adc <__aeabi_dcmplt>
 8006354:	b140      	cbz	r0, 8006368 <_dtoa_r+0x168>
 8006356:	4638      	mov	r0, r7
 8006358:	f7fa f8e4 	bl	8000524 <__aeabi_i2d>
 800635c:	4622      	mov	r2, r4
 800635e:	462b      	mov	r3, r5
 8006360:	f7fa fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006364:	b900      	cbnz	r0, 8006368 <_dtoa_r+0x168>
 8006366:	3f01      	subs	r7, #1
 8006368:	2f16      	cmp	r7, #22
 800636a:	d852      	bhi.n	8006412 <_dtoa_r+0x212>
 800636c:	4b5d      	ldr	r3, [pc, #372]	@ (80064e4 <_dtoa_r+0x2e4>)
 800636e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800637a:	f7fa fbaf 	bl	8000adc <__aeabi_dcmplt>
 800637e:	2800      	cmp	r0, #0
 8006380:	d049      	beq.n	8006416 <_dtoa_r+0x216>
 8006382:	3f01      	subs	r7, #1
 8006384:	2300      	movs	r3, #0
 8006386:	9310      	str	r3, [sp, #64]	@ 0x40
 8006388:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800638a:	1b9b      	subs	r3, r3, r6
 800638c:	1e5a      	subs	r2, r3, #1
 800638e:	bf45      	ittet	mi
 8006390:	f1c3 0301 	rsbmi	r3, r3, #1
 8006394:	9300      	strmi	r3, [sp, #0]
 8006396:	2300      	movpl	r3, #0
 8006398:	2300      	movmi	r3, #0
 800639a:	9206      	str	r2, [sp, #24]
 800639c:	bf54      	ite	pl
 800639e:	9300      	strpl	r3, [sp, #0]
 80063a0:	9306      	strmi	r3, [sp, #24]
 80063a2:	2f00      	cmp	r7, #0
 80063a4:	db39      	blt.n	800641a <_dtoa_r+0x21a>
 80063a6:	9b06      	ldr	r3, [sp, #24]
 80063a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80063aa:	443b      	add	r3, r7
 80063ac:	9306      	str	r3, [sp, #24]
 80063ae:	2300      	movs	r3, #0
 80063b0:	9308      	str	r3, [sp, #32]
 80063b2:	9b07      	ldr	r3, [sp, #28]
 80063b4:	2b09      	cmp	r3, #9
 80063b6:	d863      	bhi.n	8006480 <_dtoa_r+0x280>
 80063b8:	2b05      	cmp	r3, #5
 80063ba:	bfc4      	itt	gt
 80063bc:	3b04      	subgt	r3, #4
 80063be:	9307      	strgt	r3, [sp, #28]
 80063c0:	9b07      	ldr	r3, [sp, #28]
 80063c2:	f1a3 0302 	sub.w	r3, r3, #2
 80063c6:	bfcc      	ite	gt
 80063c8:	2400      	movgt	r4, #0
 80063ca:	2401      	movle	r4, #1
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d863      	bhi.n	8006498 <_dtoa_r+0x298>
 80063d0:	e8df f003 	tbb	[pc, r3]
 80063d4:	2b375452 	.word	0x2b375452
 80063d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063dc:	441e      	add	r6, r3
 80063de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	bfc1      	itttt	gt
 80063e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063ea:	409f      	lslgt	r7, r3
 80063ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063f4:	bfd6      	itet	le
 80063f6:	f1c3 0320 	rsble	r3, r3, #32
 80063fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80063fe:	fa04 f003 	lslle.w	r0, r4, r3
 8006402:	f7fa f87f 	bl	8000504 <__aeabi_ui2d>
 8006406:	2201      	movs	r2, #1
 8006408:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800640c:	3e01      	subs	r6, #1
 800640e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006410:	e776      	b.n	8006300 <_dtoa_r+0x100>
 8006412:	2301      	movs	r3, #1
 8006414:	e7b7      	b.n	8006386 <_dtoa_r+0x186>
 8006416:	9010      	str	r0, [sp, #64]	@ 0x40
 8006418:	e7b6      	b.n	8006388 <_dtoa_r+0x188>
 800641a:	9b00      	ldr	r3, [sp, #0]
 800641c:	1bdb      	subs	r3, r3, r7
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	427b      	negs	r3, r7
 8006422:	9308      	str	r3, [sp, #32]
 8006424:	2300      	movs	r3, #0
 8006426:	930d      	str	r3, [sp, #52]	@ 0x34
 8006428:	e7c3      	b.n	80063b2 <_dtoa_r+0x1b2>
 800642a:	2301      	movs	r3, #1
 800642c:	9309      	str	r3, [sp, #36]	@ 0x24
 800642e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006430:	eb07 0b03 	add.w	fp, r7, r3
 8006434:	f10b 0301 	add.w	r3, fp, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	9303      	str	r3, [sp, #12]
 800643c:	bfb8      	it	lt
 800643e:	2301      	movlt	r3, #1
 8006440:	e006      	b.n	8006450 <_dtoa_r+0x250>
 8006442:	2301      	movs	r3, #1
 8006444:	9309      	str	r3, [sp, #36]	@ 0x24
 8006446:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006448:	2b00      	cmp	r3, #0
 800644a:	dd28      	ble.n	800649e <_dtoa_r+0x29e>
 800644c:	469b      	mov	fp, r3
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006454:	2100      	movs	r1, #0
 8006456:	2204      	movs	r2, #4
 8006458:	f102 0514 	add.w	r5, r2, #20
 800645c:	429d      	cmp	r5, r3
 800645e:	d926      	bls.n	80064ae <_dtoa_r+0x2ae>
 8006460:	6041      	str	r1, [r0, #4]
 8006462:	4648      	mov	r0, r9
 8006464:	f000 fd9c 	bl	8006fa0 <_Balloc>
 8006468:	4682      	mov	sl, r0
 800646a:	2800      	cmp	r0, #0
 800646c:	d142      	bne.n	80064f4 <_dtoa_r+0x2f4>
 800646e:	4b1e      	ldr	r3, [pc, #120]	@ (80064e8 <_dtoa_r+0x2e8>)
 8006470:	4602      	mov	r2, r0
 8006472:	f240 11af 	movw	r1, #431	@ 0x1af
 8006476:	e6da      	b.n	800622e <_dtoa_r+0x2e>
 8006478:	2300      	movs	r3, #0
 800647a:	e7e3      	b.n	8006444 <_dtoa_r+0x244>
 800647c:	2300      	movs	r3, #0
 800647e:	e7d5      	b.n	800642c <_dtoa_r+0x22c>
 8006480:	2401      	movs	r4, #1
 8006482:	2300      	movs	r3, #0
 8006484:	9307      	str	r3, [sp, #28]
 8006486:	9409      	str	r4, [sp, #36]	@ 0x24
 8006488:	f04f 3bff 	mov.w	fp, #4294967295
 800648c:	2200      	movs	r2, #0
 800648e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006492:	2312      	movs	r3, #18
 8006494:	920c      	str	r2, [sp, #48]	@ 0x30
 8006496:	e7db      	b.n	8006450 <_dtoa_r+0x250>
 8006498:	2301      	movs	r3, #1
 800649a:	9309      	str	r3, [sp, #36]	@ 0x24
 800649c:	e7f4      	b.n	8006488 <_dtoa_r+0x288>
 800649e:	f04f 0b01 	mov.w	fp, #1
 80064a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80064a6:	465b      	mov	r3, fp
 80064a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80064ac:	e7d0      	b.n	8006450 <_dtoa_r+0x250>
 80064ae:	3101      	adds	r1, #1
 80064b0:	0052      	lsls	r2, r2, #1
 80064b2:	e7d1      	b.n	8006458 <_dtoa_r+0x258>
 80064b4:	f3af 8000 	nop.w
 80064b8:	636f4361 	.word	0x636f4361
 80064bc:	3fd287a7 	.word	0x3fd287a7
 80064c0:	8b60c8b3 	.word	0x8b60c8b3
 80064c4:	3fc68a28 	.word	0x3fc68a28
 80064c8:	509f79fb 	.word	0x509f79fb
 80064cc:	3fd34413 	.word	0x3fd34413
 80064d0:	0800843e 	.word	0x0800843e
 80064d4:	08008455 	.word	0x08008455
 80064d8:	7ff00000 	.word	0x7ff00000
 80064dc:	0800840e 	.word	0x0800840e
 80064e0:	3ff80000 	.word	0x3ff80000
 80064e4:	080085a8 	.word	0x080085a8
 80064e8:	080084ad 	.word	0x080084ad
 80064ec:	0800843a 	.word	0x0800843a
 80064f0:	0800840d 	.word	0x0800840d
 80064f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064f8:	6018      	str	r0, [r3, #0]
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	2b0e      	cmp	r3, #14
 80064fe:	f200 80a1 	bhi.w	8006644 <_dtoa_r+0x444>
 8006502:	2c00      	cmp	r4, #0
 8006504:	f000 809e 	beq.w	8006644 <_dtoa_r+0x444>
 8006508:	2f00      	cmp	r7, #0
 800650a:	dd33      	ble.n	8006574 <_dtoa_r+0x374>
 800650c:	4b9c      	ldr	r3, [pc, #624]	@ (8006780 <_dtoa_r+0x580>)
 800650e:	f007 020f 	and.w	r2, r7, #15
 8006512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006516:	ed93 7b00 	vldr	d7, [r3]
 800651a:	05f8      	lsls	r0, r7, #23
 800651c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006520:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006524:	d516      	bpl.n	8006554 <_dtoa_r+0x354>
 8006526:	4b97      	ldr	r3, [pc, #604]	@ (8006784 <_dtoa_r+0x584>)
 8006528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800652c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006530:	f7fa f98c 	bl	800084c <__aeabi_ddiv>
 8006534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006538:	f004 040f 	and.w	r4, r4, #15
 800653c:	2603      	movs	r6, #3
 800653e:	4d91      	ldr	r5, [pc, #580]	@ (8006784 <_dtoa_r+0x584>)
 8006540:	b954      	cbnz	r4, 8006558 <_dtoa_r+0x358>
 8006542:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800654a:	f7fa f97f 	bl	800084c <__aeabi_ddiv>
 800654e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006552:	e028      	b.n	80065a6 <_dtoa_r+0x3a6>
 8006554:	2602      	movs	r6, #2
 8006556:	e7f2      	b.n	800653e <_dtoa_r+0x33e>
 8006558:	07e1      	lsls	r1, r4, #31
 800655a:	d508      	bpl.n	800656e <_dtoa_r+0x36e>
 800655c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006560:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006564:	f7fa f848 	bl	80005f8 <__aeabi_dmul>
 8006568:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800656c:	3601      	adds	r6, #1
 800656e:	1064      	asrs	r4, r4, #1
 8006570:	3508      	adds	r5, #8
 8006572:	e7e5      	b.n	8006540 <_dtoa_r+0x340>
 8006574:	f000 80af 	beq.w	80066d6 <_dtoa_r+0x4d6>
 8006578:	427c      	negs	r4, r7
 800657a:	4b81      	ldr	r3, [pc, #516]	@ (8006780 <_dtoa_r+0x580>)
 800657c:	4d81      	ldr	r5, [pc, #516]	@ (8006784 <_dtoa_r+0x584>)
 800657e:	f004 020f 	and.w	r2, r4, #15
 8006582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800658e:	f7fa f833 	bl	80005f8 <__aeabi_dmul>
 8006592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006596:	1124      	asrs	r4, r4, #4
 8006598:	2300      	movs	r3, #0
 800659a:	2602      	movs	r6, #2
 800659c:	2c00      	cmp	r4, #0
 800659e:	f040 808f 	bne.w	80066c0 <_dtoa_r+0x4c0>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1d3      	bne.n	800654e <_dtoa_r+0x34e>
 80065a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8094 	beq.w	80066da <_dtoa_r+0x4da>
 80065b2:	4b75      	ldr	r3, [pc, #468]	@ (8006788 <_dtoa_r+0x588>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	f7fa fa8f 	bl	8000adc <__aeabi_dcmplt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	f000 808b 	beq.w	80066da <_dtoa_r+0x4da>
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8087 	beq.w	80066da <_dtoa_r+0x4da>
 80065cc:	f1bb 0f00 	cmp.w	fp, #0
 80065d0:	dd34      	ble.n	800663c <_dtoa_r+0x43c>
 80065d2:	4620      	mov	r0, r4
 80065d4:	4b6d      	ldr	r3, [pc, #436]	@ (800678c <_dtoa_r+0x58c>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	4629      	mov	r1, r5
 80065da:	f7fa f80d 	bl	80005f8 <__aeabi_dmul>
 80065de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80065e6:	3601      	adds	r6, #1
 80065e8:	465c      	mov	r4, fp
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7f9 ff9a 	bl	8000524 <__aeabi_i2d>
 80065f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f4:	f7fa f800 	bl	80005f8 <__aeabi_dmul>
 80065f8:	4b65      	ldr	r3, [pc, #404]	@ (8006790 <_dtoa_r+0x590>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	f7f9 fe46 	bl	800028c <__adddf3>
 8006600:	4605      	mov	r5, r0
 8006602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006606:	2c00      	cmp	r4, #0
 8006608:	d16a      	bne.n	80066e0 <_dtoa_r+0x4e0>
 800660a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800660e:	4b61      	ldr	r3, [pc, #388]	@ (8006794 <_dtoa_r+0x594>)
 8006610:	2200      	movs	r2, #0
 8006612:	f7f9 fe39 	bl	8000288 <__aeabi_dsub>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800661e:	462a      	mov	r2, r5
 8006620:	4633      	mov	r3, r6
 8006622:	f7fa fa79 	bl	8000b18 <__aeabi_dcmpgt>
 8006626:	2800      	cmp	r0, #0
 8006628:	f040 8298 	bne.w	8006b5c <_dtoa_r+0x95c>
 800662c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006630:	462a      	mov	r2, r5
 8006632:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006636:	f7fa fa51 	bl	8000adc <__aeabi_dcmplt>
 800663a:	bb38      	cbnz	r0, 800668c <_dtoa_r+0x48c>
 800663c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006640:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006644:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006646:	2b00      	cmp	r3, #0
 8006648:	f2c0 8157 	blt.w	80068fa <_dtoa_r+0x6fa>
 800664c:	2f0e      	cmp	r7, #14
 800664e:	f300 8154 	bgt.w	80068fa <_dtoa_r+0x6fa>
 8006652:	4b4b      	ldr	r3, [pc, #300]	@ (8006780 <_dtoa_r+0x580>)
 8006654:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006658:	ed93 7b00 	vldr	d7, [r3]
 800665c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800665e:	2b00      	cmp	r3, #0
 8006660:	ed8d 7b00 	vstr	d7, [sp]
 8006664:	f280 80e5 	bge.w	8006832 <_dtoa_r+0x632>
 8006668:	9b03      	ldr	r3, [sp, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f300 80e1 	bgt.w	8006832 <_dtoa_r+0x632>
 8006670:	d10c      	bne.n	800668c <_dtoa_r+0x48c>
 8006672:	4b48      	ldr	r3, [pc, #288]	@ (8006794 <_dtoa_r+0x594>)
 8006674:	2200      	movs	r2, #0
 8006676:	ec51 0b17 	vmov	r0, r1, d7
 800667a:	f7f9 ffbd 	bl	80005f8 <__aeabi_dmul>
 800667e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006682:	f7fa fa3f 	bl	8000b04 <__aeabi_dcmpge>
 8006686:	2800      	cmp	r0, #0
 8006688:	f000 8266 	beq.w	8006b58 <_dtoa_r+0x958>
 800668c:	2400      	movs	r4, #0
 800668e:	4625      	mov	r5, r4
 8006690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006692:	4656      	mov	r6, sl
 8006694:	ea6f 0803 	mvn.w	r8, r3
 8006698:	2700      	movs	r7, #0
 800669a:	4621      	mov	r1, r4
 800669c:	4648      	mov	r0, r9
 800669e:	f000 fcbf 	bl	8007020 <_Bfree>
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	f000 80bd 	beq.w	8006822 <_dtoa_r+0x622>
 80066a8:	b12f      	cbz	r7, 80066b6 <_dtoa_r+0x4b6>
 80066aa:	42af      	cmp	r7, r5
 80066ac:	d003      	beq.n	80066b6 <_dtoa_r+0x4b6>
 80066ae:	4639      	mov	r1, r7
 80066b0:	4648      	mov	r0, r9
 80066b2:	f000 fcb5 	bl	8007020 <_Bfree>
 80066b6:	4629      	mov	r1, r5
 80066b8:	4648      	mov	r0, r9
 80066ba:	f000 fcb1 	bl	8007020 <_Bfree>
 80066be:	e0b0      	b.n	8006822 <_dtoa_r+0x622>
 80066c0:	07e2      	lsls	r2, r4, #31
 80066c2:	d505      	bpl.n	80066d0 <_dtoa_r+0x4d0>
 80066c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066c8:	f7f9 ff96 	bl	80005f8 <__aeabi_dmul>
 80066cc:	3601      	adds	r6, #1
 80066ce:	2301      	movs	r3, #1
 80066d0:	1064      	asrs	r4, r4, #1
 80066d2:	3508      	adds	r5, #8
 80066d4:	e762      	b.n	800659c <_dtoa_r+0x39c>
 80066d6:	2602      	movs	r6, #2
 80066d8:	e765      	b.n	80065a6 <_dtoa_r+0x3a6>
 80066da:	9c03      	ldr	r4, [sp, #12]
 80066dc:	46b8      	mov	r8, r7
 80066de:	e784      	b.n	80065ea <_dtoa_r+0x3ea>
 80066e0:	4b27      	ldr	r3, [pc, #156]	@ (8006780 <_dtoa_r+0x580>)
 80066e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066ec:	4454      	add	r4, sl
 80066ee:	2900      	cmp	r1, #0
 80066f0:	d054      	beq.n	800679c <_dtoa_r+0x59c>
 80066f2:	4929      	ldr	r1, [pc, #164]	@ (8006798 <_dtoa_r+0x598>)
 80066f4:	2000      	movs	r0, #0
 80066f6:	f7fa f8a9 	bl	800084c <__aeabi_ddiv>
 80066fa:	4633      	mov	r3, r6
 80066fc:	462a      	mov	r2, r5
 80066fe:	f7f9 fdc3 	bl	8000288 <__aeabi_dsub>
 8006702:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006706:	4656      	mov	r6, sl
 8006708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800670c:	f7fa fa24 	bl	8000b58 <__aeabi_d2iz>
 8006710:	4605      	mov	r5, r0
 8006712:	f7f9 ff07 	bl	8000524 <__aeabi_i2d>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800671e:	f7f9 fdb3 	bl	8000288 <__aeabi_dsub>
 8006722:	3530      	adds	r5, #48	@ 0x30
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800672c:	f806 5b01 	strb.w	r5, [r6], #1
 8006730:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006734:	f7fa f9d2 	bl	8000adc <__aeabi_dcmplt>
 8006738:	2800      	cmp	r0, #0
 800673a:	d172      	bne.n	8006822 <_dtoa_r+0x622>
 800673c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006740:	4911      	ldr	r1, [pc, #68]	@ (8006788 <_dtoa_r+0x588>)
 8006742:	2000      	movs	r0, #0
 8006744:	f7f9 fda0 	bl	8000288 <__aeabi_dsub>
 8006748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800674c:	f7fa f9c6 	bl	8000adc <__aeabi_dcmplt>
 8006750:	2800      	cmp	r0, #0
 8006752:	f040 80b4 	bne.w	80068be <_dtoa_r+0x6be>
 8006756:	42a6      	cmp	r6, r4
 8006758:	f43f af70 	beq.w	800663c <_dtoa_r+0x43c>
 800675c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006760:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <_dtoa_r+0x58c>)
 8006762:	2200      	movs	r2, #0
 8006764:	f7f9 ff48 	bl	80005f8 <__aeabi_dmul>
 8006768:	4b08      	ldr	r3, [pc, #32]	@ (800678c <_dtoa_r+0x58c>)
 800676a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800676e:	2200      	movs	r2, #0
 8006770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006774:	f7f9 ff40 	bl	80005f8 <__aeabi_dmul>
 8006778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800677c:	e7c4      	b.n	8006708 <_dtoa_r+0x508>
 800677e:	bf00      	nop
 8006780:	080085a8 	.word	0x080085a8
 8006784:	08008580 	.word	0x08008580
 8006788:	3ff00000 	.word	0x3ff00000
 800678c:	40240000 	.word	0x40240000
 8006790:	401c0000 	.word	0x401c0000
 8006794:	40140000 	.word	0x40140000
 8006798:	3fe00000 	.word	0x3fe00000
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	f7f9 ff2a 	bl	80005f8 <__aeabi_dmul>
 80067a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80067a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80067aa:	4656      	mov	r6, sl
 80067ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b0:	f7fa f9d2 	bl	8000b58 <__aeabi_d2iz>
 80067b4:	4605      	mov	r5, r0
 80067b6:	f7f9 feb5 	bl	8000524 <__aeabi_i2d>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067c2:	f7f9 fd61 	bl	8000288 <__aeabi_dsub>
 80067c6:	3530      	adds	r5, #48	@ 0x30
 80067c8:	f806 5b01 	strb.w	r5, [r6], #1
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	d124      	bne.n	8006826 <_dtoa_r+0x626>
 80067dc:	4baf      	ldr	r3, [pc, #700]	@ (8006a9c <_dtoa_r+0x89c>)
 80067de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80067e2:	f7f9 fd53 	bl	800028c <__adddf3>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ee:	f7fa f993 	bl	8000b18 <__aeabi_dcmpgt>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d163      	bne.n	80068be <_dtoa_r+0x6be>
 80067f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80067fa:	49a8      	ldr	r1, [pc, #672]	@ (8006a9c <_dtoa_r+0x89c>)
 80067fc:	2000      	movs	r0, #0
 80067fe:	f7f9 fd43 	bl	8000288 <__aeabi_dsub>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800680a:	f7fa f967 	bl	8000adc <__aeabi_dcmplt>
 800680e:	2800      	cmp	r0, #0
 8006810:	f43f af14 	beq.w	800663c <_dtoa_r+0x43c>
 8006814:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006816:	1e73      	subs	r3, r6, #1
 8006818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800681a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800681e:	2b30      	cmp	r3, #48	@ 0x30
 8006820:	d0f8      	beq.n	8006814 <_dtoa_r+0x614>
 8006822:	4647      	mov	r7, r8
 8006824:	e03b      	b.n	800689e <_dtoa_r+0x69e>
 8006826:	4b9e      	ldr	r3, [pc, #632]	@ (8006aa0 <_dtoa_r+0x8a0>)
 8006828:	f7f9 fee6 	bl	80005f8 <__aeabi_dmul>
 800682c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006830:	e7bc      	b.n	80067ac <_dtoa_r+0x5ac>
 8006832:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006836:	4656      	mov	r6, sl
 8006838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800683c:	4620      	mov	r0, r4
 800683e:	4629      	mov	r1, r5
 8006840:	f7fa f804 	bl	800084c <__aeabi_ddiv>
 8006844:	f7fa f988 	bl	8000b58 <__aeabi_d2iz>
 8006848:	4680      	mov	r8, r0
 800684a:	f7f9 fe6b 	bl	8000524 <__aeabi_i2d>
 800684e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006852:	f7f9 fed1 	bl	80005f8 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4620      	mov	r0, r4
 800685c:	4629      	mov	r1, r5
 800685e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006862:	f7f9 fd11 	bl	8000288 <__aeabi_dsub>
 8006866:	f806 4b01 	strb.w	r4, [r6], #1
 800686a:	9d03      	ldr	r5, [sp, #12]
 800686c:	eba6 040a 	sub.w	r4, r6, sl
 8006870:	42a5      	cmp	r5, r4
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	d133      	bne.n	80068e0 <_dtoa_r+0x6e0>
 8006878:	f7f9 fd08 	bl	800028c <__adddf3>
 800687c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
 8006884:	f7fa f948 	bl	8000b18 <__aeabi_dcmpgt>
 8006888:	b9c0      	cbnz	r0, 80068bc <_dtoa_r+0x6bc>
 800688a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7fa f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8006896:	b110      	cbz	r0, 800689e <_dtoa_r+0x69e>
 8006898:	f018 0f01 	tst.w	r8, #1
 800689c:	d10e      	bne.n	80068bc <_dtoa_r+0x6bc>
 800689e:	9902      	ldr	r1, [sp, #8]
 80068a0:	4648      	mov	r0, r9
 80068a2:	f000 fbbd 	bl	8007020 <_Bfree>
 80068a6:	2300      	movs	r3, #0
 80068a8:	7033      	strb	r3, [r6, #0]
 80068aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80068ac:	3701      	adds	r7, #1
 80068ae:	601f      	str	r7, [r3, #0]
 80068b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 824b 	beq.w	8006d4e <_dtoa_r+0xb4e>
 80068b8:	601e      	str	r6, [r3, #0]
 80068ba:	e248      	b.n	8006d4e <_dtoa_r+0xb4e>
 80068bc:	46b8      	mov	r8, r7
 80068be:	4633      	mov	r3, r6
 80068c0:	461e      	mov	r6, r3
 80068c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068c6:	2a39      	cmp	r2, #57	@ 0x39
 80068c8:	d106      	bne.n	80068d8 <_dtoa_r+0x6d8>
 80068ca:	459a      	cmp	sl, r3
 80068cc:	d1f8      	bne.n	80068c0 <_dtoa_r+0x6c0>
 80068ce:	2230      	movs	r2, #48	@ 0x30
 80068d0:	f108 0801 	add.w	r8, r8, #1
 80068d4:	f88a 2000 	strb.w	r2, [sl]
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	3201      	adds	r2, #1
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	e7a0      	b.n	8006822 <_dtoa_r+0x622>
 80068e0:	4b6f      	ldr	r3, [pc, #444]	@ (8006aa0 <_dtoa_r+0x8a0>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	f7f9 fe88 	bl	80005f8 <__aeabi_dmul>
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	f7fa f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d09f      	beq.n	8006838 <_dtoa_r+0x638>
 80068f8:	e7d1      	b.n	800689e <_dtoa_r+0x69e>
 80068fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	f000 80ea 	beq.w	8006ad6 <_dtoa_r+0x8d6>
 8006902:	9a07      	ldr	r2, [sp, #28]
 8006904:	2a01      	cmp	r2, #1
 8006906:	f300 80cd 	bgt.w	8006aa4 <_dtoa_r+0x8a4>
 800690a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800690c:	2a00      	cmp	r2, #0
 800690e:	f000 80c1 	beq.w	8006a94 <_dtoa_r+0x894>
 8006912:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006916:	9c08      	ldr	r4, [sp, #32]
 8006918:	9e00      	ldr	r6, [sp, #0]
 800691a:	9a00      	ldr	r2, [sp, #0]
 800691c:	441a      	add	r2, r3
 800691e:	9200      	str	r2, [sp, #0]
 8006920:	9a06      	ldr	r2, [sp, #24]
 8006922:	2101      	movs	r1, #1
 8006924:	441a      	add	r2, r3
 8006926:	4648      	mov	r0, r9
 8006928:	9206      	str	r2, [sp, #24]
 800692a:	f000 fc2d 	bl	8007188 <__i2b>
 800692e:	4605      	mov	r5, r0
 8006930:	b166      	cbz	r6, 800694c <_dtoa_r+0x74c>
 8006932:	9b06      	ldr	r3, [sp, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dd09      	ble.n	800694c <_dtoa_r+0x74c>
 8006938:	42b3      	cmp	r3, r6
 800693a:	9a00      	ldr	r2, [sp, #0]
 800693c:	bfa8      	it	ge
 800693e:	4633      	movge	r3, r6
 8006940:	1ad2      	subs	r2, r2, r3
 8006942:	9200      	str	r2, [sp, #0]
 8006944:	9a06      	ldr	r2, [sp, #24]
 8006946:	1af6      	subs	r6, r6, r3
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	9306      	str	r3, [sp, #24]
 800694c:	9b08      	ldr	r3, [sp, #32]
 800694e:	b30b      	cbz	r3, 8006994 <_dtoa_r+0x794>
 8006950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 80c6 	beq.w	8006ae4 <_dtoa_r+0x8e4>
 8006958:	2c00      	cmp	r4, #0
 800695a:	f000 80c0 	beq.w	8006ade <_dtoa_r+0x8de>
 800695e:	4629      	mov	r1, r5
 8006960:	4622      	mov	r2, r4
 8006962:	4648      	mov	r0, r9
 8006964:	f000 fcc8 	bl	80072f8 <__pow5mult>
 8006968:	9a02      	ldr	r2, [sp, #8]
 800696a:	4601      	mov	r1, r0
 800696c:	4605      	mov	r5, r0
 800696e:	4648      	mov	r0, r9
 8006970:	f000 fc20 	bl	80071b4 <__multiply>
 8006974:	9902      	ldr	r1, [sp, #8]
 8006976:	4680      	mov	r8, r0
 8006978:	4648      	mov	r0, r9
 800697a:	f000 fb51 	bl	8007020 <_Bfree>
 800697e:	9b08      	ldr	r3, [sp, #32]
 8006980:	1b1b      	subs	r3, r3, r4
 8006982:	9308      	str	r3, [sp, #32]
 8006984:	f000 80b1 	beq.w	8006aea <_dtoa_r+0x8ea>
 8006988:	9a08      	ldr	r2, [sp, #32]
 800698a:	4641      	mov	r1, r8
 800698c:	4648      	mov	r0, r9
 800698e:	f000 fcb3 	bl	80072f8 <__pow5mult>
 8006992:	9002      	str	r0, [sp, #8]
 8006994:	2101      	movs	r1, #1
 8006996:	4648      	mov	r0, r9
 8006998:	f000 fbf6 	bl	8007188 <__i2b>
 800699c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800699e:	4604      	mov	r4, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 81d8 	beq.w	8006d56 <_dtoa_r+0xb56>
 80069a6:	461a      	mov	r2, r3
 80069a8:	4601      	mov	r1, r0
 80069aa:	4648      	mov	r0, r9
 80069ac:	f000 fca4 	bl	80072f8 <__pow5mult>
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	4604      	mov	r4, r0
 80069b6:	f300 809f 	bgt.w	8006af8 <_dtoa_r+0x8f8>
 80069ba:	9b04      	ldr	r3, [sp, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 8097 	bne.w	8006af0 <_dtoa_r+0x8f0>
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 8093 	bne.w	8006af4 <_dtoa_r+0x8f4>
 80069ce:	9b05      	ldr	r3, [sp, #20]
 80069d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069d4:	0d1b      	lsrs	r3, r3, #20
 80069d6:	051b      	lsls	r3, r3, #20
 80069d8:	b133      	cbz	r3, 80069e8 <_dtoa_r+0x7e8>
 80069da:	9b00      	ldr	r3, [sp, #0]
 80069dc:	3301      	adds	r3, #1
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	9b06      	ldr	r3, [sp, #24]
 80069e2:	3301      	adds	r3, #1
 80069e4:	9306      	str	r3, [sp, #24]
 80069e6:	2301      	movs	r3, #1
 80069e8:	9308      	str	r3, [sp, #32]
 80069ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 81b8 	beq.w	8006d62 <_dtoa_r+0xb62>
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069f8:	6918      	ldr	r0, [r3, #16]
 80069fa:	f000 fb79 	bl	80070f0 <__hi0bits>
 80069fe:	f1c0 0020 	rsb	r0, r0, #32
 8006a02:	9b06      	ldr	r3, [sp, #24]
 8006a04:	4418      	add	r0, r3
 8006a06:	f010 001f 	ands.w	r0, r0, #31
 8006a0a:	f000 8082 	beq.w	8006b12 <_dtoa_r+0x912>
 8006a0e:	f1c0 0320 	rsb	r3, r0, #32
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	dd73      	ble.n	8006afe <_dtoa_r+0x8fe>
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	f1c0 001c 	rsb	r0, r0, #28
 8006a1c:	4403      	add	r3, r0
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	9b06      	ldr	r3, [sp, #24]
 8006a22:	4403      	add	r3, r0
 8006a24:	4406      	add	r6, r0
 8006a26:	9306      	str	r3, [sp, #24]
 8006a28:	9b00      	ldr	r3, [sp, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	dd05      	ble.n	8006a3a <_dtoa_r+0x83a>
 8006a2e:	9902      	ldr	r1, [sp, #8]
 8006a30:	461a      	mov	r2, r3
 8006a32:	4648      	mov	r0, r9
 8006a34:	f000 fcba 	bl	80073ac <__lshift>
 8006a38:	9002      	str	r0, [sp, #8]
 8006a3a:	9b06      	ldr	r3, [sp, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dd05      	ble.n	8006a4c <_dtoa_r+0x84c>
 8006a40:	4621      	mov	r1, r4
 8006a42:	461a      	mov	r2, r3
 8006a44:	4648      	mov	r0, r9
 8006a46:	f000 fcb1 	bl	80073ac <__lshift>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d061      	beq.n	8006b16 <_dtoa_r+0x916>
 8006a52:	9802      	ldr	r0, [sp, #8]
 8006a54:	4621      	mov	r1, r4
 8006a56:	f000 fd15 	bl	8007484 <__mcmp>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	da5b      	bge.n	8006b16 <_dtoa_r+0x916>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9902      	ldr	r1, [sp, #8]
 8006a62:	220a      	movs	r2, #10
 8006a64:	4648      	mov	r0, r9
 8006a66:	f000 fafd 	bl	8007064 <__multadd>
 8006a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6c:	9002      	str	r0, [sp, #8]
 8006a6e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8177 	beq.w	8006d66 <_dtoa_r+0xb66>
 8006a78:	4629      	mov	r1, r5
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	220a      	movs	r2, #10
 8006a7e:	4648      	mov	r0, r9
 8006a80:	f000 faf0 	bl	8007064 <__multadd>
 8006a84:	f1bb 0f00 	cmp.w	fp, #0
 8006a88:	4605      	mov	r5, r0
 8006a8a:	dc6f      	bgt.n	8006b6c <_dtoa_r+0x96c>
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	dc49      	bgt.n	8006b26 <_dtoa_r+0x926>
 8006a92:	e06b      	b.n	8006b6c <_dtoa_r+0x96c>
 8006a94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a9a:	e73c      	b.n	8006916 <_dtoa_r+0x716>
 8006a9c:	3fe00000 	.word	0x3fe00000
 8006aa0:	40240000 	.word	0x40240000
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	1e5c      	subs	r4, r3, #1
 8006aa8:	9b08      	ldr	r3, [sp, #32]
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	db09      	blt.n	8006ac2 <_dtoa_r+0x8c2>
 8006aae:	1b1c      	subs	r4, r3, r4
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f6bf af30 	bge.w	8006918 <_dtoa_r+0x718>
 8006ab8:	9b00      	ldr	r3, [sp, #0]
 8006aba:	9a03      	ldr	r2, [sp, #12]
 8006abc:	1a9e      	subs	r6, r3, r2
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e72b      	b.n	800691a <_dtoa_r+0x71a>
 8006ac2:	9b08      	ldr	r3, [sp, #32]
 8006ac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ac6:	9408      	str	r4, [sp, #32]
 8006ac8:	1ae3      	subs	r3, r4, r3
 8006aca:	441a      	add	r2, r3
 8006acc:	9e00      	ldr	r6, [sp, #0]
 8006ace:	9b03      	ldr	r3, [sp, #12]
 8006ad0:	920d      	str	r2, [sp, #52]	@ 0x34
 8006ad2:	2400      	movs	r4, #0
 8006ad4:	e721      	b.n	800691a <_dtoa_r+0x71a>
 8006ad6:	9c08      	ldr	r4, [sp, #32]
 8006ad8:	9e00      	ldr	r6, [sp, #0]
 8006ada:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006adc:	e728      	b.n	8006930 <_dtoa_r+0x730>
 8006ade:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006ae2:	e751      	b.n	8006988 <_dtoa_r+0x788>
 8006ae4:	9a08      	ldr	r2, [sp, #32]
 8006ae6:	9902      	ldr	r1, [sp, #8]
 8006ae8:	e750      	b.n	800698c <_dtoa_r+0x78c>
 8006aea:	f8cd 8008 	str.w	r8, [sp, #8]
 8006aee:	e751      	b.n	8006994 <_dtoa_r+0x794>
 8006af0:	2300      	movs	r3, #0
 8006af2:	e779      	b.n	80069e8 <_dtoa_r+0x7e8>
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	e777      	b.n	80069e8 <_dtoa_r+0x7e8>
 8006af8:	2300      	movs	r3, #0
 8006afa:	9308      	str	r3, [sp, #32]
 8006afc:	e779      	b.n	80069f2 <_dtoa_r+0x7f2>
 8006afe:	d093      	beq.n	8006a28 <_dtoa_r+0x828>
 8006b00:	9a00      	ldr	r2, [sp, #0]
 8006b02:	331c      	adds	r3, #28
 8006b04:	441a      	add	r2, r3
 8006b06:	9200      	str	r2, [sp, #0]
 8006b08:	9a06      	ldr	r2, [sp, #24]
 8006b0a:	441a      	add	r2, r3
 8006b0c:	441e      	add	r6, r3
 8006b0e:	9206      	str	r2, [sp, #24]
 8006b10:	e78a      	b.n	8006a28 <_dtoa_r+0x828>
 8006b12:	4603      	mov	r3, r0
 8006b14:	e7f4      	b.n	8006b00 <_dtoa_r+0x900>
 8006b16:	9b03      	ldr	r3, [sp, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	46b8      	mov	r8, r7
 8006b1c:	dc20      	bgt.n	8006b60 <_dtoa_r+0x960>
 8006b1e:	469b      	mov	fp, r3
 8006b20:	9b07      	ldr	r3, [sp, #28]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	dd1e      	ble.n	8006b64 <_dtoa_r+0x964>
 8006b26:	f1bb 0f00 	cmp.w	fp, #0
 8006b2a:	f47f adb1 	bne.w	8006690 <_dtoa_r+0x490>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	465b      	mov	r3, fp
 8006b32:	2205      	movs	r2, #5
 8006b34:	4648      	mov	r0, r9
 8006b36:	f000 fa95 	bl	8007064 <__multadd>
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	9802      	ldr	r0, [sp, #8]
 8006b40:	f000 fca0 	bl	8007484 <__mcmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f77f ada3 	ble.w	8006690 <_dtoa_r+0x490>
 8006b4a:	4656      	mov	r6, sl
 8006b4c:	2331      	movs	r3, #49	@ 0x31
 8006b4e:	f806 3b01 	strb.w	r3, [r6], #1
 8006b52:	f108 0801 	add.w	r8, r8, #1
 8006b56:	e59f      	b.n	8006698 <_dtoa_r+0x498>
 8006b58:	9c03      	ldr	r4, [sp, #12]
 8006b5a:	46b8      	mov	r8, r7
 8006b5c:	4625      	mov	r5, r4
 8006b5e:	e7f4      	b.n	8006b4a <_dtoa_r+0x94a>
 8006b60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8101 	beq.w	8006d6e <_dtoa_r+0xb6e>
 8006b6c:	2e00      	cmp	r6, #0
 8006b6e:	dd05      	ble.n	8006b7c <_dtoa_r+0x97c>
 8006b70:	4629      	mov	r1, r5
 8006b72:	4632      	mov	r2, r6
 8006b74:	4648      	mov	r0, r9
 8006b76:	f000 fc19 	bl	80073ac <__lshift>
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d05c      	beq.n	8006c3c <_dtoa_r+0xa3c>
 8006b82:	6869      	ldr	r1, [r5, #4]
 8006b84:	4648      	mov	r0, r9
 8006b86:	f000 fa0b 	bl	8006fa0 <_Balloc>
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	b928      	cbnz	r0, 8006b9a <_dtoa_r+0x99a>
 8006b8e:	4b82      	ldr	r3, [pc, #520]	@ (8006d98 <_dtoa_r+0xb98>)
 8006b90:	4602      	mov	r2, r0
 8006b92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b96:	f7ff bb4a 	b.w	800622e <_dtoa_r+0x2e>
 8006b9a:	692a      	ldr	r2, [r5, #16]
 8006b9c:	3202      	adds	r2, #2
 8006b9e:	0092      	lsls	r2, r2, #2
 8006ba0:	f105 010c 	add.w	r1, r5, #12
 8006ba4:	300c      	adds	r0, #12
 8006ba6:	f000 ffa3 	bl	8007af0 <memcpy>
 8006baa:	2201      	movs	r2, #1
 8006bac:	4631      	mov	r1, r6
 8006bae:	4648      	mov	r0, r9
 8006bb0:	f000 fbfc 	bl	80073ac <__lshift>
 8006bb4:	f10a 0301 	add.w	r3, sl, #1
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	eb0a 030b 	add.w	r3, sl, fp
 8006bbe:	9308      	str	r3, [sp, #32]
 8006bc0:	9b04      	ldr	r3, [sp, #16]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	462f      	mov	r7, r5
 8006bc8:	9306      	str	r3, [sp, #24]
 8006bca:	4605      	mov	r5, r0
 8006bcc:	9b00      	ldr	r3, [sp, #0]
 8006bce:	9802      	ldr	r0, [sp, #8]
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f103 3bff 	add.w	fp, r3, #4294967295
 8006bd6:	f7ff fa8a 	bl	80060ee <quorem>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	3330      	adds	r3, #48	@ 0x30
 8006bde:	9003      	str	r0, [sp, #12]
 8006be0:	4639      	mov	r1, r7
 8006be2:	9802      	ldr	r0, [sp, #8]
 8006be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be6:	f000 fc4d 	bl	8007484 <__mcmp>
 8006bea:	462a      	mov	r2, r5
 8006bec:	9004      	str	r0, [sp, #16]
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4648      	mov	r0, r9
 8006bf2:	f000 fc63 	bl	80074bc <__mdiff>
 8006bf6:	68c2      	ldr	r2, [r0, #12]
 8006bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	bb02      	cbnz	r2, 8006c40 <_dtoa_r+0xa40>
 8006bfe:	4601      	mov	r1, r0
 8006c00:	9802      	ldr	r0, [sp, #8]
 8006c02:	f000 fc3f 	bl	8007484 <__mcmp>
 8006c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4648      	mov	r0, r9
 8006c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c12:	f000 fa05 	bl	8007020 <_Bfree>
 8006c16:	9b07      	ldr	r3, [sp, #28]
 8006c18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c1a:	9e00      	ldr	r6, [sp, #0]
 8006c1c:	ea42 0103 	orr.w	r1, r2, r3
 8006c20:	9b06      	ldr	r3, [sp, #24]
 8006c22:	4319      	orrs	r1, r3
 8006c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c26:	d10d      	bne.n	8006c44 <_dtoa_r+0xa44>
 8006c28:	2b39      	cmp	r3, #57	@ 0x39
 8006c2a:	d027      	beq.n	8006c7c <_dtoa_r+0xa7c>
 8006c2c:	9a04      	ldr	r2, [sp, #16]
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	dd01      	ble.n	8006c36 <_dtoa_r+0xa36>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	3331      	adds	r3, #49	@ 0x31
 8006c36:	f88b 3000 	strb.w	r3, [fp]
 8006c3a:	e52e      	b.n	800669a <_dtoa_r+0x49a>
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	e7b9      	b.n	8006bb4 <_dtoa_r+0x9b4>
 8006c40:	2201      	movs	r2, #1
 8006c42:	e7e2      	b.n	8006c0a <_dtoa_r+0xa0a>
 8006c44:	9904      	ldr	r1, [sp, #16]
 8006c46:	2900      	cmp	r1, #0
 8006c48:	db04      	blt.n	8006c54 <_dtoa_r+0xa54>
 8006c4a:	9807      	ldr	r0, [sp, #28]
 8006c4c:	4301      	orrs	r1, r0
 8006c4e:	9806      	ldr	r0, [sp, #24]
 8006c50:	4301      	orrs	r1, r0
 8006c52:	d120      	bne.n	8006c96 <_dtoa_r+0xa96>
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	ddee      	ble.n	8006c36 <_dtoa_r+0xa36>
 8006c58:	9902      	ldr	r1, [sp, #8]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	4648      	mov	r0, r9
 8006c60:	f000 fba4 	bl	80073ac <__lshift>
 8006c64:	4621      	mov	r1, r4
 8006c66:	9002      	str	r0, [sp, #8]
 8006c68:	f000 fc0c 	bl	8007484 <__mcmp>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	9b00      	ldr	r3, [sp, #0]
 8006c70:	dc02      	bgt.n	8006c78 <_dtoa_r+0xa78>
 8006c72:	d1e0      	bne.n	8006c36 <_dtoa_r+0xa36>
 8006c74:	07da      	lsls	r2, r3, #31
 8006c76:	d5de      	bpl.n	8006c36 <_dtoa_r+0xa36>
 8006c78:	2b39      	cmp	r3, #57	@ 0x39
 8006c7a:	d1da      	bne.n	8006c32 <_dtoa_r+0xa32>
 8006c7c:	2339      	movs	r3, #57	@ 0x39
 8006c7e:	f88b 3000 	strb.w	r3, [fp]
 8006c82:	4633      	mov	r3, r6
 8006c84:	461e      	mov	r6, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c8c:	2a39      	cmp	r2, #57	@ 0x39
 8006c8e:	d04e      	beq.n	8006d2e <_dtoa_r+0xb2e>
 8006c90:	3201      	adds	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e501      	b.n	800669a <_dtoa_r+0x49a>
 8006c96:	2a00      	cmp	r2, #0
 8006c98:	dd03      	ble.n	8006ca2 <_dtoa_r+0xaa2>
 8006c9a:	2b39      	cmp	r3, #57	@ 0x39
 8006c9c:	d0ee      	beq.n	8006c7c <_dtoa_r+0xa7c>
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	e7c9      	b.n	8006c36 <_dtoa_r+0xa36>
 8006ca2:	9a00      	ldr	r2, [sp, #0]
 8006ca4:	9908      	ldr	r1, [sp, #32]
 8006ca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006caa:	428a      	cmp	r2, r1
 8006cac:	d028      	beq.n	8006d00 <_dtoa_r+0xb00>
 8006cae:	9902      	ldr	r1, [sp, #8]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	4648      	mov	r0, r9
 8006cb6:	f000 f9d5 	bl	8007064 <__multadd>
 8006cba:	42af      	cmp	r7, r5
 8006cbc:	9002      	str	r0, [sp, #8]
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	f04f 020a 	mov.w	r2, #10
 8006cc6:	4639      	mov	r1, r7
 8006cc8:	4648      	mov	r0, r9
 8006cca:	d107      	bne.n	8006cdc <_dtoa_r+0xadc>
 8006ccc:	f000 f9ca 	bl	8007064 <__multadd>
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	9b00      	ldr	r3, [sp, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	e777      	b.n	8006bcc <_dtoa_r+0x9cc>
 8006cdc:	f000 f9c2 	bl	8007064 <__multadd>
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	4648      	mov	r0, r9
 8006cea:	f000 f9bb 	bl	8007064 <__multadd>
 8006cee:	4605      	mov	r5, r0
 8006cf0:	e7f0      	b.n	8006cd4 <_dtoa_r+0xad4>
 8006cf2:	f1bb 0f00 	cmp.w	fp, #0
 8006cf6:	bfcc      	ite	gt
 8006cf8:	465e      	movgt	r6, fp
 8006cfa:	2601      	movle	r6, #1
 8006cfc:	4456      	add	r6, sl
 8006cfe:	2700      	movs	r7, #0
 8006d00:	9902      	ldr	r1, [sp, #8]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	2201      	movs	r2, #1
 8006d06:	4648      	mov	r0, r9
 8006d08:	f000 fb50 	bl	80073ac <__lshift>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	9002      	str	r0, [sp, #8]
 8006d10:	f000 fbb8 	bl	8007484 <__mcmp>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	dcb4      	bgt.n	8006c82 <_dtoa_r+0xa82>
 8006d18:	d102      	bne.n	8006d20 <_dtoa_r+0xb20>
 8006d1a:	9b00      	ldr	r3, [sp, #0]
 8006d1c:	07db      	lsls	r3, r3, #31
 8006d1e:	d4b0      	bmi.n	8006c82 <_dtoa_r+0xa82>
 8006d20:	4633      	mov	r3, r6
 8006d22:	461e      	mov	r6, r3
 8006d24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d28:	2a30      	cmp	r2, #48	@ 0x30
 8006d2a:	d0fa      	beq.n	8006d22 <_dtoa_r+0xb22>
 8006d2c:	e4b5      	b.n	800669a <_dtoa_r+0x49a>
 8006d2e:	459a      	cmp	sl, r3
 8006d30:	d1a8      	bne.n	8006c84 <_dtoa_r+0xa84>
 8006d32:	2331      	movs	r3, #49	@ 0x31
 8006d34:	f108 0801 	add.w	r8, r8, #1
 8006d38:	f88a 3000 	strb.w	r3, [sl]
 8006d3c:	e4ad      	b.n	800669a <_dtoa_r+0x49a>
 8006d3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d9c <_dtoa_r+0xb9c>
 8006d44:	b11b      	cbz	r3, 8006d4e <_dtoa_r+0xb4e>
 8006d46:	f10a 0308 	add.w	r3, sl, #8
 8006d4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	4650      	mov	r0, sl
 8006d50:	b017      	add	sp, #92	@ 0x5c
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	9b07      	ldr	r3, [sp, #28]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	f77f ae2e 	ble.w	80069ba <_dtoa_r+0x7ba>
 8006d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d60:	9308      	str	r3, [sp, #32]
 8006d62:	2001      	movs	r0, #1
 8006d64:	e64d      	b.n	8006a02 <_dtoa_r+0x802>
 8006d66:	f1bb 0f00 	cmp.w	fp, #0
 8006d6a:	f77f aed9 	ble.w	8006b20 <_dtoa_r+0x920>
 8006d6e:	4656      	mov	r6, sl
 8006d70:	9802      	ldr	r0, [sp, #8]
 8006d72:	4621      	mov	r1, r4
 8006d74:	f7ff f9bb 	bl	80060ee <quorem>
 8006d78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8006d80:	eba6 020a 	sub.w	r2, r6, sl
 8006d84:	4593      	cmp	fp, r2
 8006d86:	ddb4      	ble.n	8006cf2 <_dtoa_r+0xaf2>
 8006d88:	9902      	ldr	r1, [sp, #8]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	220a      	movs	r2, #10
 8006d8e:	4648      	mov	r0, r9
 8006d90:	f000 f968 	bl	8007064 <__multadd>
 8006d94:	9002      	str	r0, [sp, #8]
 8006d96:	e7eb      	b.n	8006d70 <_dtoa_r+0xb70>
 8006d98:	080084ad 	.word	0x080084ad
 8006d9c:	08008431 	.word	0x08008431

08006da0 <_free_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4605      	mov	r5, r0
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d041      	beq.n	8006e2c <_free_r+0x8c>
 8006da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dac:	1f0c      	subs	r4, r1, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bfb8      	it	lt
 8006db2:	18e4      	addlt	r4, r4, r3
 8006db4:	f000 f8e8 	bl	8006f88 <__malloc_lock>
 8006db8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e30 <_free_r+0x90>)
 8006dba:	6813      	ldr	r3, [r2, #0]
 8006dbc:	b933      	cbnz	r3, 8006dcc <_free_r+0x2c>
 8006dbe:	6063      	str	r3, [r4, #4]
 8006dc0:	6014      	str	r4, [r2, #0]
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc8:	f000 b8e4 	b.w	8006f94 <__malloc_unlock>
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	d908      	bls.n	8006de2 <_free_r+0x42>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	1821      	adds	r1, r4, r0
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	bf01      	itttt	eq
 8006dd8:	6819      	ldreq	r1, [r3, #0]
 8006dda:	685b      	ldreq	r3, [r3, #4]
 8006ddc:	1809      	addeq	r1, r1, r0
 8006dde:	6021      	streq	r1, [r4, #0]
 8006de0:	e7ed      	b.n	8006dbe <_free_r+0x1e>
 8006de2:	461a      	mov	r2, r3
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b10b      	cbz	r3, 8006dec <_free_r+0x4c>
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	d9fa      	bls.n	8006de2 <_free_r+0x42>
 8006dec:	6811      	ldr	r1, [r2, #0]
 8006dee:	1850      	adds	r0, r2, r1
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d10b      	bne.n	8006e0c <_free_r+0x6c>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	4401      	add	r1, r0
 8006df8:	1850      	adds	r0, r2, r1
 8006dfa:	4283      	cmp	r3, r0
 8006dfc:	6011      	str	r1, [r2, #0]
 8006dfe:	d1e0      	bne.n	8006dc2 <_free_r+0x22>
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	6053      	str	r3, [r2, #4]
 8006e06:	4408      	add	r0, r1
 8006e08:	6010      	str	r0, [r2, #0]
 8006e0a:	e7da      	b.n	8006dc2 <_free_r+0x22>
 8006e0c:	d902      	bls.n	8006e14 <_free_r+0x74>
 8006e0e:	230c      	movs	r3, #12
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	e7d6      	b.n	8006dc2 <_free_r+0x22>
 8006e14:	6820      	ldr	r0, [r4, #0]
 8006e16:	1821      	adds	r1, r4, r0
 8006e18:	428b      	cmp	r3, r1
 8006e1a:	bf04      	itt	eq
 8006e1c:	6819      	ldreq	r1, [r3, #0]
 8006e1e:	685b      	ldreq	r3, [r3, #4]
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	bf04      	itt	eq
 8006e24:	1809      	addeq	r1, r1, r0
 8006e26:	6021      	streq	r1, [r4, #0]
 8006e28:	6054      	str	r4, [r2, #4]
 8006e2a:	e7ca      	b.n	8006dc2 <_free_r+0x22>
 8006e2c:	bd38      	pop	{r3, r4, r5, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000730 	.word	0x20000730

08006e34 <malloc>:
 8006e34:	4b02      	ldr	r3, [pc, #8]	@ (8006e40 <malloc+0xc>)
 8006e36:	4601      	mov	r1, r0
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f000 b825 	b.w	8006e88 <_malloc_r>
 8006e3e:	bf00      	nop
 8006e40:	20000018 	.word	0x20000018

08006e44 <sbrk_aligned>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4e0f      	ldr	r6, [pc, #60]	@ (8006e84 <sbrk_aligned+0x40>)
 8006e48:	460c      	mov	r4, r1
 8006e4a:	6831      	ldr	r1, [r6, #0]
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	b911      	cbnz	r1, 8006e56 <sbrk_aligned+0x12>
 8006e50:	f000 fe3e 	bl	8007ad0 <_sbrk_r>
 8006e54:	6030      	str	r0, [r6, #0]
 8006e56:	4621      	mov	r1, r4
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 fe39 	bl	8007ad0 <_sbrk_r>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	d103      	bne.n	8006e6a <sbrk_aligned+0x26>
 8006e62:	f04f 34ff 	mov.w	r4, #4294967295
 8006e66:	4620      	mov	r0, r4
 8006e68:	bd70      	pop	{r4, r5, r6, pc}
 8006e6a:	1cc4      	adds	r4, r0, #3
 8006e6c:	f024 0403 	bic.w	r4, r4, #3
 8006e70:	42a0      	cmp	r0, r4
 8006e72:	d0f8      	beq.n	8006e66 <sbrk_aligned+0x22>
 8006e74:	1a21      	subs	r1, r4, r0
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fe2a 	bl	8007ad0 <_sbrk_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d1f2      	bne.n	8006e66 <sbrk_aligned+0x22>
 8006e80:	e7ef      	b.n	8006e62 <sbrk_aligned+0x1e>
 8006e82:	bf00      	nop
 8006e84:	2000072c 	.word	0x2000072c

08006e88 <_malloc_r>:
 8006e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	1ccd      	adds	r5, r1, #3
 8006e8e:	f025 0503 	bic.w	r5, r5, #3
 8006e92:	3508      	adds	r5, #8
 8006e94:	2d0c      	cmp	r5, #12
 8006e96:	bf38      	it	cc
 8006e98:	250c      	movcc	r5, #12
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	db01      	blt.n	8006ea4 <_malloc_r+0x1c>
 8006ea0:	42a9      	cmp	r1, r5
 8006ea2:	d904      	bls.n	8006eae <_malloc_r+0x26>
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	6033      	str	r3, [r6, #0]
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f84 <_malloc_r+0xfc>
 8006eb2:	f000 f869 	bl	8006f88 <__malloc_lock>
 8006eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eba:	461c      	mov	r4, r3
 8006ebc:	bb44      	cbnz	r4, 8006f10 <_malloc_r+0x88>
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f7ff ffbf 	bl	8006e44 <sbrk_aligned>
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	4604      	mov	r4, r0
 8006eca:	d158      	bne.n	8006f7e <_malloc_r+0xf6>
 8006ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8006ed0:	4627      	mov	r7, r4
 8006ed2:	2f00      	cmp	r7, #0
 8006ed4:	d143      	bne.n	8006f5e <_malloc_r+0xd6>
 8006ed6:	2c00      	cmp	r4, #0
 8006ed8:	d04b      	beq.n	8006f72 <_malloc_r+0xea>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	4639      	mov	r1, r7
 8006ede:	4630      	mov	r0, r6
 8006ee0:	eb04 0903 	add.w	r9, r4, r3
 8006ee4:	f000 fdf4 	bl	8007ad0 <_sbrk_r>
 8006ee8:	4581      	cmp	r9, r0
 8006eea:	d142      	bne.n	8006f72 <_malloc_r+0xea>
 8006eec:	6821      	ldr	r1, [r4, #0]
 8006eee:	1a6d      	subs	r5, r5, r1
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff ffa6 	bl	8006e44 <sbrk_aligned>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d03a      	beq.n	8006f72 <_malloc_r+0xea>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	442b      	add	r3, r5
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	f8d8 3000 	ldr.w	r3, [r8]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	bb62      	cbnz	r2, 8006f64 <_malloc_r+0xdc>
 8006f0a:	f8c8 7000 	str.w	r7, [r8]
 8006f0e:	e00f      	b.n	8006f30 <_malloc_r+0xa8>
 8006f10:	6822      	ldr	r2, [r4, #0]
 8006f12:	1b52      	subs	r2, r2, r5
 8006f14:	d420      	bmi.n	8006f58 <_malloc_r+0xd0>
 8006f16:	2a0b      	cmp	r2, #11
 8006f18:	d917      	bls.n	8006f4a <_malloc_r+0xc2>
 8006f1a:	1961      	adds	r1, r4, r5
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	6025      	str	r5, [r4, #0]
 8006f20:	bf18      	it	ne
 8006f22:	6059      	strne	r1, [r3, #4]
 8006f24:	6863      	ldr	r3, [r4, #4]
 8006f26:	bf08      	it	eq
 8006f28:	f8c8 1000 	streq.w	r1, [r8]
 8006f2c:	5162      	str	r2, [r4, r5]
 8006f2e:	604b      	str	r3, [r1, #4]
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 f82f 	bl	8006f94 <__malloc_unlock>
 8006f36:	f104 000b 	add.w	r0, r4, #11
 8006f3a:	1d23      	adds	r3, r4, #4
 8006f3c:	f020 0007 	bic.w	r0, r0, #7
 8006f40:	1ac2      	subs	r2, r0, r3
 8006f42:	bf1c      	itt	ne
 8006f44:	1a1b      	subne	r3, r3, r0
 8006f46:	50a3      	strne	r3, [r4, r2]
 8006f48:	e7af      	b.n	8006eaa <_malloc_r+0x22>
 8006f4a:	6862      	ldr	r2, [r4, #4]
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	bf0c      	ite	eq
 8006f50:	f8c8 2000 	streq.w	r2, [r8]
 8006f54:	605a      	strne	r2, [r3, #4]
 8006f56:	e7eb      	b.n	8006f30 <_malloc_r+0xa8>
 8006f58:	4623      	mov	r3, r4
 8006f5a:	6864      	ldr	r4, [r4, #4]
 8006f5c:	e7ae      	b.n	8006ebc <_malloc_r+0x34>
 8006f5e:	463c      	mov	r4, r7
 8006f60:	687f      	ldr	r7, [r7, #4]
 8006f62:	e7b6      	b.n	8006ed2 <_malloc_r+0x4a>
 8006f64:	461a      	mov	r2, r3
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d1fb      	bne.n	8006f64 <_malloc_r+0xdc>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	6053      	str	r3, [r2, #4]
 8006f70:	e7de      	b.n	8006f30 <_malloc_r+0xa8>
 8006f72:	230c      	movs	r3, #12
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	4630      	mov	r0, r6
 8006f78:	f000 f80c 	bl	8006f94 <__malloc_unlock>
 8006f7c:	e794      	b.n	8006ea8 <_malloc_r+0x20>
 8006f7e:	6005      	str	r5, [r0, #0]
 8006f80:	e7d6      	b.n	8006f30 <_malloc_r+0xa8>
 8006f82:	bf00      	nop
 8006f84:	20000730 	.word	0x20000730

08006f88 <__malloc_lock>:
 8006f88:	4801      	ldr	r0, [pc, #4]	@ (8006f90 <__malloc_lock+0x8>)
 8006f8a:	f7ff b8ae 	b.w	80060ea <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	20000728 	.word	0x20000728

08006f94 <__malloc_unlock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	@ (8006f9c <__malloc_unlock+0x8>)
 8006f96:	f7ff b8a9 	b.w	80060ec <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	20000728 	.word	0x20000728

08006fa0 <_Balloc>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	69c6      	ldr	r6, [r0, #28]
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	460d      	mov	r5, r1
 8006fa8:	b976      	cbnz	r6, 8006fc8 <_Balloc+0x28>
 8006faa:	2010      	movs	r0, #16
 8006fac:	f7ff ff42 	bl	8006e34 <malloc>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	61e0      	str	r0, [r4, #28]
 8006fb4:	b920      	cbnz	r0, 8006fc0 <_Balloc+0x20>
 8006fb6:	4b18      	ldr	r3, [pc, #96]	@ (8007018 <_Balloc+0x78>)
 8006fb8:	4818      	ldr	r0, [pc, #96]	@ (800701c <_Balloc+0x7c>)
 8006fba:	216b      	movs	r1, #107	@ 0x6b
 8006fbc:	f000 fda6 	bl	8007b0c <__assert_func>
 8006fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fc4:	6006      	str	r6, [r0, #0]
 8006fc6:	60c6      	str	r6, [r0, #12]
 8006fc8:	69e6      	ldr	r6, [r4, #28]
 8006fca:	68f3      	ldr	r3, [r6, #12]
 8006fcc:	b183      	cbz	r3, 8006ff0 <_Balloc+0x50>
 8006fce:	69e3      	ldr	r3, [r4, #28]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fd6:	b9b8      	cbnz	r0, 8007008 <_Balloc+0x68>
 8006fd8:	2101      	movs	r1, #1
 8006fda:	fa01 f605 	lsl.w	r6, r1, r5
 8006fde:	1d72      	adds	r2, r6, #5
 8006fe0:	0092      	lsls	r2, r2, #2
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 fdb0 	bl	8007b48 <_calloc_r>
 8006fe8:	b160      	cbz	r0, 8007004 <_Balloc+0x64>
 8006fea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fee:	e00e      	b.n	800700e <_Balloc+0x6e>
 8006ff0:	2221      	movs	r2, #33	@ 0x21
 8006ff2:	2104      	movs	r1, #4
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 fda7 	bl	8007b48 <_calloc_r>
 8006ffa:	69e3      	ldr	r3, [r4, #28]
 8006ffc:	60f0      	str	r0, [r6, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e4      	bne.n	8006fce <_Balloc+0x2e>
 8007004:	2000      	movs	r0, #0
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	6802      	ldr	r2, [r0, #0]
 800700a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800700e:	2300      	movs	r3, #0
 8007010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007014:	e7f7      	b.n	8007006 <_Balloc+0x66>
 8007016:	bf00      	nop
 8007018:	0800843e 	.word	0x0800843e
 800701c:	080084be 	.word	0x080084be

08007020 <_Bfree>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	69c6      	ldr	r6, [r0, #28]
 8007024:	4605      	mov	r5, r0
 8007026:	460c      	mov	r4, r1
 8007028:	b976      	cbnz	r6, 8007048 <_Bfree+0x28>
 800702a:	2010      	movs	r0, #16
 800702c:	f7ff ff02 	bl	8006e34 <malloc>
 8007030:	4602      	mov	r2, r0
 8007032:	61e8      	str	r0, [r5, #28]
 8007034:	b920      	cbnz	r0, 8007040 <_Bfree+0x20>
 8007036:	4b09      	ldr	r3, [pc, #36]	@ (800705c <_Bfree+0x3c>)
 8007038:	4809      	ldr	r0, [pc, #36]	@ (8007060 <_Bfree+0x40>)
 800703a:	218f      	movs	r1, #143	@ 0x8f
 800703c:	f000 fd66 	bl	8007b0c <__assert_func>
 8007040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007044:	6006      	str	r6, [r0, #0]
 8007046:	60c6      	str	r6, [r0, #12]
 8007048:	b13c      	cbz	r4, 800705a <_Bfree+0x3a>
 800704a:	69eb      	ldr	r3, [r5, #28]
 800704c:	6862      	ldr	r2, [r4, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007054:	6021      	str	r1, [r4, #0]
 8007056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	0800843e 	.word	0x0800843e
 8007060:	080084be 	.word	0x080084be

08007064 <__multadd>:
 8007064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007068:	690d      	ldr	r5, [r1, #16]
 800706a:	4607      	mov	r7, r0
 800706c:	460c      	mov	r4, r1
 800706e:	461e      	mov	r6, r3
 8007070:	f101 0c14 	add.w	ip, r1, #20
 8007074:	2000      	movs	r0, #0
 8007076:	f8dc 3000 	ldr.w	r3, [ip]
 800707a:	b299      	uxth	r1, r3
 800707c:	fb02 6101 	mla	r1, r2, r1, r6
 8007080:	0c1e      	lsrs	r6, r3, #16
 8007082:	0c0b      	lsrs	r3, r1, #16
 8007084:	fb02 3306 	mla	r3, r2, r6, r3
 8007088:	b289      	uxth	r1, r1
 800708a:	3001      	adds	r0, #1
 800708c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007090:	4285      	cmp	r5, r0
 8007092:	f84c 1b04 	str.w	r1, [ip], #4
 8007096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800709a:	dcec      	bgt.n	8007076 <__multadd+0x12>
 800709c:	b30e      	cbz	r6, 80070e2 <__multadd+0x7e>
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc19      	bgt.n	80070d8 <__multadd+0x74>
 80070a4:	6861      	ldr	r1, [r4, #4]
 80070a6:	4638      	mov	r0, r7
 80070a8:	3101      	adds	r1, #1
 80070aa:	f7ff ff79 	bl	8006fa0 <_Balloc>
 80070ae:	4680      	mov	r8, r0
 80070b0:	b928      	cbnz	r0, 80070be <__multadd+0x5a>
 80070b2:	4602      	mov	r2, r0
 80070b4:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <__multadd+0x84>)
 80070b6:	480d      	ldr	r0, [pc, #52]	@ (80070ec <__multadd+0x88>)
 80070b8:	21ba      	movs	r1, #186	@ 0xba
 80070ba:	f000 fd27 	bl	8007b0c <__assert_func>
 80070be:	6922      	ldr	r2, [r4, #16]
 80070c0:	3202      	adds	r2, #2
 80070c2:	f104 010c 	add.w	r1, r4, #12
 80070c6:	0092      	lsls	r2, r2, #2
 80070c8:	300c      	adds	r0, #12
 80070ca:	f000 fd11 	bl	8007af0 <memcpy>
 80070ce:	4621      	mov	r1, r4
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ffa5 	bl	8007020 <_Bfree>
 80070d6:	4644      	mov	r4, r8
 80070d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070dc:	3501      	adds	r5, #1
 80070de:	615e      	str	r6, [r3, #20]
 80070e0:	6125      	str	r5, [r4, #16]
 80070e2:	4620      	mov	r0, r4
 80070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e8:	080084ad 	.word	0x080084ad
 80070ec:	080084be 	.word	0x080084be

080070f0 <__hi0bits>:
 80070f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070f4:	4603      	mov	r3, r0
 80070f6:	bf36      	itet	cc
 80070f8:	0403      	lslcc	r3, r0, #16
 80070fa:	2000      	movcs	r0, #0
 80070fc:	2010      	movcc	r0, #16
 80070fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007102:	bf3c      	itt	cc
 8007104:	021b      	lslcc	r3, r3, #8
 8007106:	3008      	addcc	r0, #8
 8007108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800710c:	bf3c      	itt	cc
 800710e:	011b      	lslcc	r3, r3, #4
 8007110:	3004      	addcc	r0, #4
 8007112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007116:	bf3c      	itt	cc
 8007118:	009b      	lslcc	r3, r3, #2
 800711a:	3002      	addcc	r0, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	db05      	blt.n	800712c <__hi0bits+0x3c>
 8007120:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007124:	f100 0001 	add.w	r0, r0, #1
 8007128:	bf08      	it	eq
 800712a:	2020      	moveq	r0, #32
 800712c:	4770      	bx	lr

0800712e <__lo0bits>:
 800712e:	6803      	ldr	r3, [r0, #0]
 8007130:	4602      	mov	r2, r0
 8007132:	f013 0007 	ands.w	r0, r3, #7
 8007136:	d00b      	beq.n	8007150 <__lo0bits+0x22>
 8007138:	07d9      	lsls	r1, r3, #31
 800713a:	d421      	bmi.n	8007180 <__lo0bits+0x52>
 800713c:	0798      	lsls	r0, r3, #30
 800713e:	bf49      	itett	mi
 8007140:	085b      	lsrmi	r3, r3, #1
 8007142:	089b      	lsrpl	r3, r3, #2
 8007144:	2001      	movmi	r0, #1
 8007146:	6013      	strmi	r3, [r2, #0]
 8007148:	bf5c      	itt	pl
 800714a:	6013      	strpl	r3, [r2, #0]
 800714c:	2002      	movpl	r0, #2
 800714e:	4770      	bx	lr
 8007150:	b299      	uxth	r1, r3
 8007152:	b909      	cbnz	r1, 8007158 <__lo0bits+0x2a>
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	2010      	movs	r0, #16
 8007158:	b2d9      	uxtb	r1, r3
 800715a:	b909      	cbnz	r1, 8007160 <__lo0bits+0x32>
 800715c:	3008      	adds	r0, #8
 800715e:	0a1b      	lsrs	r3, r3, #8
 8007160:	0719      	lsls	r1, r3, #28
 8007162:	bf04      	itt	eq
 8007164:	091b      	lsreq	r3, r3, #4
 8007166:	3004      	addeq	r0, #4
 8007168:	0799      	lsls	r1, r3, #30
 800716a:	bf04      	itt	eq
 800716c:	089b      	lsreq	r3, r3, #2
 800716e:	3002      	addeq	r0, #2
 8007170:	07d9      	lsls	r1, r3, #31
 8007172:	d403      	bmi.n	800717c <__lo0bits+0x4e>
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	f100 0001 	add.w	r0, r0, #1
 800717a:	d003      	beq.n	8007184 <__lo0bits+0x56>
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	4770      	bx	lr
 8007180:	2000      	movs	r0, #0
 8007182:	4770      	bx	lr
 8007184:	2020      	movs	r0, #32
 8007186:	4770      	bx	lr

08007188 <__i2b>:
 8007188:	b510      	push	{r4, lr}
 800718a:	460c      	mov	r4, r1
 800718c:	2101      	movs	r1, #1
 800718e:	f7ff ff07 	bl	8006fa0 <_Balloc>
 8007192:	4602      	mov	r2, r0
 8007194:	b928      	cbnz	r0, 80071a2 <__i2b+0x1a>
 8007196:	4b05      	ldr	r3, [pc, #20]	@ (80071ac <__i2b+0x24>)
 8007198:	4805      	ldr	r0, [pc, #20]	@ (80071b0 <__i2b+0x28>)
 800719a:	f240 1145 	movw	r1, #325	@ 0x145
 800719e:	f000 fcb5 	bl	8007b0c <__assert_func>
 80071a2:	2301      	movs	r3, #1
 80071a4:	6144      	str	r4, [r0, #20]
 80071a6:	6103      	str	r3, [r0, #16]
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	bf00      	nop
 80071ac:	080084ad 	.word	0x080084ad
 80071b0:	080084be 	.word	0x080084be

080071b4 <__multiply>:
 80071b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	4617      	mov	r7, r2
 80071ba:	690a      	ldr	r2, [r1, #16]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bfa8      	it	ge
 80071c2:	463b      	movge	r3, r7
 80071c4:	4689      	mov	r9, r1
 80071c6:	bfa4      	itt	ge
 80071c8:	460f      	movge	r7, r1
 80071ca:	4699      	movge	r9, r3
 80071cc:	693d      	ldr	r5, [r7, #16]
 80071ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	eb05 060a 	add.w	r6, r5, sl
 80071da:	42b3      	cmp	r3, r6
 80071dc:	b085      	sub	sp, #20
 80071de:	bfb8      	it	lt
 80071e0:	3101      	addlt	r1, #1
 80071e2:	f7ff fedd 	bl	8006fa0 <_Balloc>
 80071e6:	b930      	cbnz	r0, 80071f6 <__multiply+0x42>
 80071e8:	4602      	mov	r2, r0
 80071ea:	4b41      	ldr	r3, [pc, #260]	@ (80072f0 <__multiply+0x13c>)
 80071ec:	4841      	ldr	r0, [pc, #260]	@ (80072f4 <__multiply+0x140>)
 80071ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071f2:	f000 fc8b 	bl	8007b0c <__assert_func>
 80071f6:	f100 0414 	add.w	r4, r0, #20
 80071fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80071fe:	4623      	mov	r3, r4
 8007200:	2200      	movs	r2, #0
 8007202:	4573      	cmp	r3, lr
 8007204:	d320      	bcc.n	8007248 <__multiply+0x94>
 8007206:	f107 0814 	add.w	r8, r7, #20
 800720a:	f109 0114 	add.w	r1, r9, #20
 800720e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007212:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007216:	9302      	str	r3, [sp, #8]
 8007218:	1beb      	subs	r3, r5, r7
 800721a:	3b15      	subs	r3, #21
 800721c:	f023 0303 	bic.w	r3, r3, #3
 8007220:	3304      	adds	r3, #4
 8007222:	3715      	adds	r7, #21
 8007224:	42bd      	cmp	r5, r7
 8007226:	bf38      	it	cc
 8007228:	2304      	movcc	r3, #4
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	9b02      	ldr	r3, [sp, #8]
 800722e:	9103      	str	r1, [sp, #12]
 8007230:	428b      	cmp	r3, r1
 8007232:	d80c      	bhi.n	800724e <__multiply+0x9a>
 8007234:	2e00      	cmp	r6, #0
 8007236:	dd03      	ble.n	8007240 <__multiply+0x8c>
 8007238:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800723c:	2b00      	cmp	r3, #0
 800723e:	d055      	beq.n	80072ec <__multiply+0x138>
 8007240:	6106      	str	r6, [r0, #16]
 8007242:	b005      	add	sp, #20
 8007244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007248:	f843 2b04 	str.w	r2, [r3], #4
 800724c:	e7d9      	b.n	8007202 <__multiply+0x4e>
 800724e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007252:	f1ba 0f00 	cmp.w	sl, #0
 8007256:	d01f      	beq.n	8007298 <__multiply+0xe4>
 8007258:	46c4      	mov	ip, r8
 800725a:	46a1      	mov	r9, r4
 800725c:	2700      	movs	r7, #0
 800725e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007262:	f8d9 3000 	ldr.w	r3, [r9]
 8007266:	fa1f fb82 	uxth.w	fp, r2
 800726a:	b29b      	uxth	r3, r3
 800726c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007270:	443b      	add	r3, r7
 8007272:	f8d9 7000 	ldr.w	r7, [r9]
 8007276:	0c12      	lsrs	r2, r2, #16
 8007278:	0c3f      	lsrs	r7, r7, #16
 800727a:	fb0a 7202 	mla	r2, sl, r2, r7
 800727e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007282:	b29b      	uxth	r3, r3
 8007284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007288:	4565      	cmp	r5, ip
 800728a:	f849 3b04 	str.w	r3, [r9], #4
 800728e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007292:	d8e4      	bhi.n	800725e <__multiply+0xaa>
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	50e7      	str	r7, [r4, r3]
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800729e:	3104      	adds	r1, #4
 80072a0:	f1b9 0f00 	cmp.w	r9, #0
 80072a4:	d020      	beq.n	80072e8 <__multiply+0x134>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	4647      	mov	r7, r8
 80072aa:	46a4      	mov	ip, r4
 80072ac:	f04f 0a00 	mov.w	sl, #0
 80072b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80072b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80072b8:	fb09 220b 	mla	r2, r9, fp, r2
 80072bc:	4452      	add	r2, sl
 80072be:	b29b      	uxth	r3, r3
 80072c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072c4:	f84c 3b04 	str.w	r3, [ip], #4
 80072c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80072cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80072d4:	fb09 330a 	mla	r3, r9, sl, r3
 80072d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80072dc:	42bd      	cmp	r5, r7
 80072de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072e2:	d8e5      	bhi.n	80072b0 <__multiply+0xfc>
 80072e4:	9a01      	ldr	r2, [sp, #4]
 80072e6:	50a3      	str	r3, [r4, r2]
 80072e8:	3404      	adds	r4, #4
 80072ea:	e79f      	b.n	800722c <__multiply+0x78>
 80072ec:	3e01      	subs	r6, #1
 80072ee:	e7a1      	b.n	8007234 <__multiply+0x80>
 80072f0:	080084ad 	.word	0x080084ad
 80072f4:	080084be 	.word	0x080084be

080072f8 <__pow5mult>:
 80072f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072fc:	4615      	mov	r5, r2
 80072fe:	f012 0203 	ands.w	r2, r2, #3
 8007302:	4607      	mov	r7, r0
 8007304:	460e      	mov	r6, r1
 8007306:	d007      	beq.n	8007318 <__pow5mult+0x20>
 8007308:	4c25      	ldr	r4, [pc, #148]	@ (80073a0 <__pow5mult+0xa8>)
 800730a:	3a01      	subs	r2, #1
 800730c:	2300      	movs	r3, #0
 800730e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007312:	f7ff fea7 	bl	8007064 <__multadd>
 8007316:	4606      	mov	r6, r0
 8007318:	10ad      	asrs	r5, r5, #2
 800731a:	d03d      	beq.n	8007398 <__pow5mult+0xa0>
 800731c:	69fc      	ldr	r4, [r7, #28]
 800731e:	b97c      	cbnz	r4, 8007340 <__pow5mult+0x48>
 8007320:	2010      	movs	r0, #16
 8007322:	f7ff fd87 	bl	8006e34 <malloc>
 8007326:	4602      	mov	r2, r0
 8007328:	61f8      	str	r0, [r7, #28]
 800732a:	b928      	cbnz	r0, 8007338 <__pow5mult+0x40>
 800732c:	4b1d      	ldr	r3, [pc, #116]	@ (80073a4 <__pow5mult+0xac>)
 800732e:	481e      	ldr	r0, [pc, #120]	@ (80073a8 <__pow5mult+0xb0>)
 8007330:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007334:	f000 fbea 	bl	8007b0c <__assert_func>
 8007338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800733c:	6004      	str	r4, [r0, #0]
 800733e:	60c4      	str	r4, [r0, #12]
 8007340:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007348:	b94c      	cbnz	r4, 800735e <__pow5mult+0x66>
 800734a:	f240 2171 	movw	r1, #625	@ 0x271
 800734e:	4638      	mov	r0, r7
 8007350:	f7ff ff1a 	bl	8007188 <__i2b>
 8007354:	2300      	movs	r3, #0
 8007356:	f8c8 0008 	str.w	r0, [r8, #8]
 800735a:	4604      	mov	r4, r0
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	f04f 0900 	mov.w	r9, #0
 8007362:	07eb      	lsls	r3, r5, #31
 8007364:	d50a      	bpl.n	800737c <__pow5mult+0x84>
 8007366:	4631      	mov	r1, r6
 8007368:	4622      	mov	r2, r4
 800736a:	4638      	mov	r0, r7
 800736c:	f7ff ff22 	bl	80071b4 <__multiply>
 8007370:	4631      	mov	r1, r6
 8007372:	4680      	mov	r8, r0
 8007374:	4638      	mov	r0, r7
 8007376:	f7ff fe53 	bl	8007020 <_Bfree>
 800737a:	4646      	mov	r6, r8
 800737c:	106d      	asrs	r5, r5, #1
 800737e:	d00b      	beq.n	8007398 <__pow5mult+0xa0>
 8007380:	6820      	ldr	r0, [r4, #0]
 8007382:	b938      	cbnz	r0, 8007394 <__pow5mult+0x9c>
 8007384:	4622      	mov	r2, r4
 8007386:	4621      	mov	r1, r4
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff ff13 	bl	80071b4 <__multiply>
 800738e:	6020      	str	r0, [r4, #0]
 8007390:	f8c0 9000 	str.w	r9, [r0]
 8007394:	4604      	mov	r4, r0
 8007396:	e7e4      	b.n	8007362 <__pow5mult+0x6a>
 8007398:	4630      	mov	r0, r6
 800739a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800739e:	bf00      	nop
 80073a0:	08008570 	.word	0x08008570
 80073a4:	0800843e 	.word	0x0800843e
 80073a8:	080084be 	.word	0x080084be

080073ac <__lshift>:
 80073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	460c      	mov	r4, r1
 80073b2:	6849      	ldr	r1, [r1, #4]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ba:	68a3      	ldr	r3, [r4, #8]
 80073bc:	4607      	mov	r7, r0
 80073be:	4691      	mov	r9, r2
 80073c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073c4:	f108 0601 	add.w	r6, r8, #1
 80073c8:	42b3      	cmp	r3, r6
 80073ca:	db0b      	blt.n	80073e4 <__lshift+0x38>
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff fde7 	bl	8006fa0 <_Balloc>
 80073d2:	4605      	mov	r5, r0
 80073d4:	b948      	cbnz	r0, 80073ea <__lshift+0x3e>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4b28      	ldr	r3, [pc, #160]	@ (800747c <__lshift+0xd0>)
 80073da:	4829      	ldr	r0, [pc, #164]	@ (8007480 <__lshift+0xd4>)
 80073dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073e0:	f000 fb94 	bl	8007b0c <__assert_func>
 80073e4:	3101      	adds	r1, #1
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	e7ee      	b.n	80073c8 <__lshift+0x1c>
 80073ea:	2300      	movs	r3, #0
 80073ec:	f100 0114 	add.w	r1, r0, #20
 80073f0:	f100 0210 	add.w	r2, r0, #16
 80073f4:	4618      	mov	r0, r3
 80073f6:	4553      	cmp	r3, sl
 80073f8:	db33      	blt.n	8007462 <__lshift+0xb6>
 80073fa:	6920      	ldr	r0, [r4, #16]
 80073fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007400:	f104 0314 	add.w	r3, r4, #20
 8007404:	f019 091f 	ands.w	r9, r9, #31
 8007408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800740c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007410:	d02b      	beq.n	800746a <__lshift+0xbe>
 8007412:	f1c9 0e20 	rsb	lr, r9, #32
 8007416:	468a      	mov	sl, r1
 8007418:	2200      	movs	r2, #0
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	fa00 f009 	lsl.w	r0, r0, r9
 8007420:	4310      	orrs	r0, r2
 8007422:	f84a 0b04 	str.w	r0, [sl], #4
 8007426:	f853 2b04 	ldr.w	r2, [r3], #4
 800742a:	459c      	cmp	ip, r3
 800742c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007430:	d8f3      	bhi.n	800741a <__lshift+0x6e>
 8007432:	ebac 0304 	sub.w	r3, ip, r4
 8007436:	3b15      	subs	r3, #21
 8007438:	f023 0303 	bic.w	r3, r3, #3
 800743c:	3304      	adds	r3, #4
 800743e:	f104 0015 	add.w	r0, r4, #21
 8007442:	4560      	cmp	r0, ip
 8007444:	bf88      	it	hi
 8007446:	2304      	movhi	r3, #4
 8007448:	50ca      	str	r2, [r1, r3]
 800744a:	b10a      	cbz	r2, 8007450 <__lshift+0xa4>
 800744c:	f108 0602 	add.w	r6, r8, #2
 8007450:	3e01      	subs	r6, #1
 8007452:	4638      	mov	r0, r7
 8007454:	612e      	str	r6, [r5, #16]
 8007456:	4621      	mov	r1, r4
 8007458:	f7ff fde2 	bl	8007020 <_Bfree>
 800745c:	4628      	mov	r0, r5
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	f842 0f04 	str.w	r0, [r2, #4]!
 8007466:	3301      	adds	r3, #1
 8007468:	e7c5      	b.n	80073f6 <__lshift+0x4a>
 800746a:	3904      	subs	r1, #4
 800746c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007470:	f841 2f04 	str.w	r2, [r1, #4]!
 8007474:	459c      	cmp	ip, r3
 8007476:	d8f9      	bhi.n	800746c <__lshift+0xc0>
 8007478:	e7ea      	b.n	8007450 <__lshift+0xa4>
 800747a:	bf00      	nop
 800747c:	080084ad 	.word	0x080084ad
 8007480:	080084be 	.word	0x080084be

08007484 <__mcmp>:
 8007484:	690a      	ldr	r2, [r1, #16]
 8007486:	4603      	mov	r3, r0
 8007488:	6900      	ldr	r0, [r0, #16]
 800748a:	1a80      	subs	r0, r0, r2
 800748c:	b530      	push	{r4, r5, lr}
 800748e:	d10e      	bne.n	80074ae <__mcmp+0x2a>
 8007490:	3314      	adds	r3, #20
 8007492:	3114      	adds	r1, #20
 8007494:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007498:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800749c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074a4:	4295      	cmp	r5, r2
 80074a6:	d003      	beq.n	80074b0 <__mcmp+0x2c>
 80074a8:	d205      	bcs.n	80074b6 <__mcmp+0x32>
 80074aa:	f04f 30ff 	mov.w	r0, #4294967295
 80074ae:	bd30      	pop	{r4, r5, pc}
 80074b0:	42a3      	cmp	r3, r4
 80074b2:	d3f3      	bcc.n	800749c <__mcmp+0x18>
 80074b4:	e7fb      	b.n	80074ae <__mcmp+0x2a>
 80074b6:	2001      	movs	r0, #1
 80074b8:	e7f9      	b.n	80074ae <__mcmp+0x2a>
	...

080074bc <__mdiff>:
 80074bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	4689      	mov	r9, r1
 80074c2:	4606      	mov	r6, r0
 80074c4:	4611      	mov	r1, r2
 80074c6:	4648      	mov	r0, r9
 80074c8:	4614      	mov	r4, r2
 80074ca:	f7ff ffdb 	bl	8007484 <__mcmp>
 80074ce:	1e05      	subs	r5, r0, #0
 80074d0:	d112      	bne.n	80074f8 <__mdiff+0x3c>
 80074d2:	4629      	mov	r1, r5
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7ff fd63 	bl	8006fa0 <_Balloc>
 80074da:	4602      	mov	r2, r0
 80074dc:	b928      	cbnz	r0, 80074ea <__mdiff+0x2e>
 80074de:	4b3f      	ldr	r3, [pc, #252]	@ (80075dc <__mdiff+0x120>)
 80074e0:	f240 2137 	movw	r1, #567	@ 0x237
 80074e4:	483e      	ldr	r0, [pc, #248]	@ (80075e0 <__mdiff+0x124>)
 80074e6:	f000 fb11 	bl	8007b0c <__assert_func>
 80074ea:	2301      	movs	r3, #1
 80074ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074f0:	4610      	mov	r0, r2
 80074f2:	b003      	add	sp, #12
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	bfbc      	itt	lt
 80074fa:	464b      	movlt	r3, r9
 80074fc:	46a1      	movlt	r9, r4
 80074fe:	4630      	mov	r0, r6
 8007500:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007504:	bfba      	itte	lt
 8007506:	461c      	movlt	r4, r3
 8007508:	2501      	movlt	r5, #1
 800750a:	2500      	movge	r5, #0
 800750c:	f7ff fd48 	bl	8006fa0 <_Balloc>
 8007510:	4602      	mov	r2, r0
 8007512:	b918      	cbnz	r0, 800751c <__mdiff+0x60>
 8007514:	4b31      	ldr	r3, [pc, #196]	@ (80075dc <__mdiff+0x120>)
 8007516:	f240 2145 	movw	r1, #581	@ 0x245
 800751a:	e7e3      	b.n	80074e4 <__mdiff+0x28>
 800751c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007520:	6926      	ldr	r6, [r4, #16]
 8007522:	60c5      	str	r5, [r0, #12]
 8007524:	f109 0310 	add.w	r3, r9, #16
 8007528:	f109 0514 	add.w	r5, r9, #20
 800752c:	f104 0e14 	add.w	lr, r4, #20
 8007530:	f100 0b14 	add.w	fp, r0, #20
 8007534:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007538:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	46d9      	mov	r9, fp
 8007540:	f04f 0c00 	mov.w	ip, #0
 8007544:	9b01      	ldr	r3, [sp, #4]
 8007546:	f85e 0b04 	ldr.w	r0, [lr], #4
 800754a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	fa1f f38a 	uxth.w	r3, sl
 8007554:	4619      	mov	r1, r3
 8007556:	b283      	uxth	r3, r0
 8007558:	1acb      	subs	r3, r1, r3
 800755a:	0c00      	lsrs	r0, r0, #16
 800755c:	4463      	add	r3, ip
 800755e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007562:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007566:	b29b      	uxth	r3, r3
 8007568:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800756c:	4576      	cmp	r6, lr
 800756e:	f849 3b04 	str.w	r3, [r9], #4
 8007572:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007576:	d8e5      	bhi.n	8007544 <__mdiff+0x88>
 8007578:	1b33      	subs	r3, r6, r4
 800757a:	3b15      	subs	r3, #21
 800757c:	f023 0303 	bic.w	r3, r3, #3
 8007580:	3415      	adds	r4, #21
 8007582:	3304      	adds	r3, #4
 8007584:	42a6      	cmp	r6, r4
 8007586:	bf38      	it	cc
 8007588:	2304      	movcc	r3, #4
 800758a:	441d      	add	r5, r3
 800758c:	445b      	add	r3, fp
 800758e:	461e      	mov	r6, r3
 8007590:	462c      	mov	r4, r5
 8007592:	4544      	cmp	r4, r8
 8007594:	d30e      	bcc.n	80075b4 <__mdiff+0xf8>
 8007596:	f108 0103 	add.w	r1, r8, #3
 800759a:	1b49      	subs	r1, r1, r5
 800759c:	f021 0103 	bic.w	r1, r1, #3
 80075a0:	3d03      	subs	r5, #3
 80075a2:	45a8      	cmp	r8, r5
 80075a4:	bf38      	it	cc
 80075a6:	2100      	movcc	r1, #0
 80075a8:	440b      	add	r3, r1
 80075aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075ae:	b191      	cbz	r1, 80075d6 <__mdiff+0x11a>
 80075b0:	6117      	str	r7, [r2, #16]
 80075b2:	e79d      	b.n	80074f0 <__mdiff+0x34>
 80075b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80075b8:	46e6      	mov	lr, ip
 80075ba:	0c08      	lsrs	r0, r1, #16
 80075bc:	fa1c fc81 	uxtah	ip, ip, r1
 80075c0:	4471      	add	r1, lr
 80075c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80075c6:	b289      	uxth	r1, r1
 80075c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075cc:	f846 1b04 	str.w	r1, [r6], #4
 80075d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075d4:	e7dd      	b.n	8007592 <__mdiff+0xd6>
 80075d6:	3f01      	subs	r7, #1
 80075d8:	e7e7      	b.n	80075aa <__mdiff+0xee>
 80075da:	bf00      	nop
 80075dc:	080084ad 	.word	0x080084ad
 80075e0:	080084be 	.word	0x080084be

080075e4 <__d2b>:
 80075e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075e8:	460f      	mov	r7, r1
 80075ea:	2101      	movs	r1, #1
 80075ec:	ec59 8b10 	vmov	r8, r9, d0
 80075f0:	4616      	mov	r6, r2
 80075f2:	f7ff fcd5 	bl	8006fa0 <_Balloc>
 80075f6:	4604      	mov	r4, r0
 80075f8:	b930      	cbnz	r0, 8007608 <__d2b+0x24>
 80075fa:	4602      	mov	r2, r0
 80075fc:	4b23      	ldr	r3, [pc, #140]	@ (800768c <__d2b+0xa8>)
 80075fe:	4824      	ldr	r0, [pc, #144]	@ (8007690 <__d2b+0xac>)
 8007600:	f240 310f 	movw	r1, #783	@ 0x30f
 8007604:	f000 fa82 	bl	8007b0c <__assert_func>
 8007608:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800760c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007610:	b10d      	cbz	r5, 8007616 <__d2b+0x32>
 8007612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	f1b8 0300 	subs.w	r3, r8, #0
 800761c:	d023      	beq.n	8007666 <__d2b+0x82>
 800761e:	4668      	mov	r0, sp
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	f7ff fd84 	bl	800712e <__lo0bits>
 8007626:	e9dd 1200 	ldrd	r1, r2, [sp]
 800762a:	b1d0      	cbz	r0, 8007662 <__d2b+0x7e>
 800762c:	f1c0 0320 	rsb	r3, r0, #32
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	430b      	orrs	r3, r1
 8007636:	40c2      	lsrs	r2, r0
 8007638:	6163      	str	r3, [r4, #20]
 800763a:	9201      	str	r2, [sp, #4]
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	61a3      	str	r3, [r4, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf0c      	ite	eq
 8007644:	2201      	moveq	r2, #1
 8007646:	2202      	movne	r2, #2
 8007648:	6122      	str	r2, [r4, #16]
 800764a:	b1a5      	cbz	r5, 8007676 <__d2b+0x92>
 800764c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007650:	4405      	add	r5, r0
 8007652:	603d      	str	r5, [r7, #0]
 8007654:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007658:	6030      	str	r0, [r6, #0]
 800765a:	4620      	mov	r0, r4
 800765c:	b003      	add	sp, #12
 800765e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007662:	6161      	str	r1, [r4, #20]
 8007664:	e7ea      	b.n	800763c <__d2b+0x58>
 8007666:	a801      	add	r0, sp, #4
 8007668:	f7ff fd61 	bl	800712e <__lo0bits>
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	3020      	adds	r0, #32
 8007672:	2201      	movs	r2, #1
 8007674:	e7e8      	b.n	8007648 <__d2b+0x64>
 8007676:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800767a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800767e:	6038      	str	r0, [r7, #0]
 8007680:	6918      	ldr	r0, [r3, #16]
 8007682:	f7ff fd35 	bl	80070f0 <__hi0bits>
 8007686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800768a:	e7e5      	b.n	8007658 <__d2b+0x74>
 800768c:	080084ad 	.word	0x080084ad
 8007690:	080084be 	.word	0x080084be

08007694 <__ssputs_r>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	688e      	ldr	r6, [r1, #8]
 800769a:	461f      	mov	r7, r3
 800769c:	42be      	cmp	r6, r7
 800769e:	680b      	ldr	r3, [r1, #0]
 80076a0:	4682      	mov	sl, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	4690      	mov	r8, r2
 80076a6:	d82d      	bhi.n	8007704 <__ssputs_r+0x70>
 80076a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076b0:	d026      	beq.n	8007700 <__ssputs_r+0x6c>
 80076b2:	6965      	ldr	r5, [r4, #20]
 80076b4:	6909      	ldr	r1, [r1, #16]
 80076b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076ba:	eba3 0901 	sub.w	r9, r3, r1
 80076be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076c2:	1c7b      	adds	r3, r7, #1
 80076c4:	444b      	add	r3, r9
 80076c6:	106d      	asrs	r5, r5, #1
 80076c8:	429d      	cmp	r5, r3
 80076ca:	bf38      	it	cc
 80076cc:	461d      	movcc	r5, r3
 80076ce:	0553      	lsls	r3, r2, #21
 80076d0:	d527      	bpl.n	8007722 <__ssputs_r+0x8e>
 80076d2:	4629      	mov	r1, r5
 80076d4:	f7ff fbd8 	bl	8006e88 <_malloc_r>
 80076d8:	4606      	mov	r6, r0
 80076da:	b360      	cbz	r0, 8007736 <__ssputs_r+0xa2>
 80076dc:	6921      	ldr	r1, [r4, #16]
 80076de:	464a      	mov	r2, r9
 80076e0:	f000 fa06 	bl	8007af0 <memcpy>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	6126      	str	r6, [r4, #16]
 80076f2:	6165      	str	r5, [r4, #20]
 80076f4:	444e      	add	r6, r9
 80076f6:	eba5 0509 	sub.w	r5, r5, r9
 80076fa:	6026      	str	r6, [r4, #0]
 80076fc:	60a5      	str	r5, [r4, #8]
 80076fe:	463e      	mov	r6, r7
 8007700:	42be      	cmp	r6, r7
 8007702:	d900      	bls.n	8007706 <__ssputs_r+0x72>
 8007704:	463e      	mov	r6, r7
 8007706:	6820      	ldr	r0, [r4, #0]
 8007708:	4632      	mov	r2, r6
 800770a:	4641      	mov	r1, r8
 800770c:	f000 f9c6 	bl	8007a9c <memmove>
 8007710:	68a3      	ldr	r3, [r4, #8]
 8007712:	1b9b      	subs	r3, r3, r6
 8007714:	60a3      	str	r3, [r4, #8]
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	4433      	add	r3, r6
 800771a:	6023      	str	r3, [r4, #0]
 800771c:	2000      	movs	r0, #0
 800771e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007722:	462a      	mov	r2, r5
 8007724:	f000 fa36 	bl	8007b94 <_realloc_r>
 8007728:	4606      	mov	r6, r0
 800772a:	2800      	cmp	r0, #0
 800772c:	d1e0      	bne.n	80076f0 <__ssputs_r+0x5c>
 800772e:	6921      	ldr	r1, [r4, #16]
 8007730:	4650      	mov	r0, sl
 8007732:	f7ff fb35 	bl	8006da0 <_free_r>
 8007736:	230c      	movs	r3, #12
 8007738:	f8ca 3000 	str.w	r3, [sl]
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	f04f 30ff 	mov.w	r0, #4294967295
 8007748:	e7e9      	b.n	800771e <__ssputs_r+0x8a>
	...

0800774c <_svfiprintf_r>:
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	4698      	mov	r8, r3
 8007752:	898b      	ldrh	r3, [r1, #12]
 8007754:	061b      	lsls	r3, r3, #24
 8007756:	b09d      	sub	sp, #116	@ 0x74
 8007758:	4607      	mov	r7, r0
 800775a:	460d      	mov	r5, r1
 800775c:	4614      	mov	r4, r2
 800775e:	d510      	bpl.n	8007782 <_svfiprintf_r+0x36>
 8007760:	690b      	ldr	r3, [r1, #16]
 8007762:	b973      	cbnz	r3, 8007782 <_svfiprintf_r+0x36>
 8007764:	2140      	movs	r1, #64	@ 0x40
 8007766:	f7ff fb8f 	bl	8006e88 <_malloc_r>
 800776a:	6028      	str	r0, [r5, #0]
 800776c:	6128      	str	r0, [r5, #16]
 800776e:	b930      	cbnz	r0, 800777e <_svfiprintf_r+0x32>
 8007770:	230c      	movs	r3, #12
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	f04f 30ff 	mov.w	r0, #4294967295
 8007778:	b01d      	add	sp, #116	@ 0x74
 800777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	2340      	movs	r3, #64	@ 0x40
 8007780:	616b      	str	r3, [r5, #20]
 8007782:	2300      	movs	r3, #0
 8007784:	9309      	str	r3, [sp, #36]	@ 0x24
 8007786:	2320      	movs	r3, #32
 8007788:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800778c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007790:	2330      	movs	r3, #48	@ 0x30
 8007792:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007930 <_svfiprintf_r+0x1e4>
 8007796:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800779a:	f04f 0901 	mov.w	r9, #1
 800779e:	4623      	mov	r3, r4
 80077a0:	469a      	mov	sl, r3
 80077a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a6:	b10a      	cbz	r2, 80077ac <_svfiprintf_r+0x60>
 80077a8:	2a25      	cmp	r2, #37	@ 0x25
 80077aa:	d1f9      	bne.n	80077a0 <_svfiprintf_r+0x54>
 80077ac:	ebba 0b04 	subs.w	fp, sl, r4
 80077b0:	d00b      	beq.n	80077ca <_svfiprintf_r+0x7e>
 80077b2:	465b      	mov	r3, fp
 80077b4:	4622      	mov	r2, r4
 80077b6:	4629      	mov	r1, r5
 80077b8:	4638      	mov	r0, r7
 80077ba:	f7ff ff6b 	bl	8007694 <__ssputs_r>
 80077be:	3001      	adds	r0, #1
 80077c0:	f000 80a7 	beq.w	8007912 <_svfiprintf_r+0x1c6>
 80077c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077c6:	445a      	add	r2, fp
 80077c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80077ca:	f89a 3000 	ldrb.w	r3, [sl]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 809f 	beq.w	8007912 <_svfiprintf_r+0x1c6>
 80077d4:	2300      	movs	r3, #0
 80077d6:	f04f 32ff 	mov.w	r2, #4294967295
 80077da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077de:	f10a 0a01 	add.w	sl, sl, #1
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	9307      	str	r3, [sp, #28]
 80077e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80077ec:	4654      	mov	r4, sl
 80077ee:	2205      	movs	r2, #5
 80077f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f4:	484e      	ldr	r0, [pc, #312]	@ (8007930 <_svfiprintf_r+0x1e4>)
 80077f6:	f7f8 fceb 	bl	80001d0 <memchr>
 80077fa:	9a04      	ldr	r2, [sp, #16]
 80077fc:	b9d8      	cbnz	r0, 8007836 <_svfiprintf_r+0xea>
 80077fe:	06d0      	lsls	r0, r2, #27
 8007800:	bf44      	itt	mi
 8007802:	2320      	movmi	r3, #32
 8007804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007808:	0711      	lsls	r1, r2, #28
 800780a:	bf44      	itt	mi
 800780c:	232b      	movmi	r3, #43	@ 0x2b
 800780e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007812:	f89a 3000 	ldrb.w	r3, [sl]
 8007816:	2b2a      	cmp	r3, #42	@ 0x2a
 8007818:	d015      	beq.n	8007846 <_svfiprintf_r+0xfa>
 800781a:	9a07      	ldr	r2, [sp, #28]
 800781c:	4654      	mov	r4, sl
 800781e:	2000      	movs	r0, #0
 8007820:	f04f 0c0a 	mov.w	ip, #10
 8007824:	4621      	mov	r1, r4
 8007826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800782a:	3b30      	subs	r3, #48	@ 0x30
 800782c:	2b09      	cmp	r3, #9
 800782e:	d94b      	bls.n	80078c8 <_svfiprintf_r+0x17c>
 8007830:	b1b0      	cbz	r0, 8007860 <_svfiprintf_r+0x114>
 8007832:	9207      	str	r2, [sp, #28]
 8007834:	e014      	b.n	8007860 <_svfiprintf_r+0x114>
 8007836:	eba0 0308 	sub.w	r3, r0, r8
 800783a:	fa09 f303 	lsl.w	r3, r9, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	46a2      	mov	sl, r4
 8007844:	e7d2      	b.n	80077ec <_svfiprintf_r+0xa0>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	1d19      	adds	r1, r3, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	9103      	str	r1, [sp, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfbb      	ittet	lt
 8007852:	425b      	neglt	r3, r3
 8007854:	f042 0202 	orrlt.w	r2, r2, #2
 8007858:	9307      	strge	r3, [sp, #28]
 800785a:	9307      	strlt	r3, [sp, #28]
 800785c:	bfb8      	it	lt
 800785e:	9204      	strlt	r2, [sp, #16]
 8007860:	7823      	ldrb	r3, [r4, #0]
 8007862:	2b2e      	cmp	r3, #46	@ 0x2e
 8007864:	d10a      	bne.n	800787c <_svfiprintf_r+0x130>
 8007866:	7863      	ldrb	r3, [r4, #1]
 8007868:	2b2a      	cmp	r3, #42	@ 0x2a
 800786a:	d132      	bne.n	80078d2 <_svfiprintf_r+0x186>
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	1d1a      	adds	r2, r3, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	9203      	str	r2, [sp, #12]
 8007874:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007878:	3402      	adds	r4, #2
 800787a:	9305      	str	r3, [sp, #20]
 800787c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007940 <_svfiprintf_r+0x1f4>
 8007880:	7821      	ldrb	r1, [r4, #0]
 8007882:	2203      	movs	r2, #3
 8007884:	4650      	mov	r0, sl
 8007886:	f7f8 fca3 	bl	80001d0 <memchr>
 800788a:	b138      	cbz	r0, 800789c <_svfiprintf_r+0x150>
 800788c:	9b04      	ldr	r3, [sp, #16]
 800788e:	eba0 000a 	sub.w	r0, r0, sl
 8007892:	2240      	movs	r2, #64	@ 0x40
 8007894:	4082      	lsls	r2, r0
 8007896:	4313      	orrs	r3, r2
 8007898:	3401      	adds	r4, #1
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a0:	4824      	ldr	r0, [pc, #144]	@ (8007934 <_svfiprintf_r+0x1e8>)
 80078a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078a6:	2206      	movs	r2, #6
 80078a8:	f7f8 fc92 	bl	80001d0 <memchr>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d036      	beq.n	800791e <_svfiprintf_r+0x1d2>
 80078b0:	4b21      	ldr	r3, [pc, #132]	@ (8007938 <_svfiprintf_r+0x1ec>)
 80078b2:	bb1b      	cbnz	r3, 80078fc <_svfiprintf_r+0x1b0>
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	3307      	adds	r3, #7
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	3308      	adds	r3, #8
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c2:	4433      	add	r3, r6
 80078c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c6:	e76a      	b.n	800779e <_svfiprintf_r+0x52>
 80078c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078cc:	460c      	mov	r4, r1
 80078ce:	2001      	movs	r0, #1
 80078d0:	e7a8      	b.n	8007824 <_svfiprintf_r+0xd8>
 80078d2:	2300      	movs	r3, #0
 80078d4:	3401      	adds	r4, #1
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	4619      	mov	r1, r3
 80078da:	f04f 0c0a 	mov.w	ip, #10
 80078de:	4620      	mov	r0, r4
 80078e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e4:	3a30      	subs	r2, #48	@ 0x30
 80078e6:	2a09      	cmp	r2, #9
 80078e8:	d903      	bls.n	80078f2 <_svfiprintf_r+0x1a6>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0c6      	beq.n	800787c <_svfiprintf_r+0x130>
 80078ee:	9105      	str	r1, [sp, #20]
 80078f0:	e7c4      	b.n	800787c <_svfiprintf_r+0x130>
 80078f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f6:	4604      	mov	r4, r0
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7f0      	b.n	80078de <_svfiprintf_r+0x192>
 80078fc:	ab03      	add	r3, sp, #12
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	462a      	mov	r2, r5
 8007902:	4b0e      	ldr	r3, [pc, #56]	@ (800793c <_svfiprintf_r+0x1f0>)
 8007904:	a904      	add	r1, sp, #16
 8007906:	4638      	mov	r0, r7
 8007908:	f7fd fe58 	bl	80055bc <_printf_float>
 800790c:	1c42      	adds	r2, r0, #1
 800790e:	4606      	mov	r6, r0
 8007910:	d1d6      	bne.n	80078c0 <_svfiprintf_r+0x174>
 8007912:	89ab      	ldrh	r3, [r5, #12]
 8007914:	065b      	lsls	r3, r3, #25
 8007916:	f53f af2d 	bmi.w	8007774 <_svfiprintf_r+0x28>
 800791a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800791c:	e72c      	b.n	8007778 <_svfiprintf_r+0x2c>
 800791e:	ab03      	add	r3, sp, #12
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	462a      	mov	r2, r5
 8007924:	4b05      	ldr	r3, [pc, #20]	@ (800793c <_svfiprintf_r+0x1f0>)
 8007926:	a904      	add	r1, sp, #16
 8007928:	4638      	mov	r0, r7
 800792a:	f7fe f8df 	bl	8005aec <_printf_i>
 800792e:	e7ed      	b.n	800790c <_svfiprintf_r+0x1c0>
 8007930:	08008517 	.word	0x08008517
 8007934:	08008521 	.word	0x08008521
 8007938:	080055bd 	.word	0x080055bd
 800793c:	08007695 	.word	0x08007695
 8007940:	0800851d 	.word	0x0800851d

08007944 <__sflush_r>:
 8007944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794c:	0716      	lsls	r6, r2, #28
 800794e:	4605      	mov	r5, r0
 8007950:	460c      	mov	r4, r1
 8007952:	d454      	bmi.n	80079fe <__sflush_r+0xba>
 8007954:	684b      	ldr	r3, [r1, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	dc02      	bgt.n	8007960 <__sflush_r+0x1c>
 800795a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	dd48      	ble.n	80079f2 <__sflush_r+0xae>
 8007960:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007962:	2e00      	cmp	r6, #0
 8007964:	d045      	beq.n	80079f2 <__sflush_r+0xae>
 8007966:	2300      	movs	r3, #0
 8007968:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800796c:	682f      	ldr	r7, [r5, #0]
 800796e:	6a21      	ldr	r1, [r4, #32]
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	d030      	beq.n	80079d6 <__sflush_r+0x92>
 8007974:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	0759      	lsls	r1, r3, #29
 800797a:	d505      	bpl.n	8007988 <__sflush_r+0x44>
 800797c:	6863      	ldr	r3, [r4, #4]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007982:	b10b      	cbz	r3, 8007988 <__sflush_r+0x44>
 8007984:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800798c:	6a21      	ldr	r1, [r4, #32]
 800798e:	4628      	mov	r0, r5
 8007990:	47b0      	blx	r6
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	d106      	bne.n	80079a6 <__sflush_r+0x62>
 8007998:	6829      	ldr	r1, [r5, #0]
 800799a:	291d      	cmp	r1, #29
 800799c:	d82b      	bhi.n	80079f6 <__sflush_r+0xb2>
 800799e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a48 <__sflush_r+0x104>)
 80079a0:	40ca      	lsrs	r2, r1
 80079a2:	07d6      	lsls	r6, r2, #31
 80079a4:	d527      	bpl.n	80079f6 <__sflush_r+0xb2>
 80079a6:	2200      	movs	r2, #0
 80079a8:	6062      	str	r2, [r4, #4]
 80079aa:	04d9      	lsls	r1, r3, #19
 80079ac:	6922      	ldr	r2, [r4, #16]
 80079ae:	6022      	str	r2, [r4, #0]
 80079b0:	d504      	bpl.n	80079bc <__sflush_r+0x78>
 80079b2:	1c42      	adds	r2, r0, #1
 80079b4:	d101      	bne.n	80079ba <__sflush_r+0x76>
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	b903      	cbnz	r3, 80079bc <__sflush_r+0x78>
 80079ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80079bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079be:	602f      	str	r7, [r5, #0]
 80079c0:	b1b9      	cbz	r1, 80079f2 <__sflush_r+0xae>
 80079c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079c6:	4299      	cmp	r1, r3
 80079c8:	d002      	beq.n	80079d0 <__sflush_r+0x8c>
 80079ca:	4628      	mov	r0, r5
 80079cc:	f7ff f9e8 	bl	8006da0 <_free_r>
 80079d0:	2300      	movs	r3, #0
 80079d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80079d4:	e00d      	b.n	80079f2 <__sflush_r+0xae>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4628      	mov	r0, r5
 80079da:	47b0      	blx	r6
 80079dc:	4602      	mov	r2, r0
 80079de:	1c50      	adds	r0, r2, #1
 80079e0:	d1c9      	bne.n	8007976 <__sflush_r+0x32>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0c6      	beq.n	8007976 <__sflush_r+0x32>
 80079e8:	2b1d      	cmp	r3, #29
 80079ea:	d001      	beq.n	80079f0 <__sflush_r+0xac>
 80079ec:	2b16      	cmp	r3, #22
 80079ee:	d11e      	bne.n	8007a2e <__sflush_r+0xea>
 80079f0:	602f      	str	r7, [r5, #0]
 80079f2:	2000      	movs	r0, #0
 80079f4:	e022      	b.n	8007a3c <__sflush_r+0xf8>
 80079f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079fa:	b21b      	sxth	r3, r3
 80079fc:	e01b      	b.n	8007a36 <__sflush_r+0xf2>
 80079fe:	690f      	ldr	r7, [r1, #16]
 8007a00:	2f00      	cmp	r7, #0
 8007a02:	d0f6      	beq.n	80079f2 <__sflush_r+0xae>
 8007a04:	0793      	lsls	r3, r2, #30
 8007a06:	680e      	ldr	r6, [r1, #0]
 8007a08:	bf08      	it	eq
 8007a0a:	694b      	ldreq	r3, [r1, #20]
 8007a0c:	600f      	str	r7, [r1, #0]
 8007a0e:	bf18      	it	ne
 8007a10:	2300      	movne	r3, #0
 8007a12:	eba6 0807 	sub.w	r8, r6, r7
 8007a16:	608b      	str	r3, [r1, #8]
 8007a18:	f1b8 0f00 	cmp.w	r8, #0
 8007a1c:	dde9      	ble.n	80079f2 <__sflush_r+0xae>
 8007a1e:	6a21      	ldr	r1, [r4, #32]
 8007a20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a22:	4643      	mov	r3, r8
 8007a24:	463a      	mov	r2, r7
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b0      	blx	r6
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	dc08      	bgt.n	8007a40 <__sflush_r+0xfc>
 8007a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a36:	81a3      	strh	r3, [r4, #12]
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a40:	4407      	add	r7, r0
 8007a42:	eba8 0800 	sub.w	r8, r8, r0
 8007a46:	e7e7      	b.n	8007a18 <__sflush_r+0xd4>
 8007a48:	20400001 	.word	0x20400001

08007a4c <_fflush_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	690b      	ldr	r3, [r1, #16]
 8007a50:	4605      	mov	r5, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	b913      	cbnz	r3, 8007a5c <_fflush_r+0x10>
 8007a56:	2500      	movs	r5, #0
 8007a58:	4628      	mov	r0, r5
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	b118      	cbz	r0, 8007a66 <_fflush_r+0x1a>
 8007a5e:	6a03      	ldr	r3, [r0, #32]
 8007a60:	b90b      	cbnz	r3, 8007a66 <_fflush_r+0x1a>
 8007a62:	f7fe f9ed 	bl	8005e40 <__sinit>
 8007a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f3      	beq.n	8007a56 <_fflush_r+0xa>
 8007a6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a70:	07d0      	lsls	r0, r2, #31
 8007a72:	d404      	bmi.n	8007a7e <_fflush_r+0x32>
 8007a74:	0599      	lsls	r1, r3, #22
 8007a76:	d402      	bmi.n	8007a7e <_fflush_r+0x32>
 8007a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a7a:	f7fe fb36 	bl	80060ea <__retarget_lock_acquire_recursive>
 8007a7e:	4628      	mov	r0, r5
 8007a80:	4621      	mov	r1, r4
 8007a82:	f7ff ff5f 	bl	8007944 <__sflush_r>
 8007a86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a88:	07da      	lsls	r2, r3, #31
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	d4e4      	bmi.n	8007a58 <_fflush_r+0xc>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	059b      	lsls	r3, r3, #22
 8007a92:	d4e1      	bmi.n	8007a58 <_fflush_r+0xc>
 8007a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a96:	f7fe fb29 	bl	80060ec <__retarget_lock_release_recursive>
 8007a9a:	e7dd      	b.n	8007a58 <_fflush_r+0xc>

08007a9c <memmove>:
 8007a9c:	4288      	cmp	r0, r1
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	eb01 0402 	add.w	r4, r1, r2
 8007aa4:	d902      	bls.n	8007aac <memmove+0x10>
 8007aa6:	4284      	cmp	r4, r0
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	d807      	bhi.n	8007abc <memmove+0x20>
 8007aac:	1e43      	subs	r3, r0, #1
 8007aae:	42a1      	cmp	r1, r4
 8007ab0:	d008      	beq.n	8007ac4 <memmove+0x28>
 8007ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aba:	e7f8      	b.n	8007aae <memmove+0x12>
 8007abc:	4402      	add	r2, r0
 8007abe:	4601      	mov	r1, r0
 8007ac0:	428a      	cmp	r2, r1
 8007ac2:	d100      	bne.n	8007ac6 <memmove+0x2a>
 8007ac4:	bd10      	pop	{r4, pc}
 8007ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ace:	e7f7      	b.n	8007ac0 <memmove+0x24>

08007ad0 <_sbrk_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d06      	ldr	r5, [pc, #24]	@ (8007aec <_sbrk_r+0x1c>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	f7fa f8a4 	bl	8001c28 <_sbrk>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_sbrk_r+0x1a>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_sbrk_r+0x1a>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	20000724 	.word	0x20000724

08007af0 <memcpy>:
 8007af0:	440a      	add	r2, r1
 8007af2:	4291      	cmp	r1, r2
 8007af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af8:	d100      	bne.n	8007afc <memcpy+0xc>
 8007afa:	4770      	bx	lr
 8007afc:	b510      	push	{r4, lr}
 8007afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b06:	4291      	cmp	r1, r2
 8007b08:	d1f9      	bne.n	8007afe <memcpy+0xe>
 8007b0a:	bd10      	pop	{r4, pc}

08007b0c <__assert_func>:
 8007b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b0e:	4614      	mov	r4, r2
 8007b10:	461a      	mov	r2, r3
 8007b12:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <__assert_func+0x2c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4605      	mov	r5, r0
 8007b18:	68d8      	ldr	r0, [r3, #12]
 8007b1a:	b14c      	cbz	r4, 8007b30 <__assert_func+0x24>
 8007b1c:	4b07      	ldr	r3, [pc, #28]	@ (8007b3c <__assert_func+0x30>)
 8007b1e:	9100      	str	r1, [sp, #0]
 8007b20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b24:	4906      	ldr	r1, [pc, #24]	@ (8007b40 <__assert_func+0x34>)
 8007b26:	462b      	mov	r3, r5
 8007b28:	f000 f870 	bl	8007c0c <fiprintf>
 8007b2c:	f000 f880 	bl	8007c30 <abort>
 8007b30:	4b04      	ldr	r3, [pc, #16]	@ (8007b44 <__assert_func+0x38>)
 8007b32:	461c      	mov	r4, r3
 8007b34:	e7f3      	b.n	8007b1e <__assert_func+0x12>
 8007b36:	bf00      	nop
 8007b38:	20000018 	.word	0x20000018
 8007b3c:	08008532 	.word	0x08008532
 8007b40:	0800853f 	.word	0x0800853f
 8007b44:	0800856d 	.word	0x0800856d

08007b48 <_calloc_r>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	fba1 5402 	umull	r5, r4, r1, r2
 8007b4e:	b934      	cbnz	r4, 8007b5e <_calloc_r+0x16>
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7ff f999 	bl	8006e88 <_malloc_r>
 8007b56:	4606      	mov	r6, r0
 8007b58:	b928      	cbnz	r0, 8007b66 <_calloc_r+0x1e>
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
 8007b5e:	220c      	movs	r2, #12
 8007b60:	6002      	str	r2, [r0, #0]
 8007b62:	2600      	movs	r6, #0
 8007b64:	e7f9      	b.n	8007b5a <_calloc_r+0x12>
 8007b66:	462a      	mov	r2, r5
 8007b68:	4621      	mov	r1, r4
 8007b6a:	f7fe fa18 	bl	8005f9e <memset>
 8007b6e:	e7f4      	b.n	8007b5a <_calloc_r+0x12>

08007b70 <__ascii_mbtowc>:
 8007b70:	b082      	sub	sp, #8
 8007b72:	b901      	cbnz	r1, 8007b76 <__ascii_mbtowc+0x6>
 8007b74:	a901      	add	r1, sp, #4
 8007b76:	b142      	cbz	r2, 8007b8a <__ascii_mbtowc+0x1a>
 8007b78:	b14b      	cbz	r3, 8007b8e <__ascii_mbtowc+0x1e>
 8007b7a:	7813      	ldrb	r3, [r2, #0]
 8007b7c:	600b      	str	r3, [r1, #0]
 8007b7e:	7812      	ldrb	r2, [r2, #0]
 8007b80:	1e10      	subs	r0, r2, #0
 8007b82:	bf18      	it	ne
 8007b84:	2001      	movne	r0, #1
 8007b86:	b002      	add	sp, #8
 8007b88:	4770      	bx	lr
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	e7fb      	b.n	8007b86 <__ascii_mbtowc+0x16>
 8007b8e:	f06f 0001 	mvn.w	r0, #1
 8007b92:	e7f8      	b.n	8007b86 <__ascii_mbtowc+0x16>

08007b94 <_realloc_r>:
 8007b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	4607      	mov	r7, r0
 8007b9a:	4614      	mov	r4, r2
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	b921      	cbnz	r1, 8007baa <_realloc_r+0x16>
 8007ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	f7ff b96f 	b.w	8006e88 <_malloc_r>
 8007baa:	b92a      	cbnz	r2, 8007bb8 <_realloc_r+0x24>
 8007bac:	f7ff f8f8 	bl	8006da0 <_free_r>
 8007bb0:	4625      	mov	r5, r4
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb8:	f000 f841 	bl	8007c3e <_malloc_usable_size_r>
 8007bbc:	4284      	cmp	r4, r0
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	d802      	bhi.n	8007bc8 <_realloc_r+0x34>
 8007bc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bc6:	d8f4      	bhi.n	8007bb2 <_realloc_r+0x1e>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4638      	mov	r0, r7
 8007bcc:	f7ff f95c 	bl	8006e88 <_malloc_r>
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	b908      	cbnz	r0, 8007bd8 <_realloc_r+0x44>
 8007bd4:	4645      	mov	r5, r8
 8007bd6:	e7ec      	b.n	8007bb2 <_realloc_r+0x1e>
 8007bd8:	42b4      	cmp	r4, r6
 8007bda:	4622      	mov	r2, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	bf28      	it	cs
 8007be0:	4632      	movcs	r2, r6
 8007be2:	f7ff ff85 	bl	8007af0 <memcpy>
 8007be6:	4629      	mov	r1, r5
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7ff f8d9 	bl	8006da0 <_free_r>
 8007bee:	e7f1      	b.n	8007bd4 <_realloc_r+0x40>

08007bf0 <__ascii_wctomb>:
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	b141      	cbz	r1, 8007c08 <__ascii_wctomb+0x18>
 8007bf6:	2aff      	cmp	r2, #255	@ 0xff
 8007bf8:	d904      	bls.n	8007c04 <__ascii_wctomb+0x14>
 8007bfa:	228a      	movs	r2, #138	@ 0x8a
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007c02:	4770      	bx	lr
 8007c04:	700a      	strb	r2, [r1, #0]
 8007c06:	2001      	movs	r0, #1
 8007c08:	4770      	bx	lr
	...

08007c0c <fiprintf>:
 8007c0c:	b40e      	push	{r1, r2, r3}
 8007c0e:	b503      	push	{r0, r1, lr}
 8007c10:	4601      	mov	r1, r0
 8007c12:	ab03      	add	r3, sp, #12
 8007c14:	4805      	ldr	r0, [pc, #20]	@ (8007c2c <fiprintf+0x20>)
 8007c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	f000 f83f 	bl	8007ca0 <_vfiprintf_r>
 8007c22:	b002      	add	sp, #8
 8007c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c28:	b003      	add	sp, #12
 8007c2a:	4770      	bx	lr
 8007c2c:	20000018 	.word	0x20000018

08007c30 <abort>:
 8007c30:	b508      	push	{r3, lr}
 8007c32:	2006      	movs	r0, #6
 8007c34:	f000 fa08 	bl	8008048 <raise>
 8007c38:	2001      	movs	r0, #1
 8007c3a:	f7f9 ff7c 	bl	8001b36 <_exit>

08007c3e <_malloc_usable_size_r>:
 8007c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c42:	1f18      	subs	r0, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bfbc      	itt	lt
 8007c48:	580b      	ldrlt	r3, [r1, r0]
 8007c4a:	18c0      	addlt	r0, r0, r3
 8007c4c:	4770      	bx	lr

08007c4e <__sfputc_r>:
 8007c4e:	6893      	ldr	r3, [r2, #8]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	b410      	push	{r4}
 8007c56:	6093      	str	r3, [r2, #8]
 8007c58:	da08      	bge.n	8007c6c <__sfputc_r+0x1e>
 8007c5a:	6994      	ldr	r4, [r2, #24]
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	db01      	blt.n	8007c64 <__sfputc_r+0x16>
 8007c60:	290a      	cmp	r1, #10
 8007c62:	d103      	bne.n	8007c6c <__sfputc_r+0x1e>
 8007c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c68:	f000 b932 	b.w	8007ed0 <__swbuf_r>
 8007c6c:	6813      	ldr	r3, [r2, #0]
 8007c6e:	1c58      	adds	r0, r3, #1
 8007c70:	6010      	str	r0, [r2, #0]
 8007c72:	7019      	strb	r1, [r3, #0]
 8007c74:	4608      	mov	r0, r1
 8007c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <__sfputs_r>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	4614      	mov	r4, r2
 8007c84:	18d5      	adds	r5, r2, r3
 8007c86:	42ac      	cmp	r4, r5
 8007c88:	d101      	bne.n	8007c8e <__sfputs_r+0x12>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e007      	b.n	8007c9e <__sfputs_r+0x22>
 8007c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c92:	463a      	mov	r2, r7
 8007c94:	4630      	mov	r0, r6
 8007c96:	f7ff ffda 	bl	8007c4e <__sfputc_r>
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	d1f3      	bne.n	8007c86 <__sfputs_r+0xa>
 8007c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ca0 <_vfiprintf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	460d      	mov	r5, r1
 8007ca6:	b09d      	sub	sp, #116	@ 0x74
 8007ca8:	4614      	mov	r4, r2
 8007caa:	4698      	mov	r8, r3
 8007cac:	4606      	mov	r6, r0
 8007cae:	b118      	cbz	r0, 8007cb8 <_vfiprintf_r+0x18>
 8007cb0:	6a03      	ldr	r3, [r0, #32]
 8007cb2:	b90b      	cbnz	r3, 8007cb8 <_vfiprintf_r+0x18>
 8007cb4:	f7fe f8c4 	bl	8005e40 <__sinit>
 8007cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cba:	07d9      	lsls	r1, r3, #31
 8007cbc:	d405      	bmi.n	8007cca <_vfiprintf_r+0x2a>
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	059a      	lsls	r2, r3, #22
 8007cc2:	d402      	bmi.n	8007cca <_vfiprintf_r+0x2a>
 8007cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cc6:	f7fe fa10 	bl	80060ea <__retarget_lock_acquire_recursive>
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	071b      	lsls	r3, r3, #28
 8007cce:	d501      	bpl.n	8007cd4 <_vfiprintf_r+0x34>
 8007cd0:	692b      	ldr	r3, [r5, #16]
 8007cd2:	b99b      	cbnz	r3, 8007cfc <_vfiprintf_r+0x5c>
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f000 f938 	bl	8007f4c <__swsetup_r>
 8007cdc:	b170      	cbz	r0, 8007cfc <_vfiprintf_r+0x5c>
 8007cde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ce0:	07dc      	lsls	r4, r3, #31
 8007ce2:	d504      	bpl.n	8007cee <_vfiprintf_r+0x4e>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce8:	b01d      	add	sp, #116	@ 0x74
 8007cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	0598      	lsls	r0, r3, #22
 8007cf2:	d4f7      	bmi.n	8007ce4 <_vfiprintf_r+0x44>
 8007cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cf6:	f7fe f9f9 	bl	80060ec <__retarget_lock_release_recursive>
 8007cfa:	e7f3      	b.n	8007ce4 <_vfiprintf_r+0x44>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d00:	2320      	movs	r3, #32
 8007d02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d0a:	2330      	movs	r3, #48	@ 0x30
 8007d0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ebc <_vfiprintf_r+0x21c>
 8007d10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d14:	f04f 0901 	mov.w	r9, #1
 8007d18:	4623      	mov	r3, r4
 8007d1a:	469a      	mov	sl, r3
 8007d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d20:	b10a      	cbz	r2, 8007d26 <_vfiprintf_r+0x86>
 8007d22:	2a25      	cmp	r2, #37	@ 0x25
 8007d24:	d1f9      	bne.n	8007d1a <_vfiprintf_r+0x7a>
 8007d26:	ebba 0b04 	subs.w	fp, sl, r4
 8007d2a:	d00b      	beq.n	8007d44 <_vfiprintf_r+0xa4>
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	4622      	mov	r2, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7ff ffa2 	bl	8007c7c <__sfputs_r>
 8007d38:	3001      	adds	r0, #1
 8007d3a:	f000 80a7 	beq.w	8007e8c <_vfiprintf_r+0x1ec>
 8007d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d40:	445a      	add	r2, fp
 8007d42:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d44:	f89a 3000 	ldrb.w	r3, [sl]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 809f 	beq.w	8007e8c <_vfiprintf_r+0x1ec>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d58:	f10a 0a01 	add.w	sl, sl, #1
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d64:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d66:	4654      	mov	r4, sl
 8007d68:	2205      	movs	r2, #5
 8007d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6e:	4853      	ldr	r0, [pc, #332]	@ (8007ebc <_vfiprintf_r+0x21c>)
 8007d70:	f7f8 fa2e 	bl	80001d0 <memchr>
 8007d74:	9a04      	ldr	r2, [sp, #16]
 8007d76:	b9d8      	cbnz	r0, 8007db0 <_vfiprintf_r+0x110>
 8007d78:	06d1      	lsls	r1, r2, #27
 8007d7a:	bf44      	itt	mi
 8007d7c:	2320      	movmi	r3, #32
 8007d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d82:	0713      	lsls	r3, r2, #28
 8007d84:	bf44      	itt	mi
 8007d86:	232b      	movmi	r3, #43	@ 0x2b
 8007d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d92:	d015      	beq.n	8007dc0 <_vfiprintf_r+0x120>
 8007d94:	9a07      	ldr	r2, [sp, #28]
 8007d96:	4654      	mov	r4, sl
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f04f 0c0a 	mov.w	ip, #10
 8007d9e:	4621      	mov	r1, r4
 8007da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da4:	3b30      	subs	r3, #48	@ 0x30
 8007da6:	2b09      	cmp	r3, #9
 8007da8:	d94b      	bls.n	8007e42 <_vfiprintf_r+0x1a2>
 8007daa:	b1b0      	cbz	r0, 8007dda <_vfiprintf_r+0x13a>
 8007dac:	9207      	str	r2, [sp, #28]
 8007dae:	e014      	b.n	8007dda <_vfiprintf_r+0x13a>
 8007db0:	eba0 0308 	sub.w	r3, r0, r8
 8007db4:	fa09 f303 	lsl.w	r3, r9, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	46a2      	mov	sl, r4
 8007dbe:	e7d2      	b.n	8007d66 <_vfiprintf_r+0xc6>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	1d19      	adds	r1, r3, #4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	9103      	str	r1, [sp, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfbb      	ittet	lt
 8007dcc:	425b      	neglt	r3, r3
 8007dce:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd2:	9307      	strge	r3, [sp, #28]
 8007dd4:	9307      	strlt	r3, [sp, #28]
 8007dd6:	bfb8      	it	lt
 8007dd8:	9204      	strlt	r2, [sp, #16]
 8007dda:	7823      	ldrb	r3, [r4, #0]
 8007ddc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dde:	d10a      	bne.n	8007df6 <_vfiprintf_r+0x156>
 8007de0:	7863      	ldrb	r3, [r4, #1]
 8007de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007de4:	d132      	bne.n	8007e4c <_vfiprintf_r+0x1ac>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	1d1a      	adds	r2, r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	9203      	str	r2, [sp, #12]
 8007dee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007df2:	3402      	adds	r4, #2
 8007df4:	9305      	str	r3, [sp, #20]
 8007df6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ecc <_vfiprintf_r+0x22c>
 8007dfa:	7821      	ldrb	r1, [r4, #0]
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	4650      	mov	r0, sl
 8007e00:	f7f8 f9e6 	bl	80001d0 <memchr>
 8007e04:	b138      	cbz	r0, 8007e16 <_vfiprintf_r+0x176>
 8007e06:	9b04      	ldr	r3, [sp, #16]
 8007e08:	eba0 000a 	sub.w	r0, r0, sl
 8007e0c:	2240      	movs	r2, #64	@ 0x40
 8007e0e:	4082      	lsls	r2, r0
 8007e10:	4313      	orrs	r3, r2
 8007e12:	3401      	adds	r4, #1
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1a:	4829      	ldr	r0, [pc, #164]	@ (8007ec0 <_vfiprintf_r+0x220>)
 8007e1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e20:	2206      	movs	r2, #6
 8007e22:	f7f8 f9d5 	bl	80001d0 <memchr>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d03f      	beq.n	8007eaa <_vfiprintf_r+0x20a>
 8007e2a:	4b26      	ldr	r3, [pc, #152]	@ (8007ec4 <_vfiprintf_r+0x224>)
 8007e2c:	bb1b      	cbnz	r3, 8007e76 <_vfiprintf_r+0x1d6>
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	3307      	adds	r3, #7
 8007e32:	f023 0307 	bic.w	r3, r3, #7
 8007e36:	3308      	adds	r3, #8
 8007e38:	9303      	str	r3, [sp, #12]
 8007e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3c:	443b      	add	r3, r7
 8007e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e40:	e76a      	b.n	8007d18 <_vfiprintf_r+0x78>
 8007e42:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e46:	460c      	mov	r4, r1
 8007e48:	2001      	movs	r0, #1
 8007e4a:	e7a8      	b.n	8007d9e <_vfiprintf_r+0xfe>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	3401      	adds	r4, #1
 8007e50:	9305      	str	r3, [sp, #20]
 8007e52:	4619      	mov	r1, r3
 8007e54:	f04f 0c0a 	mov.w	ip, #10
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e5e:	3a30      	subs	r2, #48	@ 0x30
 8007e60:	2a09      	cmp	r2, #9
 8007e62:	d903      	bls.n	8007e6c <_vfiprintf_r+0x1cc>
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d0c6      	beq.n	8007df6 <_vfiprintf_r+0x156>
 8007e68:	9105      	str	r1, [sp, #20]
 8007e6a:	e7c4      	b.n	8007df6 <_vfiprintf_r+0x156>
 8007e6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e70:	4604      	mov	r4, r0
 8007e72:	2301      	movs	r3, #1
 8007e74:	e7f0      	b.n	8007e58 <_vfiprintf_r+0x1b8>
 8007e76:	ab03      	add	r3, sp, #12
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	462a      	mov	r2, r5
 8007e7c:	4b12      	ldr	r3, [pc, #72]	@ (8007ec8 <_vfiprintf_r+0x228>)
 8007e7e:	a904      	add	r1, sp, #16
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7fd fb9b 	bl	80055bc <_printf_float>
 8007e86:	4607      	mov	r7, r0
 8007e88:	1c78      	adds	r0, r7, #1
 8007e8a:	d1d6      	bne.n	8007e3a <_vfiprintf_r+0x19a>
 8007e8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e8e:	07d9      	lsls	r1, r3, #31
 8007e90:	d405      	bmi.n	8007e9e <_vfiprintf_r+0x1fe>
 8007e92:	89ab      	ldrh	r3, [r5, #12]
 8007e94:	059a      	lsls	r2, r3, #22
 8007e96:	d402      	bmi.n	8007e9e <_vfiprintf_r+0x1fe>
 8007e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e9a:	f7fe f927 	bl	80060ec <__retarget_lock_release_recursive>
 8007e9e:	89ab      	ldrh	r3, [r5, #12]
 8007ea0:	065b      	lsls	r3, r3, #25
 8007ea2:	f53f af1f 	bmi.w	8007ce4 <_vfiprintf_r+0x44>
 8007ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ea8:	e71e      	b.n	8007ce8 <_vfiprintf_r+0x48>
 8007eaa:	ab03      	add	r3, sp, #12
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	462a      	mov	r2, r5
 8007eb0:	4b05      	ldr	r3, [pc, #20]	@ (8007ec8 <_vfiprintf_r+0x228>)
 8007eb2:	a904      	add	r1, sp, #16
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f7fd fe19 	bl	8005aec <_printf_i>
 8007eba:	e7e4      	b.n	8007e86 <_vfiprintf_r+0x1e6>
 8007ebc:	08008517 	.word	0x08008517
 8007ec0:	08008521 	.word	0x08008521
 8007ec4:	080055bd 	.word	0x080055bd
 8007ec8:	08007c7d 	.word	0x08007c7d
 8007ecc:	0800851d 	.word	0x0800851d

08007ed0 <__swbuf_r>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	460e      	mov	r6, r1
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	b118      	cbz	r0, 8007ee2 <__swbuf_r+0x12>
 8007eda:	6a03      	ldr	r3, [r0, #32]
 8007edc:	b90b      	cbnz	r3, 8007ee2 <__swbuf_r+0x12>
 8007ede:	f7fd ffaf 	bl	8005e40 <__sinit>
 8007ee2:	69a3      	ldr	r3, [r4, #24]
 8007ee4:	60a3      	str	r3, [r4, #8]
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	071a      	lsls	r2, r3, #28
 8007eea:	d501      	bpl.n	8007ef0 <__swbuf_r+0x20>
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	b943      	cbnz	r3, 8007f02 <__swbuf_r+0x32>
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 f82a 	bl	8007f4c <__swsetup_r>
 8007ef8:	b118      	cbz	r0, 8007f02 <__swbuf_r+0x32>
 8007efa:	f04f 37ff 	mov.w	r7, #4294967295
 8007efe:	4638      	mov	r0, r7
 8007f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	6922      	ldr	r2, [r4, #16]
 8007f06:	1a98      	subs	r0, r3, r2
 8007f08:	6963      	ldr	r3, [r4, #20]
 8007f0a:	b2f6      	uxtb	r6, r6
 8007f0c:	4283      	cmp	r3, r0
 8007f0e:	4637      	mov	r7, r6
 8007f10:	dc05      	bgt.n	8007f1e <__swbuf_r+0x4e>
 8007f12:	4621      	mov	r1, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	f7ff fd99 	bl	8007a4c <_fflush_r>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d1ed      	bne.n	8007efa <__swbuf_r+0x2a>
 8007f1e:	68a3      	ldr	r3, [r4, #8]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	60a3      	str	r3, [r4, #8]
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	6022      	str	r2, [r4, #0]
 8007f2a:	701e      	strb	r6, [r3, #0]
 8007f2c:	6962      	ldr	r2, [r4, #20]
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d004      	beq.n	8007f3e <__swbuf_r+0x6e>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	07db      	lsls	r3, r3, #31
 8007f38:	d5e1      	bpl.n	8007efe <__swbuf_r+0x2e>
 8007f3a:	2e0a      	cmp	r6, #10
 8007f3c:	d1df      	bne.n	8007efe <__swbuf_r+0x2e>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f7ff fd83 	bl	8007a4c <_fflush_r>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d0d9      	beq.n	8007efe <__swbuf_r+0x2e>
 8007f4a:	e7d6      	b.n	8007efa <__swbuf_r+0x2a>

08007f4c <__swsetup_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4b29      	ldr	r3, [pc, #164]	@ (8007ff4 <__swsetup_r+0xa8>)
 8007f50:	4605      	mov	r5, r0
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	460c      	mov	r4, r1
 8007f56:	b118      	cbz	r0, 8007f60 <__swsetup_r+0x14>
 8007f58:	6a03      	ldr	r3, [r0, #32]
 8007f5a:	b90b      	cbnz	r3, 8007f60 <__swsetup_r+0x14>
 8007f5c:	f7fd ff70 	bl	8005e40 <__sinit>
 8007f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f64:	0719      	lsls	r1, r3, #28
 8007f66:	d422      	bmi.n	8007fae <__swsetup_r+0x62>
 8007f68:	06da      	lsls	r2, r3, #27
 8007f6a:	d407      	bmi.n	8007f7c <__swsetup_r+0x30>
 8007f6c:	2209      	movs	r2, #9
 8007f6e:	602a      	str	r2, [r5, #0]
 8007f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f74:	81a3      	strh	r3, [r4, #12]
 8007f76:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7a:	e033      	b.n	8007fe4 <__swsetup_r+0x98>
 8007f7c:	0758      	lsls	r0, r3, #29
 8007f7e:	d512      	bpl.n	8007fa6 <__swsetup_r+0x5a>
 8007f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f82:	b141      	cbz	r1, 8007f96 <__swsetup_r+0x4a>
 8007f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	d002      	beq.n	8007f92 <__swsetup_r+0x46>
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f7fe ff07 	bl	8006da0 <_free_r>
 8007f92:	2300      	movs	r3, #0
 8007f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	6923      	ldr	r3, [r4, #16]
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	f043 0308 	orr.w	r3, r3, #8
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	b94b      	cbnz	r3, 8007fc6 <__swsetup_r+0x7a>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fbc:	d003      	beq.n	8007fc6 <__swsetup_r+0x7a>
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f000 f883 	bl	80080cc <__smakebuf_r>
 8007fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fca:	f013 0201 	ands.w	r2, r3, #1
 8007fce:	d00a      	beq.n	8007fe6 <__swsetup_r+0x9a>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	60a2      	str	r2, [r4, #8]
 8007fd4:	6962      	ldr	r2, [r4, #20]
 8007fd6:	4252      	negs	r2, r2
 8007fd8:	61a2      	str	r2, [r4, #24]
 8007fda:	6922      	ldr	r2, [r4, #16]
 8007fdc:	b942      	cbnz	r2, 8007ff0 <__swsetup_r+0xa4>
 8007fde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fe2:	d1c5      	bne.n	8007f70 <__swsetup_r+0x24>
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
 8007fe6:	0799      	lsls	r1, r3, #30
 8007fe8:	bf58      	it	pl
 8007fea:	6962      	ldrpl	r2, [r4, #20]
 8007fec:	60a2      	str	r2, [r4, #8]
 8007fee:	e7f4      	b.n	8007fda <__swsetup_r+0x8e>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e7f7      	b.n	8007fe4 <__swsetup_r+0x98>
 8007ff4:	20000018 	.word	0x20000018

08007ff8 <_raise_r>:
 8007ff8:	291f      	cmp	r1, #31
 8007ffa:	b538      	push	{r3, r4, r5, lr}
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	d904      	bls.n	800800c <_raise_r+0x14>
 8008002:	2316      	movs	r3, #22
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	f04f 30ff 	mov.w	r0, #4294967295
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800800e:	b112      	cbz	r2, 8008016 <_raise_r+0x1e>
 8008010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008014:	b94b      	cbnz	r3, 800802a <_raise_r+0x32>
 8008016:	4628      	mov	r0, r5
 8008018:	f000 f830 	bl	800807c <_getpid_r>
 800801c:	4622      	mov	r2, r4
 800801e:	4601      	mov	r1, r0
 8008020:	4628      	mov	r0, r5
 8008022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008026:	f000 b817 	b.w	8008058 <_kill_r>
 800802a:	2b01      	cmp	r3, #1
 800802c:	d00a      	beq.n	8008044 <_raise_r+0x4c>
 800802e:	1c59      	adds	r1, r3, #1
 8008030:	d103      	bne.n	800803a <_raise_r+0x42>
 8008032:	2316      	movs	r3, #22
 8008034:	6003      	str	r3, [r0, #0]
 8008036:	2001      	movs	r0, #1
 8008038:	e7e7      	b.n	800800a <_raise_r+0x12>
 800803a:	2100      	movs	r1, #0
 800803c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008040:	4620      	mov	r0, r4
 8008042:	4798      	blx	r3
 8008044:	2000      	movs	r0, #0
 8008046:	e7e0      	b.n	800800a <_raise_r+0x12>

08008048 <raise>:
 8008048:	4b02      	ldr	r3, [pc, #8]	@ (8008054 <raise+0xc>)
 800804a:	4601      	mov	r1, r0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f7ff bfd3 	b.w	8007ff8 <_raise_r>
 8008052:	bf00      	nop
 8008054:	20000018 	.word	0x20000018

08008058 <_kill_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d07      	ldr	r5, [pc, #28]	@ (8008078 <_kill_r+0x20>)
 800805c:	2300      	movs	r3, #0
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	4611      	mov	r1, r2
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	f7f9 fd56 	bl	8001b16 <_kill>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	d102      	bne.n	8008074 <_kill_r+0x1c>
 800806e:	682b      	ldr	r3, [r5, #0]
 8008070:	b103      	cbz	r3, 8008074 <_kill_r+0x1c>
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	bf00      	nop
 8008078:	20000724 	.word	0x20000724

0800807c <_getpid_r>:
 800807c:	f7f9 bd43 	b.w	8001b06 <_getpid>

08008080 <__swhatbuf_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	460c      	mov	r4, r1
 8008084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008088:	2900      	cmp	r1, #0
 800808a:	b096      	sub	sp, #88	@ 0x58
 800808c:	4615      	mov	r5, r2
 800808e:	461e      	mov	r6, r3
 8008090:	da0d      	bge.n	80080ae <__swhatbuf_r+0x2e>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008098:	f04f 0100 	mov.w	r1, #0
 800809c:	bf14      	ite	ne
 800809e:	2340      	movne	r3, #64	@ 0x40
 80080a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080a4:	2000      	movs	r0, #0
 80080a6:	6031      	str	r1, [r6, #0]
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	b016      	add	sp, #88	@ 0x58
 80080ac:	bd70      	pop	{r4, r5, r6, pc}
 80080ae:	466a      	mov	r2, sp
 80080b0:	f000 f848 	bl	8008144 <_fstat_r>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	dbec      	blt.n	8008092 <__swhatbuf_r+0x12>
 80080b8:	9901      	ldr	r1, [sp, #4]
 80080ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080c2:	4259      	negs	r1, r3
 80080c4:	4159      	adcs	r1, r3
 80080c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080ca:	e7eb      	b.n	80080a4 <__swhatbuf_r+0x24>

080080cc <__smakebuf_r>:
 80080cc:	898b      	ldrh	r3, [r1, #12]
 80080ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d0:	079d      	lsls	r5, r3, #30
 80080d2:	4606      	mov	r6, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	d507      	bpl.n	80080e8 <__smakebuf_r+0x1c>
 80080d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	2301      	movs	r3, #1
 80080e2:	6163      	str	r3, [r4, #20]
 80080e4:	b003      	add	sp, #12
 80080e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e8:	ab01      	add	r3, sp, #4
 80080ea:	466a      	mov	r2, sp
 80080ec:	f7ff ffc8 	bl	8008080 <__swhatbuf_r>
 80080f0:	9f00      	ldr	r7, [sp, #0]
 80080f2:	4605      	mov	r5, r0
 80080f4:	4639      	mov	r1, r7
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7fe fec6 	bl	8006e88 <_malloc_r>
 80080fc:	b948      	cbnz	r0, 8008112 <__smakebuf_r+0x46>
 80080fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008102:	059a      	lsls	r2, r3, #22
 8008104:	d4ee      	bmi.n	80080e4 <__smakebuf_r+0x18>
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	f043 0302 	orr.w	r3, r3, #2
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	e7e2      	b.n	80080d8 <__smakebuf_r+0xc>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	6020      	str	r0, [r4, #0]
 8008116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008122:	b15b      	cbz	r3, 800813c <__smakebuf_r+0x70>
 8008124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008128:	4630      	mov	r0, r6
 800812a:	f000 f81d 	bl	8008168 <_isatty_r>
 800812e:	b128      	cbz	r0, 800813c <__smakebuf_r+0x70>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	431d      	orrs	r5, r3
 8008140:	81a5      	strh	r5, [r4, #12]
 8008142:	e7cf      	b.n	80080e4 <__smakebuf_r+0x18>

08008144 <_fstat_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	@ (8008164 <_fstat_r+0x20>)
 8008148:	2300      	movs	r3, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	f7f9 fd40 	bl	8001bd6 <_fstat>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d102      	bne.n	8008160 <_fstat_r+0x1c>
 800815a:	682b      	ldr	r3, [r5, #0]
 800815c:	b103      	cbz	r3, 8008160 <_fstat_r+0x1c>
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	bd38      	pop	{r3, r4, r5, pc}
 8008162:	bf00      	nop
 8008164:	20000724 	.word	0x20000724

08008168 <_isatty_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	@ (8008184 <_isatty_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7f9 fd3f 	bl	8001bf6 <_isatty>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_isatty_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_isatty_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	20000724 	.word	0x20000724

08008188 <_init>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr

08008194 <_fini>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr
